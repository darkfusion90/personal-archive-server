{"version":3,"sources":["api/axios.ts","api/auth/login-api.ts","api/auth/logout-api.ts","api/auth/status-api.ts","store/models/AccountModel.ts","api/auth/register-api.ts","store/models/PostModel.ts","api/posts/posts-get.ts","api/posts/posts-create.ts","api/posts/posts-delete.ts","store/states/account-state/actions/update-account-action.ts","utils/simplify-axios-error.ts","store/states/account-state/actions/login-action.ts","store/states/account-state/actions/logout-action.ts","store/states/account-state/actions/create-account-action.ts","store/states/account-state/account-slice.ts","store/states/posts-state/posts-adapter.ts","store/states/account-state/index.ts","store/states/filter-state/filter-selectors.ts","store/states/posts-state/actions/get-all-posts.ts","store/states/posts-state/actions/create-post.ts","store/states/posts-state/actions/delete-post.ts","store/states/posts-state/posts-slice.ts","store/states/filter-state/filter-slice.ts","store/states/posts-state/index.ts","store/states/filter-state/FilterState.ts","store/utils/async-match-fulfilled.ts","store/states/account-state/middlewares/index.ts","store/states/account-state/middlewares/monitor-login.ts","store/states/posts-state/middlewares/index.ts","store/states/posts-state/middlewares/monitor-posts-filter.ts","store/middlewares.ts","store/store.ts","store/index.ts","theme/index.ts","theme/theme.ts","store/states/account-state/account-selectors.ts","hooks/useAccount.ts","features/SplashScreen/SplashScreen.tsx","components/HighlightTypography.tsx","hooks/useFilter.ts","features/PostList/components/PostTitle.tsx","features/PostList/components/PostComment.tsx","features/PostList/components/PostTags.tsx","features/PostList/components/PostMeta.tsx","features/PostList/components/PostSubtitle.tsx","store/states/posts-state/posts-selectors.ts","utils/unwrap-axios-thunk-result.ts","hooks/usePosts.ts","hooks/useSinglePost.ts","components/LoadingButton.tsx","features/PostList/components/PostActionButton.tsx","features/PostList/components/PostListItem.tsx","features/PostList/components/AddPostFab.tsx","features/PostList/components/PostList-Skeleton.tsx","components/LinkTypography.tsx","features/PostList/components/NoPostsView.tsx","components/form-fields/TextFormField.tsx","features/PostFilterDialog/components/PostFilterForm/PostFilterForm-View.tsx","features/PostFilterDialog/components/PostFilterForm/PostFilterForm-Connector.tsx","features/PostFilterDialog/components/PostFilterForm/index.ts","features/PostFilterDialog/index.ts","features/PostFilterDialog/PostFilterDialog.tsx","features/PostList/components/PostListFilter.tsx","features/PostList/constants.ts","features/PostList/PostList-View.tsx","features/PostList/index.ts","features/PostList/PostList-Connector.tsx","routes/pages/HomePage.tsx","components/form-fields/PasswordField.tsx","routes/pages/LoginPage/LoginPage-View.tsx","routes/pages/LoginPage/LoginPage-Container.tsx","routes/pages/LoginPage/index.ts","routes/pages/LoginPage/LoginPage-FormConnector.tsx","components/form-fields/OutlinedTextFormField.tsx","routes/pages/CreatePostPage/components/SelectPostTags.tsx","components/FormSubmitButton.tsx","routes/pages/CreatePostPage/CreatePostPage-View.tsx","hooks/useForm.ts","routes/pages/CreatePostPage/CreatePostPage-FormConnector.tsx","routes/pages/CreatePostPage/validator.ts","routes/pages/RegisterPage/RegisterPage-View.tsx","routes/pages/RegisterPage/validator.ts","routes/routes.ts","routes/pages/RegisterPage/RegisterPage-Connector.tsx","routes/index.ts","features/AppBar/components/AccountMenu.tsx","features/AppBar/components/AccountAvatar.tsx","features/AppBar/AppBar.tsx","features/AppScaffold/AppScaffold.tsx","routes/pages/PageNotFound.tsx","app/App.tsx","app/index.ts","index.tsx"],"names":["axios","create","withCredentials","login","loginData","post","logout","status","a","get","response","user","json","data","loggedIn","register","accountData","postFromJson","id","title","userId","link","comment","tags","createdAt","Date","updatedAt","buildQuery","searchQuery","query","sort","order","reqQuery","Object","keys","map","key","join","getPosts","opts","responseData","posts","getPostById","postId","createPost","postData","deletePost","delete","updateAccountAsync","createAsyncThunk","auth","simplifyAxiosError","statusText","loginAsync","thunkApi","console","log","rejectWithValue","logoutAsync","createAccountAsync","reducer","createSlice","name","initialState","account","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","postsAdapter","AccountState","createEntityAdapter","selectFilterState","filter","getAllPostsAsync","filterState","getState","tag","createPostAsync","deletePostAsync","Promise","reject","getInitialState","setAll","removeOne","filterSlice","setFilter","_","actions","asyncMatchFulfilled","asyncAction","match","api","next","hasLoggedIn","hasLoggedOut","hasRegistered","dispatch","accountStateMiddlewares","postsMiddlewares","store","configureStore","accountReducer","postsReducer","filterReducer","form","formReducer","middleware","getDefaultMiddleware","serializableCheck","concat","middlewares","useAppDispatch","useDispatch","rootTheme","createMuiTheme","palette","type","background","default","paper","primary","main","purple","contrastText","secondary","deepOrange","text","focus","accountSelector","accountStateSelector","useAccount","autoFetch","React","useState","accountFetchStatus","setAccountStatus","useEffect","then","unwrapResult","catch","updateAccount","useSelector","createAccount","loading","success","failure","uninitiated","useStyles","makeStyles","createStyles","root","height","typography","fontFamily","SplashScreen","classes","LinearProgress","Grid","container","direction","alignItems","justify","className","Typography","variant","theme","highlight","backgroundColor","HighlightTypography","typographyProps","TypographyWithProps","props","clsx","trimmedQuery","trim","toLowerCase","textLower","queryLength","length","results","indexOf","push","parse","queryMatcher","component","renderHighlighted","renderNormal","useFilter","fontWeight","fontWeightBold","color","textDecoration","transition","outline","blue","PostTitle","href","target","PostComment","paragraph","display","flexWrap","margin","spacing","marginLeft","light","PostTags","remainingTags","slice","Math","min","Chip","clickable","size","label","dotSeparator","subtitle2","PostMeta","creationDate","dateFormat","wrap","alignContent","item","PostSubtitle","selectors","getSelectors","selectAll","selectById","selectTotal","unwrapAxiosError","actionToMatch","resultAction","rejected","usePosts","postsStatus","setPostsStatus","error","setError","err","updatePosts","selectAllPosts","updateAllPosts","useSinglePost","stateIcon","marginRight","verticalAlign","LoadingButton","children","buttonProps","Button","disabled","CircularProgress","thickness","marginTop","PostActions","dialogOpen","setDialogOpen","closeDialog","enqueueSnackbar","useSnackbar","deletePostState","setDeletePostState","handleDeletePost","setTimeout","Tooltip","IconButton","onClick","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","disableElevation","postActionRoot","PostListItem","autoFocus","hasHighlighted","setHasHighlighted","ListItem","selected","ListItemText","secondaryTypographyProps","ListItemSecondaryAction","fab","position","right","bottom","zIndex","AddPostFab","history","useHistory","routeMap","path","WaveSkeleton","Skeleton","animation","PostListSkeleton","skeletons","itemClassName","subheader","List","Array","fill","LinkTypography","to","Link","subtitle1","NoPostsView","align","renderField","input","meta","touched","textFieldProps","hasError","TextField","fullWidth","TextFormField","Field","breakpoints","up","minWidth","width","SortTypeComponent","FormControl","FormLabel","RadioGroup","FormControlLabel","value","control","Radio","SortOrderComponent","PostFilterFormView","formId","onFormSubmit","onSubmit","WithForm","reduxForm","handleSubmit","afterSetFilter","formValues","PostFilterForm","connect","initialValues","PostFilterDialog","fullScreen","useMediaQuery","down","disableEscapeKeyDown","fontSize","PostListFilter","startIcon","constants","itemThemeSpacingUnit","listSubheader","marginBottom","subheaderMainTitle","flexGrow","PostListView","highlightPost","isLoading","ListSubheader","disableSticky","Helmet","Container","maxWidth","noMatchingPosts","primaryTypographyProps","postListBody","renderPosts","PostList","onUpdatePosts","HomePage","useLocation","undefined","PasswordField","showPassword","setShowPassword","InputProps","endAdornment","InputAdornment","padding","fullHeight","red","LoginPageView","isLoggingIn","loginError","loginResult","home","Divider","LoginPageContainer","otherProps","snackbarShown","setSnackbarShown","onEnter","LoginPage","username","password","setLoggingIn","setLoginError","setLoginResult","performLogin","unwrapAxiosThunkResult","errResponse","message","OutlinedTextFormField","renderSelect","currentValue","onChange","multiple","selectOnFocus","clearOnBlur","options","filterOptions","inputValue","filtered","getOptionLabel","option","renderInput","params","placeholder","renderTags","getTagProps","index","newValue","reason","details","isArray","unique","values","toRemove","val","SelectPostTags","FormSubmitButton","formState","header","subtitle","fontWeightRegular","CreatePostPageView","formStatus","required","useForm","successSnackbarMessage","failureSnackbarMessage","setFormState","setFormSubmitSuccess","setFormSubmitFail","setFormSubmitting","validate","errors","validator","isEmpty","isURL","require_protocol","formActions","createdPost","pathname","stringTags","RegisterPageView","registerError","email","ensureNotEmpty","isEmail","exact","formData","unknownError","CreatePostPageFormConnector","routes","loggedInAs","AccountMenu","anchorElement","onCloseMenu","Menu","keepMounted","anchorEl","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","Boolean","MenuItem","noWrap","AccountAvatar","isAccountLoading","menuAnchorElement","setMenuAnchorElement","event","currentTarget","kStyleRemoveLink","grey","noLink","AppBar","LoginButton","NavLink","Toolbar","AppScaffold","PageNotFound","AppContent","route","App","titleTemplate","defaultTitle","ReactDOM","render","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.c84f81b0.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport default axios.create({ withCredentials: true })","import axios from '../axios'\n\nconst login = (loginData: LoginData) => {\n    return axios.post('/api/auth/login', loginData)\n}\n\nexport default login","import axios from '../axios'\n\nconst logout = () => {\n    return axios.post('/api/auth/logout')\n}\n\nexport default logout","import axios from '../axios'\nimport AccountModel, { accountFromJson } from '../../store/models/AccountModel'\n\nconst status = async (): Promise<AccountModel> => {\n    const response = await axios.get('/api/auth/status')\n    return accountFromJson(response.data)\n}\n\nexport default status","import UserModel from \"./UserModel\";\n\ninterface AccountModel {\n    user?: UserModel\n    loggedIn: boolean\n}\n\nexport const accountFromJson = (json: any): AccountModel => {\n    return {\n        user: json['user'],\n        loggedIn: json['loggedIn']\n    }\n}\n\nexport default AccountModel","import axios from '../axios'\n\nconst register = (accountData: LoginData) => {\n    return axios.post('/api/auth/register', accountData)\n}\n\nexport default register","// Add createdAt in server\ninterface PostModel {\n    id: string\n    title: string\n    userId: string\n    link?: string\n    comment?: string\n    tags: string[]\n    createdAt: Date\n    updatedAt: Date\n}\n\nexport const postFromJson = (json: any): PostModel => {\n    return {\n        id: json['_id'],\n        title: json['title'],\n        userId: json['userId'],\n        link: json['link'],\n        comment: json['comment'],\n        tags: json['tags'],\n        createdAt: new Date(json['createdAt']),\n        updatedAt: new Date(json['updatedAt'])\n    }\n}\n\nexport default PostModel","import axios from \"../axios\";\nimport PostModel, { postFromJson } from \"../../store/models/PostModel\";\n\nexport interface IGetPostsOpts {\n    query?: string\n    tags?: string\n    sort?: string\n    order?: string\n}\n\nfunction buildQuery({\n    query: searchQuery,\n    tags,\n    sort,\n    order\n}: IGetPostsOpts) {\n    const reqQuery: any = {}\n    if (searchQuery) {\n        reqQuery.query = searchQuery\n    }\n\n    if (sort) {\n        reqQuery.sort = sort\n    }\n\n    if (order) {\n        reqQuery.order = order\n    }\n\n    if (tags) {\n        reqQuery.tags = tags\n    }\n\n    return Object.keys(reqQuery).map(key => `${key}=${reqQuery[key]}`).join('&')\n}\n\nexport const getPosts = async (opts: IGetPostsOpts = {}): Promise<PostModel[]> => {\n    const { data: responseData } = await axios.get(`/api/posts?${buildQuery(opts)}`)\n\n    return responseData.posts.map(postFromJson)\n}\n\nexport const getPostById = async (postId: string): Promise<PostModel | null> => {\n    const { data } = await axios.get(`/api/posts/${postId}`)\n\n    return postFromJson(data)\n}","import PostModel, { postFromJson } from \"../../store/models/PostModel\"\nimport axios from \"../axios\"\n\nexport interface ICreatePostData {\n    title: string\n    comment?: string\n    link?: string\n    tags?: string[]\n}\n\nexport const createPost = async (postData: ICreatePostData): Promise<PostModel | null> => {\n    const { data } = await axios.post(`/api/posts/`, postData)\n\n    return postFromJson(data)\n}","import axios from \"../axios\"\n\nexport const deletePost = async (postId: string) => axios.delete(`/api/posts/${postId}`)","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport AccountModel from \"../../../models/AccountModel\";\n\nconst updateAccountAsync = createAsyncThunk<AccountModel>('updateAccountAsync', auth.status)\n\nexport default updateAccountAsync","import { AxiosError } from \"axios\";\n\nexport default function simplifyAxiosError({ response }: AxiosError): SimplifiedAxiosResponse | undefined {\n    if (!response) {\n        return \n    }\n\n    return {\n        data: response.data,\n        status: response.status,\n        statusText: response.statusText\n    }\n}","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport { simplifyAxiosError } from \"../../../../utils\";\n\nconst loginAsync = createAsyncThunk<any, LoginData>('loginAsync', async (loginData, thunkApi) => {\n    try {\n        return (await auth.login(loginData)).data\n    } catch (err) {\n        console.log('Login Error: ', err)\n        console.log('Response: ', err.response)\n        return thunkApi.rejectWithValue(simplifyAxiosError(err))\n    }\n})\n\nexport default loginAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\n\nconst logoutAsync = createAsyncThunk('logoutAsync', auth.logout)\n\nexport default logoutAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport { simplifyAxiosError } from \"../../../../utils\";\n\nconst createAccountAsync = createAsyncThunk<any, RegisterData>(\n    'createAccountAsync',\n    async (accountData, thunkApi) => {\n        try {\n            return (await auth.register(accountData)).data\n        } catch (err) {\n            console.log('Register Error: ', err)\n            console.log('Response: ', err.response)\n            return thunkApi.rejectWithValue(simplifyAxiosError(err))\n        }\n    }\n)\n\nexport default createAccountAsync","import { createSlice, SliceCaseReducers } from '@reduxjs/toolkit'\nimport AccountState from './AccountState'\nimport { updateAccountAsync } from './actions'\n\nconst initialState: AccountState = { account: { loggedIn: false } }\n\nconst accountSlice = createSlice<AccountState, SliceCaseReducers<AccountState>>({\n    name: 'account-slice',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(updateAccountAsync.fulfilled, (state, action) => {\n            state.account = action.payload\n        })\n    }\n})\n\nexport const reducer = accountSlice.reducer","import { createEntityAdapter } from \"@reduxjs/toolkit\";\nimport PostModel from \"../../models/PostModel\";\n\nconst postsAdapter = createEntityAdapter<PostModel>()\n\nexport default postsAdapter","import AccountState from \"./AccountState\";\nimport { reducer } from \"./account-slice\";\nimport * as actions from './actions'\n\nexport { reducer, actions }\nexport default AccountState","import { Selector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store\";\nimport FilterState from \"./FilterState\";\n\nexport const selectFilterState: Selector<RootState, FilterState> = (state) => state.filter","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { posts } from \"../../../../api\";\nimport PostModel from \"../../../models/PostModel\";\nimport { selectFilterState } from \"../../filter-state/filter-selectors\";\nimport { RootState } from \"../../../store\";\nimport FilterState from \"../../filter-state/FilterState\";\n\nconst getAllPostsAsync = createAsyncThunk<\n    PostModel[],\n    FilterState | undefined,\n    { state: RootState }\n>('getAllPostsAsync', (filterState, { getState }) => {\n    const filter = filterState || selectFilterState(getState())\n    const { query, sort, order, tags } = filter\n\n    return posts.getPosts({\n        query,\n        sort,\n        order,\n        tags: (tags || []).map(tag => tag).join(',')\n    })\n})\n\nexport default getAllPostsAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { posts } from \"../../../../api\";\nimport PostModel from \"../../../models/PostModel\";\n\nconst createPostAsync = createAsyncThunk<PostModel | null, posts.ICreatePostData>(\n    'createPostAsync',\n    posts.createPost\n)\n\nexport default createPostAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { posts } from \"../../../../api\";\n\nconst deletePostAsync = createAsyncThunk<string, string>(\n    'deletePostAsync',\n    async (postId) => {\n        try {\n            await posts.deletePost(postId)\n            return postId\n        } catch (err) {\n            return Promise.reject(err)\n        }\n    }\n)\n\nexport default deletePostAsync","import { createSlice, SliceCaseReducers } from \"@reduxjs/toolkit\";\nimport PostsState from \"./PostsState\";\nimport postsAdapter from \"./posts-adapter\";\nimport { getAllPostsAsync, deletePostAsync } from './actions'\n\nconst postsSlice = createSlice<PostsState, SliceCaseReducers<PostsState>>({\n    name: 'posts-slice',\n    initialState: postsAdapter.getInitialState(),\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(getAllPostsAsync.fulfilled, postsAdapter.setAll)\n        builder.addCase(deletePostAsync.fulfilled, postsAdapter.removeOne)\n    }\n})\n\nexport const reducer = postsSlice.reducer","import { createSlice, SliceCaseReducers } from \"@reduxjs/toolkit\";\nimport FilterState, { initialState } from \"./FilterState\";\n\nconst filterSlice = createSlice<FilterState, SliceCaseReducers<FilterState>>({\n    name: 'post-filters',\n    initialState,\n    reducers: {\n        setFilter: (_, action) => action.payload\n    }\n})\n\nexport const { setFilter } = filterSlice.actions\nexport const { reducer, actions } = filterSlice","import { reducer } from \"./posts-slice\";\nimport PostsState from \"./PostsState\";\n\nexport { reducer }\nexport default PostsState","export type FilterSortTechnique = 'title' | 'date'\nexport type FilterSortOrder = 'asc' | 'desc'\n\ninterface FilterState {\n    query?: string\n    sort: FilterSortTechnique\n    order: FilterSortOrder\n    tags: string[]\n}\n\nexport const initialState: FilterState = {\n    sort: 'title',\n    order: 'asc',\n    tags: []\n}\n\nexport default FilterState","import { AsyncThunk } from \"@reduxjs/toolkit\";\n\nconst asyncMatchFulfilled = (asyncAction: AsyncThunk<any, any, any>, action: any) =>\n    asyncAction.fulfilled.match(action)\n\nexport default asyncMatchFulfilled","import monitorLoginMiddleware from \"./monitor-login\";\n\nexport default [monitorLoginMiddleware]","import { loginAsync, logoutAsync, updateAccountAsync, createAccountAsync } from '../actions'\nimport { asyncMatchFulfilled } from \"../../../utils\";\nimport { ThunkMiddleware } from \"../../../@types/thunk-middleware\";\n\nconst monitorLoginMiddleware: ThunkMiddleware = (api) => (next) => (action) => {\n    const hasLoggedIn = asyncMatchFulfilled(loginAsync, action)\n    const hasLoggedOut = asyncMatchFulfilled(logoutAsync, action)\n    const hasRegistered = asyncMatchFulfilled(createAccountAsync, action)\n\n    if (hasLoggedIn || hasLoggedOut || hasRegistered) {\n        api.dispatch(updateAccountAsync())\n    }\n\n    next(action)\n}\n\nexport default monitorLoginMiddleware","import onFilterChange from './monitor-posts-filter'\n\nexport default [onFilterChange]","import { Middleware, ThunkDispatch, AnyAction } from \"@reduxjs/toolkit\";\n\nimport { setFilter } from \"../../filter-state/filter-slice\";\nimport { getAllPostsAsync } from \"../actions\";\n\ntype Dispatch = ThunkDispatch<any, {}, AnyAction>\nconst onFilterChange: Middleware<{}, any, Dispatch> = ({\n    dispatch\n}) => (next) => (action) => {\n    if (setFilter.match(action)) {\n        dispatch(getAllPostsAsync(action.payload))\n    }\n\n    next(action)\n}\nexport default onFilterChange\n","import accountStateMiddlewares from './states/account-state/middlewares';\nimport postsMiddlewares from './states/posts-state/middlewares'\n\nexport default [...accountStateMiddlewares, ...postsMiddlewares]\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as formReducer } from 'redux-form'\n\nimport { reducer as accountReducer } from \"./states/account-state\";\nimport { reducer as postsReducer } from \"./states/posts-state\";\nimport { reducer as filterReducer } from \"./states/filter-state\";\nimport middlewares from './middlewares'\nimport { useDispatch } from \"react-redux\";\n\nconst store = configureStore({\n    reducer: {\n        account: accountReducer,\n        posts: postsReducer,\n        filter: filterReducer,\n        form: formReducer\n    },\n    middleware: getDefaultMiddleware({ serializableCheck: false }).concat(middlewares)\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = ReturnType<typeof store.dispatch>\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>()\nexport default store","import store from \"./store\";\n\nexport default store\nexport * from './store'","import rootTheme from './theme'\n\nexport default rootTheme","import { createMuiTheme } from '@material-ui/core/styles'\nimport { purple, deepOrange } from '@material-ui/core/colors'\n\nconst rootTheme = createMuiTheme({\n    palette: {\n        type: 'dark',\n        background: {\n            default: '#121212',\n            paper: '#0e0e0e',\n        },\n        primary: {\n            main: purple[500],\n            contrastText: '#fff'\n        },\n        secondary: {\n            main: deepOrange[500]\n        },\n        text: {\n            primary: '#fff'\n        },\n        action: {\n            focus: '#f00'\n        }\n    }\n})\n\nexport default rootTheme","import { Selector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store\";\nimport AccountState from \"./AccountState\";\nimport AccountModel from \"../../models/AccountModel\";\n\nexport const accountStateSelector: Selector<RootState, AccountState> = (state) => state.account\n\nexport const accountSelector: Selector<RootState, AccountModel> = (state) => accountStateSelector(state).account\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport AccountModel from '../store/models/AccountModel'\nimport { accountSelector } from '../store/states/account-state/account-selectors'\nimport { updateAccountAsync, loginAsync, logoutAsync, createAccountAsync } from '../store/states/account-state/actions'\nimport { useAppDispatch } from '../store'\nimport { unwrapResult } from '@reduxjs/toolkit'\n\ninterface AccountHookOpts {\n    autoFetch: boolean\n}\n\ninterface AccountFetchStatus {\n    loading: boolean\n    success: boolean\n    failure: boolean\n    uninitiated: boolean\n}\n\ninterface AccountActions {\n    login: ValueCallback<LoginData>\n    logout: VoidCallback\n    createAccount: ValueCallback<RegisterData>\n    updateAccount: VoidCallback\n}\n\ntype AccountHook = HookWithMeta<AccountModel, AccountActions, AccountFetchStatus>\n\nconst useAccount = ({ autoFetch }: AccountHookOpts = { autoFetch: false }): AccountHook => {\n    const [accountFetchStatus, setAccountStatus] = React.useState<GenericAsyncState>('uninitiated')\n    const dispatch = useAppDispatch()\n\n    React.useEffect(() => {\n        async function updateAccount() {\n            if (autoFetch) {\n                setAccountStatus('loading')\n                await dispatch(updateAccountAsync())\n                    .then(unwrapResult)\n                    .then((_: any) => setAccountStatus('success'))\n                    .catch((_: any) => setAccountStatus('fail'))\n            }\n        }\n\n        updateAccount()\n    }, [dispatch, autoFetch])\n\n    const account = useSelector(accountSelector)\n\n    return [\n        account,\n        {\n            login: (data) => dispatch(loginAsync(data)),\n            logout: () => dispatch(logoutAsync()),\n            createAccount: (data) => dispatch(createAccountAsync(data)),\n            updateAccount: () => dispatch(updateAccountAsync())\n        },\n        {\n            loading: accountFetchStatus === 'loading',\n            success: accountFetchStatus === 'success',\n            failure: accountFetchStatus === 'fail',\n            uninitiated: accountFetchStatus === 'uninitiated'\n        }\n    ]\n}\n\nexport default useAccount","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nconst useStyles = makeStyles(createStyles({\n    root: {\n        height: '100%'\n    },\n    typography: {\n        fontFamily: 'Caveat' || 'cursive',\n    }\n}))\n\nconst SplashScreen = () => {\n    const classes = useStyles()\n\n    return (\n        <>\n            <LinearProgress />\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                className={classes.root}\n            >\n                <Typography variant='h4' className={classes.typography}>\n                    Personal Archive\n            </Typography>\n            </Grid>\n        </>\n    )\n}\n\nexport default SplashScreen\n","import React from 'react'\nimport { TypographyProps, Typography } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport clsx from 'clsx'\nimport parse from 'autosuggest-highlight/parse'\n\ninterface IHighlightTypographyProps extends TypographyProps {\n    query?: string\n    text?: string\n}\n\ntype IHighlightTypography = React.FC<IHighlightTypographyProps>\n\nconst useStyles = makeStyles((theme) => createStyles({\n    highlight: {\n        backgroundColor: theme.palette.secondary.main,\n    }\n}))\n\nconst HighlightTypography: IHighlightTypography = ({ query, text, ...typographyProps }) => {\n    const classes = useStyles()\n\n    const TypographyWithProps: React.FC<TypographyProps> = (props) => {\n        const className = clsx(typographyProps.className, props.className)\n        return <Typography {...typographyProps} {...props} className={className} />\n    }\n\n    if (!query || !text) {\n        return <TypographyWithProps>{text}</TypographyWithProps>\n    }\n\n    const renderHighlighted = (text: string) => {\n        return (\n            // @ts-ignore\n            <TypographyWithProps component='span' className={classes.highlight}>\n                {text}\n            </TypographyWithProps>\n        )\n    }\n\n    const renderNormal = (text: string) => {\n        return (\n            // @ts-ignore\n            <TypographyWithProps component='span'>{text}</TypographyWithProps>\n        )\n    }\n\n    return (\n        <TypographyWithProps>\n            {\n                queryMatcher(text, query).map(({ text, highlight }) => {\n                    return highlight ? renderHighlighted(text) : renderNormal(text)\n                })\n            }\n        </TypographyWithProps>\n    )\n}\n\n// Sincere credits: https://github.com/moroshko/autosuggest-highlight/issues/5#issuecomment-392333344\nfunction queryMatcher(text?: string, query?: string) {\n    if (!(typeof text === 'string' && typeof query === 'string')) {\n        return []\n    }\n\n    const trimmedQuery = query.trim().toLowerCase()\n    const textLower = text.toLowerCase()\n    const queryLength = trimmedQuery.length\n\n    if (textLower.length === 0 && queryLength === 0) {\n        return []\n    }\n\n    const results = []\n    let indexOf = textLower.indexOf(trimmedQuery)\n    while (indexOf > -1) {\n        results.push([indexOf, indexOf + queryLength])\n        indexOf = textLower.indexOf(query, indexOf + queryLength)\n    }\n\n    return parse(text, results)\n}\n\nexport default HighlightTypography\n","import { useSelector } from \"react-redux\"\n\nimport FilterState from \"../store/states/filter-state/FilterState\"\nimport { useAppDispatch } from \"../store\"\nimport { selectFilterState } from \"../store/states/filter-state/filter-selectors\"\nimport { setFilter } from \"../store/states/filter-state/filter-slice\"\n\ninterface IUseFilterHookActions {\n    setFilter: ValueCallback<FilterState>\n}\n\ntype IUseFilterHook = Hook<FilterState, IUseFilterHookActions>\n\nconst useFilter = (): IUseFilterHook => {\n    const dispatch = useAppDispatch()\n    const filter = useSelector(selectFilterState)\n\n    return [\n        filter,\n        {\n            setFilter: (filter) => dispatch(setFilter(filter))\n        }\n    ]\n}\n\nexport default useFilter","import React from 'react'\nimport { IPostTitle } from '../typings/PostTitle'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { blue } from '@material-ui/core/colors'\nimport HighlightTypography from '../../../components/HighlightTypography'\nimport useFilter from '../../../hooks/useFilter'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        fontWeight: theme.typography.fontWeightBold,\n        color: 'inherit',\n        textDecoration: 'none',\n        transition: '0.8s color ease-out',\n        outline: 0,\n        '&:hover': {\n            textDecoration: 'none',\n            color: blue[800],\n        }\n    }\n}))\n\nconst PostTitle: IPostTitle = ({ post }) => {\n    const classes = useStyles()\n    const [{ query }] = useFilter()\n    /* <Typography\n                className={classes.root}\n                variant='h5'\n                component='a'\n                href={post.link || '#'}\n                target='_blank'\n            >\n                {post.title}\n            </Typography> */\n\n    return (\n        <HighlightTypography\n            className={classes.root}\n            variant='h5'\n            // @ts-ignore\n            component='a'\n            href={post.link || '#'}\n            target='_blank'\n\n            text={post.title}\n            query={query}\n        />\n    )\n}\n\nexport default PostTitle\n","import React from 'react'\nimport { IPostComment } from '../typings/PostComment'\n\nimport useFilter from '../../../hooks/useFilter'\nimport HighlightTypography from '../../../components/HighlightTypography'\n\nconst PostComment: IPostComment = ({ post: { comment } }) => {\n    const [{ query }] = useFilter()\n\n    return (\n        <HighlightTypography\n            paragraph\n            text={comment}\n            query={query}\n        />\n    )\n}\n\nexport default PostComment\n","import React from 'react'\nimport { IPostTags } from '../typings/PostTags'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Chip from '@material-ui/core/Chip'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        display: 'inline-flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n        // To counter the margin applied to first child on the left by '& > *' styling above\n        marginLeft: `-${theme.spacing(0.5)}px`\n    },\n\n    tag: {\n        color: theme.palette.primary.light,\n    }\n}))\n\nconst kMaxVisibleTags = 5\n\nconst PostTags: IPostTags = ({ post: { tags } }) => {\n    const classes = useStyles()\n\n    if (tags.length === 0) {\n        return null\n    }\n\n    const remainingTags = tags.length - kMaxVisibleTags\n\n    const renderSingleTag = (tag: string) => {\n        // In case you're wondering why use color='primary' when already using that in className,\n        // this is why: classes.tag only overrides the text color but the border will remain default\n        // If you don't provide color in the component itself, the text will be fine \n        // but the border will default to grey which doesn't look pretty :D\n        return (\n            <Chip\n                clickable\n                className={classes.tag}\n                size='small'\n                variant='outlined'\n                color='primary'\n                label={tag}\n                component='a'\n                href='http://localhost:7000'\n                target='_blank'\n            />\n        )\n    }\n\n    return (\n        <div className={classes.root}>\n            {tags.slice(0, Math.min(kMaxVisibleTags, tags.length)).map(renderSingleTag)}\n            {\n                remainingTags > 0 ?\n                    <Typography>\n                        + {remainingTags} tags\n                    </Typography> :\n                    null\n            }\n        </div>\n    )\n}\n\nexport default PostTags\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport DotSeparatorIcon from '@material-ui/icons/FiberManualRecord'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport dateFormat from 'date-fns/format'\n\nimport { IPostMeta } from '../typings/PostMeta'\nimport PostTags from './PostTags'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    dotSeparator: {\n        ...theme.typography.subtitle2\n    }\n}))\n\nconst PostMeta: IPostMeta = ({ post }) => {\n    const classes = useStyles()\n    const creationDate = dateFormat(post.createdAt, 'MMM dd, yyyy')\n\n    return (\n        <Grid\n            container\n            wrap='nowrap'\n            alignItems='center'\n            alignContent='center'\n            spacing={2}\n        >\n            <Grid item wrap='nowrap'>\n                <Typography color='textSecondary'>\n                    {creationDate}\n                </Typography>\n            </Grid>\n\n            {post.tags.length > 0 &&\n                <Grid item>\n                    <DotSeparatorIcon className={classes.dotSeparator} />\n                </Grid>\n            }\n\n            <Grid item>\n                <PostTags post={post} />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default PostMeta\n","import React from 'react'\n\nimport { IPostSubtitle } from '../typings/PostSubtitle'\nimport PostComment from './PostComment'\nimport PostMeta from './PostMeta'\n\nconst PostSubtitle: IPostSubtitle = ({ post }) => {\n    return (\n        <>\n            <PostComment post={post} />\n            <PostMeta post={post} />\n        </>\n    )\n}\n\nexport default PostSubtitle","import postsAdapter from \"./posts-adapter\";\nimport { RootState } from \"../../store\";\n\nconst selectors = postsAdapter.getSelectors<RootState>(state => state.posts)\n\nexport const { selectAll, selectById, selectTotal } = selectors\n","import { AsyncThunk } from \"@reduxjs/toolkit\";\n\nexport default function unwrapAxiosError(actionToMatch: AsyncThunk<any, any, any>) {\n    return (resultAction: any) => {\n        if (actionToMatch.fulfilled.match(resultAction)) {\n            return resultAction.payload\n        } else if (actionToMatch.rejected.match(resultAction)) {\n            throw resultAction.payload\n        } else {\n            return resultAction\n        }\n    }\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport PostModel from '../store/models/PostModel'\nimport { getAllPostsAsync, createPostAsync } from '../store/states/posts-state/actions'\nimport { useAppDispatch } from '../store'\nimport { selectAll as selectAllPosts } from '../store/states/posts-state/posts-selectors'\n\nimport { ICreatePostData } from '../api/posts'\nimport unwrapAxiosError from '../utils/unwrap-axios-thunk-result'\n\ninterface IUsePostsHookOpts {\n    autoFetch: boolean\n}\n\nexport interface IPostsFetchStatus {\n    loading: boolean\n    success: boolean\n    failure: boolean\n    uninitiated: boolean\n    error?: any\n}\n\ninterface IPostsActions {\n    updateAllPosts: VoidCallback\n    createPost: ValueCallback<ICreatePostData>\n}\n\ntype IUsePostsHook = HookWithMeta<PostModel[], IPostsActions, IPostsFetchStatus>\n\nconst usePosts = ({ autoFetch }: IUsePostsHookOpts = { autoFetch: false }): IUsePostsHook => {\n    const [postsStatus, setPostsStatus] = React.useState<GenericAsyncState>('uninitiated')\n    const [error, setError] = React.useState<any>()\n    const dispatch = useAppDispatch()\n\n    React.useEffect(() => {\n        async function updatePosts() {\n            if (autoFetch) {\n                setPostsStatus('loading')\n                await dispatch(getAllPostsAsync())\n                    .then(unwrapAxiosError)\n                    .then((_: any) => setPostsStatus('success'))\n                    .catch((err: any) => {\n                        setPostsStatus('fail')\n                        setError(err)\n                    })\n            }\n        }\n\n        updatePosts()\n    }, [dispatch, autoFetch])\n\n    const posts = useSelector(selectAllPosts)\n\n    return [\n        posts,\n        {\n            updateAllPosts: () => dispatch(getAllPostsAsync()),\n            createPost: (data) => dispatch(createPostAsync(data))\n        },\n        {\n            loading: postsStatus === 'loading',\n            success: postsStatus === 'success',\n            failure: postsStatus === 'fail',\n            uninitiated: postsStatus === 'uninitiated',\n            error\n        }\n    ]\n}\n\nexport default usePosts\n","import { useSelector } from 'react-redux'\n\nimport PostModel from '../store/models/PostModel'\nimport { useAppDispatch, RootState } from '../store'\nimport { selectById } from '../store/states/posts-state/posts-selectors'\n\nimport usePosts, { IPostsFetchStatus } from './usePosts'\nimport { deletePostAsync } from '../store/states/posts-state/actions'\n\ntype MaybePost = PostModel | undefined\n\ninterface IUseSinglePostHookOpts {\n    autoFetch: boolean\n}\n\ninterface IPostActions {\n    deletePost: VoidCallback<Promise<any>>\n}\n\ntype IUseSinglePostHook = HookWithMeta<MaybePost, IPostActions, IPostsFetchStatus>\n\nconst useSinglePost = (postId: string, { autoFetch }: IUseSinglePostHookOpts = { autoFetch: false }): IUseSinglePostHook => {\n    // eslint-disable-next-line\n    const [_, __, status] = usePosts({ autoFetch })\n    const post = useSelector<RootState, MaybePost>((state) => selectById(state, postId))\n    const dispatch = useAppDispatch()\n\n    return [post, {\n        deletePost: () => dispatch(deletePostAsync(postId))\n    }, status]\n}\n\nexport default useSinglePost\n","import React from 'react'\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\n\nexport interface ILoadingButtonProps extends ButtonProps {\n    loading?: boolean\n}\n\nconst useStyles = makeStyles((theme) => createStyles({\n    stateIcon: {\n        marginRight: theme.spacing(1.5),\n        verticalAlign: 'middle'\n    }\n}))\n\nconst LoadingButton: React.FC<ILoadingButtonProps> = ({\n    loading = false,\n    children,\n    ...buttonProps\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Button {...buttonProps} disabled={loading}>\n            {loading && <CircularProgress thickness={8} size={14} className={classes.stateIcon} />}\n            {children}\n        </Button>\n    )\n}\n\nexport default LoadingButton\n","import React from 'react'\n\nimport DeletePostIcon from '@material-ui/icons/Delete'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useSinglePost from '../../../hooks/useSinglePost'\nimport { IPostActions } from '../typings/PostActions'\nimport LoadingButton from '../../../components/LoadingButton'\nimport { useSnackbar } from 'notistack'\nimport { unwrapResult } from '@reduxjs/toolkit'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        marginTop: theme.spacing(1)\n    }\n}))\n\nconst PostActions: IPostActions = ({ post }) => {\n    const classes = useStyles()\n    // eslint-disable-next-line\n    const [_, { deletePost }] = useSinglePost(post.id)\n    const [dialogOpen, setDialogOpen] = React.useState(false)\n    const closeDialog = () => setDialogOpen(false)\n\n    const { enqueueSnackbar } = useSnackbar()\n    const [deletePostState, setDeletePostState] = React.useState<GenericAsyncState>('uninitiated')\n\n    const handleDeletePost = async () => {\n        setDeletePostState('loading')\n        try {\n            await deletePost().then(unwrapResult)\n            setDeletePostState('success')\n            enqueueSnackbar('Post deleted successfully', { variant: 'success' })\n            setTimeout(closeDialog, 500);\n        } catch (err) {\n            setDeletePostState('fail')\n            enqueueSnackbar('Error deleting post', { variant: 'error' })\n        }\n    }\n\n    return (\n        <>\n            <Tooltip title='Delete Post (clicking will prompt a confirmation)'>\n                <IconButton className={classes.root} onClick={() => setDialogOpen(true)}>\n                    <DeletePostIcon />\n                </IconButton>\n            </Tooltip>\n            <Dialog open={dialogOpen} onClose={closeDialog}>\n                <DialogTitle>\n                    {`Delete Post titled \"${post.title}\"?`}\n                </DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        This action cannot be undone\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={closeDialog}>\n                        Don't Delete\n                    </Button>\n                    <LoadingButton\n                        disableElevation\n                        loading={deletePostState === 'loading'}\n                        variant='contained'\n                        color='primary'\n                        onClick={handleDeletePost}\n                    >\n                        Delete Post\n                    </LoadingButton>\n                </DialogActions>\n            </Dialog>\n        </>\n    )\n}\n\nexport default PostActions\n\n","import React from 'react'\n\nimport { ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport PostTitle from './PostTitle'\nimport PostSubtitle from './PostSubtitle'\nimport PostActions from './PostActionButton'\nimport { IPostListItem } from '../typings/PostListItem'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    postActionRoot: {\n        height: '100%'\n    }\n}))\n\n\nconst PostListItem: IPostListItem = ({ post, autoFocus, className }) => {\n    const classes = useStyles()\n    const [hasHighlighted, setHasHighlighted] = React.useState(false)\n\n    React.useEffect(() => {\n        if (autoFocus && !hasHighlighted) {\n            console.log('Will highlight: ', post)\n            setTimeout(() => {\n                setHasHighlighted(true)\n            }, 3000);\n        }\n    }, [post, autoFocus, hasHighlighted, setHasHighlighted])\n\n    return (\n        // @ts-ignore\n        <ListItem\n            className={className}\n            autoFocus={autoFocus}\n            selected={autoFocus && !hasHighlighted}\n        >\n            <ListItemText\n                primary={<PostTitle post={post} />}\n                secondary={<PostSubtitle post={post} />}\n                secondaryTypographyProps={{ component: 'div' }}\n            />\n            <ListItemSecondaryAction className={classes.postActionRoot}>\n                <PostActions post={post} />\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport default PostListItem\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport FloatingActionButton from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { routeMap } from '../../../routes'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    fab: {\n        position: 'fixed',\n        right: theme.spacing(4),\n        bottom: theme.spacing(4),\n        zIndex: 999\n    }\n}))\n\nconst AddPostFab = () => {\n    const classes = useStyles()\n    const history = useHistory()\n\n    return (\n        <FloatingActionButton\n            className={classes.fab}\n            color='secondary'\n            onClick={() => history.push(routeMap.createPost.path)}\n        >\n            <AddIcon />\n        </FloatingActionButton>\n    )\n}\n\nexport default AddPostFab\n","import React from 'react'\n\nimport Skeleton, { SkeletonProps } from '@material-ui/lab/Skeleton'\nimport { IPostListSkeleton } from '../typings/PostListSkeleton'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\n\nconst WaveSkeleton: React.FC<SkeletonProps> = (props) =>\n    <Skeleton animation='wave' {...props} />\n\nconst PostListSkeleton: IPostListSkeleton = ({\n    skeletons = 10,\n    itemClassName = '',\n    subheader\n}) => {\n    const renderSkeleton = () => {\n        return (\n            <ListItem className={itemClassName}>\n                <ListItemText\n                    primary={<WaveSkeleton />}\n                    secondary={\n                        <>\n                            <WaveSkeleton variant='rect' height={64} />\n                            <WaveSkeleton />\n                        </>\n                    }\n                />\n            </ListItem>\n        )\n    }\n\n    return (\n        <List>\n            {subheader}\n            {Array(skeletons).fill(null).map(renderSkeleton)}\n        </List>\n    )\n}\n\nexport default PostListSkeleton\n","import React from 'react'\nimport clsx from 'clsx'\nimport { Link, LinkProps } from 'react-router-dom'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Typography, { TypographyProps } from '@material-ui/core/Typography'\n\nimport { blue } from '@material-ui/core/colors'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        textDecoration: 'none',\n        transition: '0.8s color ease-out',\n        outline: 0,\n        '&:hover': {\n            textDecoration: 'none',\n            color: blue[800],\n        }\n    }\n}))\n\nconst LinkTypography: React.FC<TypographyProps & LinkProps> = ({ className, to, ...props }) => {\n    const classes = useStyles()\n\n    return (\n        <Typography\n            className={clsx(className, classes.root)}\n            component={Link}\n            to={to}\n            {...props}\n        />\n    )\n}\n\nexport default LinkTypography\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { blue } from '@material-ui/core/colors'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { routeMap } from '../../../routes'\nimport LinkTypography from '../../../components/LinkTypography'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    link: {\n        ...theme.typography.subtitle1,\n        color: blue[900]\n    }\n}))\n\nconst NoPostsView = () => {\n    const classes = useStyles()\n\n    return (\n        <Grid container spacing={1} alignItems='center' justify='center'>\n            <Grid item>\n                <Typography align='center' color='textSecondary'>\n                    You don't have any posts.\n                </Typography>\n            </Grid>\n            <Grid item>\n                <LinkTypography\n                    to={routeMap.createPost.path}\n                    className={classes.link}\n                >\n                    Create Post\n                </LinkTypography>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default NoPostsView\n","import React from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { Field, WrappedFieldProps } from 'redux-form'\n\nexport type ITextFormFieldProps = TextFieldProps & {\n    name: string\n    label: string\n}\n\nconst renderField: React.FC<WrappedFieldProps & ITextFormFieldProps> = ({\n    input,\n    meta: { touched, error },\n    label,\n    ...textFieldProps\n}) => {\n    const hasError = touched && error\n\n    return (\n        <>\n            <TextField\n                fullWidth\n                label={label}\n                error={hasError}\n                {...textFieldProps}\n                {...input}\n            />\n            {hasError && <Typography color='error'>{error}</Typography>}\n        </>\n    )\n}\n\nconst TextFormField: React.FC<ITextFormFieldProps> = ({\n    name,\n    label,\n    children,\n    ...textFieldProps\n}) => {\n    return <Field\n        component={renderField}\n        name={name}\n        label={label}\n        {...textFieldProps as any}\n    />\n}\n\nexport default TextFormField\n\n","import React from 'react'\nimport { WrappedFieldProps, Field } from 'redux-form'\nimport {\n    RadioGroup,\n    Radio,\n    FormLabel,\n    FormControlLabel,\n    FormControl,\n    Grid\n} from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { IPostFilterFormView } from '../../typings/PostFilterForm-View'\nimport TextFormField from '../../../../components/form-fields/TextFormField'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        [theme.breakpoints.up('sm')]: {\n            minWidth: `${theme.breakpoints.width('sm') - 50}px`\n        },\n        '& > *': {\n            marginTop: theme.spacing(4)\n        }\n    }\n}))\n\nconst PostFilterFormView: IPostFilterFormView = ({\n    formId,\n    onFormSubmit\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Grid\n            container\n            className={classes.root}\n            id={formId}\n            onSubmit={onFormSubmit}\n            component='form'\n            direction='column'\n        >\n            <Grid item>\n                <TextFormField\n                    name='query'\n                    label='Search Query'\n                    variant='outlined'\n                    autoFocus\n                    fullWidth\n                />\n            </Grid>\n\n            <Grid item>\n                <Field\n                    component={SortTypeComponent}\n                    name='sort'\n                />\n            </Grid>\n\n            <Grid item>\n                <Field\n                    component={SortOrderComponent}\n                    name='order'\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nconst SortTypeComponent: React.FC<WrappedFieldProps> = ({ input }) => {\n    return (\n        <FormControl component='fieldset'>\n            <FormLabel component='legend'>Sort By</FormLabel>\n            <RadioGroup {...input}>\n                <FormControlLabel value='title' label='Title' control={<Radio />} />\n                <FormControlLabel value='date' label='Date' control={<Radio />} />\n            </RadioGroup>\n        </FormControl>\n    )\n}\n\nconst SortOrderComponent: React.FC<WrappedFieldProps> = ({ input }) => {\n    return (\n        <FormControl component='fieldset'>\n            <FormLabel component='legend'>Sort Order</FormLabel>\n            <RadioGroup {...input}>\n                <FormControlLabel value='asc' label='Ascending' control={<Radio />} />\n                <FormControlLabel value='desc' label='Descending' control={<Radio />} />\n            </RadioGroup>\n        </FormControl>\n    )\n}\n\nexport default PostFilterFormView\n","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\n\nimport PostFilterFormView from './PostFilterForm-View'\nimport {\n    IPostFilterFormConnector,\n    IPostFilterFormConnectorOwnProps,\n    IPostFilterFormData\n} from '../../typings/PostFilterForm-Connector'\nimport useFilter from '../../../../hooks/useFilter'\nimport { RootState } from '../../../../store'\nimport { selectFilterState } from '../../../../store/states/filter-state/filter-selectors'\n\n\nconst kFormId = 'post-filter-form'\n\nconst PostFilterFormConnector: IPostFilterFormConnector = ({ handleSubmit, afterSetFilter }) => {\n    // eslint-disable-next-line\n    const [_, { setFilter }] = useFilter()\n\n    const submitForm = (formValues: IPostFilterFormData) => {\n        setFilter({ ...formValues, tags: formValues.tags || [] })\n        afterSetFilter()\n    }\n\n    return <PostFilterFormView formId={kFormId} onFormSubmit={handleSubmit(submitForm)} />\n}\n\nconst mapStateToProps = (state: RootState) => {\n    const filter = selectFilterState(state)\n\n    return {\n        initialValues: filter\n    }\n}\n\nconst WithForm = reduxForm<IPostFilterFormData, IPostFilterFormConnectorOwnProps>({\n    form: kFormId,\n})(PostFilterFormConnector)\n\nexport default connect(mapStateToProps)(WithForm)\n\n","import PostFilterForm from \"./PostFilterForm-Connector\";\n\nexport default PostFilterForm","import PostFilterDialog from \"./PostFilterDialog\";\n\nexport default PostFilterDialog","import React from 'react'\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogProps,\n    Button,\n    useMediaQuery,\n    Theme\n} from '@material-ui/core'\n\nimport { PostFilterForm } from './components'\n\nconst PostFilterDialog: React.FC<DialogProps> = (props) => {\n    const fullScreen = useMediaQuery<Theme>((theme) => theme.breakpoints.down('sm'))\n\n    return (\n        <Dialog disableEscapeKeyDown fullScreen={fullScreen} {...props}>\n            <DialogTitle>Filter Posts</DialogTitle>\n            <DialogContent>\n                <PostFilterForm afterSetFilter={props.onClose as any} />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose as any}>\n                    Cancel\n                </Button>\n\n                <Button\n                    type='submit'\n                    form='post-filter-form'\n                    variant='contained'\n                    color='primary'\n                >\n                    Set Filter\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default PostFilterDialog","import React from 'react'\n\nimport FilterIcon from '@material-ui/icons/FilterList'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport PostFilterDialog from '../../PostFilterDialog'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        fontSize: 'inherit',\n        color: 'inherit'\n    }\n}))\n\nconst PostListFilter = () => {\n    const classes = useStyles()\n    const [dialogOpen, setDialogOpen] = React.useState(false)\n\n    return (\n        <>\n            <Button\n                className={classes.root}\n                startIcon={<FilterIcon />}\n                onClick={() => setDialogOpen(true)}\n            >\n                Filter\n            </Button>\n            <PostFilterDialog\n                open={dialogOpen}\n                onClose={() => setDialogOpen(false)}\n            />\n        </>\n    )\n}\n\nexport default PostListFilter\n","interface IPostListConstants {\n    itemThemeSpacingUnit: number\n}\n\nconst constants: IPostListConstants = { itemThemeSpacingUnit: 10 }\n\nexport default constants","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Container from '@material-ui/core/Container'\nimport List from '@material-ui/core/List'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport PostListItem from './components/PostListItem'\nimport AddPostFab from './components/AddPostFab'\nimport PostListSkeleton from './components/PostList-Skeleton'\nimport NoPostsView from './components/NoPostsView'\nimport PostListFilter from './components/PostListFilter'\n\nimport PostModel from '../../store/models/PostModel'\nimport { IPostListView } from './typings/PostList-View'\nimport constants from './constants'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        margin: `${theme.spacing(4)}px auto`\n    },\n    listSubheader: {\n        marginBottom: `-${theme.spacing(constants.itemThemeSpacingUnit / 1.5)}px`,\n        display: 'flex',\n        alignItems: 'baseline'\n    },\n    subheaderMainTitle: {\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        flexGrow: 1\n    },\n    item: {\n        margin: `${theme.spacing(constants.itemThemeSpacingUnit)}px auto`\n    },\n}))\n\nconst PostListView: IPostListView = ({\n    posts,\n    highlightPost,\n    isLoading,\n    searchQuery\n}) => {\n    const classes = useStyles()\n\n    const subheader = (\n        <ListSubheader disableSticky className={classes.listSubheader}>\n            <Typography className={classes.subheaderMainTitle}>\n                POSTS\n            </Typography>\n            <PostListFilter />\n        </ListSubheader>\n    )\n\n    const renderPosts = () => {\n        if (posts.length === 0 && typeof searchQuery === 'undefined') {\n            return <NoPostsView />\n        }\n\n        const noMatchingPosts = (\n            <ListItem className={classes.item}>\n                <ListItemText primaryTypographyProps={{ align: 'center' }}>\n                    No posts matching the query '{searchQuery}'\n                            </ListItemText>\n            </ListItem>\n        )\n\n        const postListBody = posts.map((post: PostModel) =>\n            <PostListItem\n                className={classes.item}\n                post={post}\n                key={post.id}\n                autoFocus={post.id === highlightPost}\n            />\n        )\n\n        return (\n            <List>\n                {subheader}\n                {\n                    searchQuery && posts.length === 0 ?\n                        noMatchingPosts :\n                        postListBody\n                }\n            </List>\n        )\n    }\n\n    return (\n        <>\n            <Helmet>\n                <title>Posts</title>\n            </Helmet>\n            <AddPostFab />\n            <Container maxWidth='md' className={classes.root}>\n                {\n                    isLoading ?\n                        <PostListSkeleton\n                            itemClassName={classes.item}\n                            subheader={subheader}\n                        /> :\n                        renderPosts()\n                }\n            </Container>\n        </>\n    )\n}\n\nexport default PostListView\n","import PostList from \"./PostList-Connector\";\n\nexport default PostList","import React from 'react'\nimport PostListView from './PostList-View'\nimport usePosts from '../../hooks/usePosts'\nimport useFilter from '../../hooks/useFilter'\n\nconst PostListConnector: React.FC<{ highlightPost?: string }> = ({ highlightPost }) => {\n    const [posts, { updateAllPosts }, { loading, error }] = usePosts({ autoFetch: true })\n    const [{ query }] = useFilter()\n\n    return (\n        <PostListView posts={posts}\n            onUpdatePosts={updateAllPosts}\n            highlightPost={highlightPost}\n            isLoading={loading}\n            error={error}\n            searchQuery={query}\n        />\n    )\n}\n\nexport default PostListConnector\n","import React from 'react'\nimport { Redirect, useLocation } from 'react-router-dom'\n\nimport useAccount from '../../hooks/useAccount'\nimport PostList from '../../features/PostList'\nimport { routeMap } from '../routes'\n\ninterface IHomePageHistoryState {\n    highlightPost?: string\n}\n\nconst HomePage = () => {\n    const [{ loggedIn }] = useAccount()\n    const { state } = useLocation<IHomePageHistoryState>()\n\n    const highlightPost = state ? state.highlightPost : undefined\n\n    if (loggedIn) {\n        return <PostList highlightPost={highlightPost} />\n    }\n\n    return <Redirect to={routeMap.login.path} />\n}\n\nexport default HomePage\n","import React from 'react'\nimport { InputAdornment, IconButton } from '@material-ui/core'\nimport VisibilityOn from '@material-ui/icons/Visibility'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\n\nimport TextFormField from './TextFormField'\n\ninterface IPasswordFieldProps {\n    name: string\n    label: string\n}\n\nconst PasswordField: React.FC<IPasswordFieldProps> = ({\n    name,\n    label\n}) => {\n    const [showPassword, setShowPassword] = React.useState(false)\n\n    const togglePasswordVisibility = () => setShowPassword(!showPassword)\n\n    return (\n        <TextFormField\n            type={showPassword ? 'text' : 'password'}\n            label={label}\n            name={name}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position='end'>\n                        <IconButton\n                            onClick={togglePasswordVisibility}\n                        >\n                            {\n                                showPassword ?\n                                    <VisibilityOn /> :\n                                    <VisibilityOff />\n                            }\n                        </IconButton>\n                    </InputAdornment>\n                )\n            }}\n        />\n    )\n}\n\nexport default PasswordField\n","import React from 'react'\nimport { Redirect, Link } from 'react-router-dom'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { ILoginPageView } from './typings/LoginPage-View'\nimport TextFormField from '../../../components/form-fields/TextFormField'\nimport PasswordField from '../../../components/form-fields/PasswordField'\nimport LoadingButton from '../../../components/LoadingButton'\nimport { red } from '@material-ui/core/colors'\nimport { routeMap } from '../..'\nimport { Divider } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        //height: '100%',\n        padding: theme.spacing(8)\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    error: {\n        fontSize: '0.8rem',\n        color: red[900],\n        marginBottom: theme.spacing(1)\n    }\n}))\n\nconst LoginPageView: ILoginPageView = ({\n    loggedIn,\n    isLoggingIn,\n    formId,\n    onFormSubmit,\n    loginError,\n    loginResult\n}) => {\n    const classes = useStyles()\n\n    if (loginResult === 'success' || loggedIn) {\n        return <Redirect to={routeMap.home.path} />\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                spacing={6}\n                className={classes.fullHeight}\n            >\n                <Grid item>\n                    <Typography variant='h4'>\n                        Login\n                    </Typography>\n                </Grid>\n\n                <Grid item>\n                    {loginError &&\n                        <Typography className={classes.error}>\n                            *{loginError}\n                        </Typography>\n                    }\n                    <form id={formId} onSubmit={onFormSubmit}>\n                        <Grid\n                            item\n                            container\n                            justify='center'\n                            alignContent='space-around'\n                            direction='column'\n                            spacing={4}\n                            className={classes.fullHeight}\n                        >\n                            <Grid item>\n                                <TextFormField name='username' label='Username' autoFocus />\n                            </Grid>\n                            <Grid item>\n                                <PasswordField name='password' label='Password' />\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n\n                <Grid item container justify='center'>\n                    <Grid item>\n                        <LoadingButton\n                            loading={isLoggingIn}\n                            variant='contained'\n                            color='primary'\n                            type='submit'\n                            form={formId}\n                        >\n                            Login\n                        </LoadingButton>\n                    </Grid>\n                </Grid>\n\n                <Grid item>\n                    <Divider variant='fullWidth' />\n                    <Button component={Link} to={routeMap.register.path}>\n                        Create account instead\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default LoginPageView","import React from 'react'\nimport { useSnackbar } from 'notistack'\n\nimport LoginPageView from './LoginPage-View'\nimport { ILoginPageContainer } from './typings/LoginPage-Container'\n\nconst LoginPageContainer: ILoginPageContainer = ({\n    loginResult,\n    ...otherProps\n}) => {\n    const { enqueueSnackbar } = useSnackbar()\n    // If login fails, error snackbar is shown and then marked shown\n    // Next time the snackbar is not shown since it was marked shown\n    // Make sure to reset the flag on snackbar close/UI state changed (text field change, etc)\n    const [snackbarShown, setSnackbarShown] = React.useState(false)\n    if (loginResult && !snackbarShown) {\n        const onEnter = () => setSnackbarShown(true)\n\n        if (loginResult === 'success') {\n            enqueueSnackbar(\n                'Login Successful. You will be redirected shortly',\n                { variant: 'success', onEnter }\n            )\n        } else {\n            enqueueSnackbar('Login Failed', { variant: 'error', onEnter })\n        }\n    }\n\n    return <LoginPageView loginResult={loginResult} {...otherProps} />\n}\n\nexport default LoginPageContainer","import LoginPage from \"./LoginPage-FormConnector\";\n\nexport default LoginPage","import React from 'react'\nimport { reduxForm } from 'redux-form'\n\nimport useAccount from '../../../hooks/useAccount'\nimport { loginAsync } from '../../../store/states/account-state/actions'\nimport unwrapAxiosThunkResult from '../../../utils/unwrap-axios-thunk-result'\n\nimport { ILoginPageFormConnector, ILoginPageFormConnectorOwnProps } from './typings/LoginPage-FormConnector'\nimport { ILoginResult } from './typings/LoginPage-View'\nimport LoginPageContainer from './LoginPage-Container'\n\nconst kFormId = 'login-form'\n\nconst LoginPageFormConnector: ILoginPageFormConnector = ({ handleSubmit }) => {\n    // eslint-disable-next-line\n    const [{ loggedIn }, { login }] = useAccount()\n    const [isLoggingIn, setLoggingIn] = React.useState(false)\n    const [loginError, setLoginError] = React.useState<string | undefined>(undefined)\n    const [loginResult, setLoginResult] = React.useState<ILoginResult>()\n\n    const performLogin = async (loginData: LoginData) => {\n        console.log('Perform Login: ', loginData)\n        setLoggingIn(true)\n\n        await login(loginData)\n            .then(unwrapAxiosThunkResult(loginAsync))\n            .then((_: any) => {\n                setLoginResult('success')\n            })\n            .catch((errResponse: SimplifiedAxiosResponse) => {\n                if (errResponse.status === 401) {\n                    setLoginError(errResponse.data.message)\n                } else {\n                    setLoginError('An unknown error occurred. Please try again later')\n                }\n\n                setLoginResult('failure')\n            })\n\n        setLoggingIn(false)\n    }\n\n    return (\n        <LoginPageContainer\n            loggedIn={loggedIn}\n            loginResult={loginResult}\n            loginError={loginError}\n            isLoggingIn={isLoggingIn}\n            formId={kFormId}\n            onFormSubmit={handleSubmit(performLogin)}\n        />\n    )\n}\n\nexport default reduxForm<LoginData, ILoginPageFormConnectorOwnProps>({\n    form: kFormId,\n    initialValues: {\n        username: 'John Doe',\n        password: 'password'\n    }\n})(LoginPageFormConnector)\n","import React from 'react'\nimport TextFormField, { ITextFormFieldProps } from './TextFormField'\n\nconst OutlinedTextFormField: React.FC<ITextFormFieldProps> = (props) => {\n    return <TextFormField {...props} variant='outlined' />\n}\n\nexport default OutlinedTextFormField\n","import React from 'react'\nimport { Field, WrappedFieldProps } from 'redux-form'\n\nimport TextField from '@material-ui/core/TextField'\nimport Chip from '@material-ui/core/Chip'\nimport AutoComplete, { AutocompleteRenderInputParams } from '@material-ui/lab/Autocomplete'\n\nimport { IPostTag } from '../typings/CreatePostFormData'\n\nconst renderSelect = ({ input: { value: currentValue, onChange } }: WrappedFieldProps) => {\n    return (\n        <AutoComplete<IPostTag, true>\n            id=\"tags-outlined\"\n            multiple\n            selectOnFocus\n            clearOnBlur\n            options={[]}\n            filterOptions={(_, { inputValue }) => {\n                const filtered: IPostTag[] = []\n                if (inputValue !== '') {\n                    filtered.push({\n                        value: inputValue.trim(),\n                        label: `Create tag \"${inputValue}\"`\n                    })\n                }\n\n                return filtered\n            }}\n            getOptionLabel={(option) => option.label}\n            renderInput={(params: AutocompleteRenderInputParams) => (\n                <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    label=\"Create Tags\"\n                    placeholder=\"Tags\"\n                />\n            )}\n            renderTags={(value, getTagProps) => value.map((tag, index) => {\n                return (\n                    <Chip\n                        label={tag.value}\n                        {...getTagProps({ index })}\n                    />\n                )\n            })}\n            onChange={(_, newValue, reason, details) => {\n                if (!Array.isArray(newValue)) {\n                    return null\n                }\n\n                if (reason === 'create-option' || reason === 'select-option') {\n                    // Only unique tags allowed\n                    const unique: { [k: string]: IPostTag } = {}\n                    for (let tag of newValue) {\n                        unique[tag.value] = tag\n                    }\n\n                    onChange(Object.values(unique))\n                }\n\n                if (reason === 'remove-option' && details) {\n                    const toRemove = details.option\n                    const filtered = currentValue.filter((val: IPostTag) => {\n                        return val.value !== toRemove.value\n                    })\n\n                    onChange(filtered)\n                }\n            }}\n            value={currentValue || []}\n        />\n    )\n}\n\nconst SelectPostTags = () => {\n    return (\n        <Field\n            name='tags'\n            component={renderSelect}\n        />\n    )\n}\n\nexport default SelectPostTags\n","import React from 'react'\nimport LoadingButton from './LoadingButton'\nimport { IFormStatus } from '../hooks/useForm'\nimport { ButtonProps } from '@material-ui/core'\n\ninterface IFormSubmitButtonProps {\n    formState: IFormStatus\n    formId: string\n}\n\nconst FormSubmitButton: React.FC<IFormSubmitButtonProps & ButtonProps> = ({\n    children,\n    formState,\n    formId,\n    ...buttonProps\n}) => {\n    return (\n        <LoadingButton\n            form={formId}\n            type='submit'\n            loading={formState === 'submitting'}\n            {...buttonProps}\n        >\n            {children}\n        </LoadingButton>\n    )\n}\n\nexport default FormSubmitButton","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\nimport Typography from '@material-ui/core/Typography'\n\nimport OutlinedTextFormField from '../../../components/form-fields/OutlinedTextFormField'\nimport { SelectPostTags } from './components'\n\nimport { ICreatePostView } from './typings/CreatePostPage-View'\nimport FormSubmitButton from '../../../components/FormSubmitButton'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        margin: `${theme.spacing(8)}px auto`\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    header: {\n        marginBottom: theme.spacing(4)\n    },\n    subtitle: {\n        ...theme.typography.subtitle2,\n        color: theme.palette.text.secondary,\n        fontWeight: theme.typography.fontWeightRegular\n    }\n}))\n\nconst CreatePostPageView: ICreatePostView = ({\n    onFormSubmit,\n    formId,\n    status: formStatus\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Container maxWidth='sm' className={classes.root}>\n            <Helmet>\n                <title>Create Post</title>\n            </Helmet>\n            <Grid\n                container\n                wrap='wrap'\n                direction='column'\n                justify='center'\n                spacing={4}\n                className={classes.fullHeight}\n                component='form'\n                id={formId}\n                onSubmit={onFormSubmit}\n            >\n                <Grid item container direction='column' className={classes.header}>\n                    <Grid item>\n                        <Typography variant='h4'>\n                            Create Post\n                        </Typography>\n                    </Grid>\n                    <Grid item>\n                        <Typography className={classes.subtitle}>\n                            Required items are marked with *\n                        </Typography>\n                    </Grid>\n                </Grid>\n\n                <Grid item>\n                    <OutlinedTextFormField name='title' label='Title' autoFocus required />\n                </Grid>\n                <Grid item>\n                    <OutlinedTextFormField name='link' label='Link' />\n                </Grid>\n                <Grid item>\n                    <OutlinedTextFormField name='comment' label='Comment' />\n                </Grid>\n                <Grid item>\n                    <SelectPostTags />\n                </Grid>\n                <Grid item>\n                    <FormSubmitButton\n                        formId={formId}\n                        formState={formStatus}\n                        color='primary'\n                        variant='contained'\n                    >\n                        Create Post\n                    </FormSubmitButton>\n                </Grid>\n            </Grid>\n        </Container>\n    )\n}\n\nexport default CreatePostPageView\n","import { useState, useEffect } from \"react\"\nimport { useSnackbar } from \"notistack\"\n\ninterface IUseFormHookActions<Meta, Error> {\n    setFormSubmitting: VoidCallback\n    setFormSubmitFail: ValueCallback<Error>\n    setFormSubmitSuccess: ValueCallback<Meta>\n}\n\nexport interface IFormState<Meta = any, Error = any> {\n    status: IFormStatus\n    meta?: Meta\n    error?: Error\n}\n\nexport type IFormStatus = 'initial' | 'submitting' | 'submit-fail' | 'submit-success'\ntype IUseFormHook<M, E> = Hook<IFormState<M, E>, IUseFormHookActions<M, E>>\n\ninterface IUseFormHookOpts {\n    successSnackbarMessage: string\n    failureSnackbarMessage: string\n}\n\nconst useForm = <Meta = void, Error = void>({ successSnackbarMessage, failureSnackbarMessage }: IUseFormHookOpts): IUseFormHook<Meta, Error> => {\n    const [formState, setFormState] = useState<IFormState>({ status: 'initial' })\n    const [snackbarShown, setSnackbarShown] = useState(false)\n    const { enqueueSnackbar } = useSnackbar()\n\n    useEffect(() => {\n        if (snackbarShown) {\n            return\n        }\n\n        if (formState.status === 'submit-success') {\n            enqueueSnackbar(successSnackbarMessage, { variant: 'success' })\n            setSnackbarShown(true)\n        }\n\n        if (formState.status === 'submit-fail') {\n            enqueueSnackbar(failureSnackbarMessage, { variant: 'error' })\n            setSnackbarShown(true)\n        }\n    }, [snackbarShown, formState, setFormState, enqueueSnackbar, successSnackbarMessage, failureSnackbarMessage])\n\n    return [\n        formState,\n        {\n            setFormSubmitSuccess: (meta: Meta) => setFormState({ status: 'submit-success', meta }),\n            setFormSubmitFail: (error: Error) => setFormState({ status: 'submit-fail', error }),\n            setFormSubmitting: () => setFormState({ status: 'submitting' })\n        }\n    ]\n}\n\nexport default useForm","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { Redirect } from 'react-router-dom'\n\nimport {\n    ICreatePostFormConnector,\n    ICreatePostFormData,\n    ICreatePostFormConnectorOwnProps\n} from './typings'\nimport CreatePostPageView from './CreatePostPage-View'\nimport createPostFormValidator from './validator'\n\nimport usePosts from '../../../hooks/usePosts'\nimport { routeMap } from '../../routes'\nimport unwrapAxiosError from '../../../utils/unwrap-axios-thunk-result'\nimport PostModel from '../../../store/models/PostModel'\nimport { createPostAsync } from '../../../store/states/posts-state/actions'\nimport useForm from '../../../hooks/useForm'\n\nconst kFormId = 'create-post-form'\nconst kInitialValues: ICreatePostFormData = {\n    title: 'New Post'\n}\n\nconst CreatePostPageFormConnector: ICreatePostFormConnector = ({ handleSubmit, error }) => {\n    // eslint-disable-next-line\n    const [_, { createPost }] = usePosts()\n    const [formState, formActions] = useForm<PostModel,any>({\n        successSnackbarMessage: 'Your post was created successfully',\n        failureSnackbarMessage: 'Error creating post'\n    })\n\n    const submitForm = ({ tags, ...formValues }: ICreatePostFormData) => {\n        let stringTags: string[] | undefined\n        if (tags) {\n            stringTags = tags.map(tag => tag.value)\n        }\n\n        formActions.setFormSubmitting()\n        createPost({ ...formValues, tags: stringTags })\n            .then(unwrapAxiosError(createPostAsync))\n            // @ts-ignore\n            .then((createdPost: PostModel) => {\n                formActions.setFormSubmitSuccess(createdPost)\n            })\n            .catch((error: any) => {\n                formActions.setFormSubmitFail(error)\n            })\n    }\n\n    if (formState.status === 'submit-success') {\n        const createdPost = formState.meta\n        return <Redirect to={{\n            pathname: routeMap.home.path,\n            state: { highlightPost: createdPost && createdPost.id }\n        }} />\n    }\n\n    return (\n        <CreatePostPageView\n            formId={kFormId}\n            onFormSubmit={handleSubmit(submitForm)}\n            {...formState}\n        />\n    )\n}\n\nexport default reduxForm<ICreatePostFormData, ICreatePostFormConnectorOwnProps>({\n    form: kFormId,\n    initialValues: kInitialValues,\n    validate: createPostFormValidator\n})(CreatePostPageFormConnector)\n","import { ICreatePostFormData } from \"./typings\";\n\nimport validator from 'validator'\n\ntype ErrorMap = { [k in keyof ICreatePostFormData]: string }\n\nexport default function createPostFormValidator(values: ICreatePostFormData): ErrorMap {\n    const errors = {} as ErrorMap\n    if (typeof values.title === 'string' && validator.isEmpty(values.title)) {\n        errors.title = 'Title is required'\n    }\n\n    if (values.link && !validator.isEmpty(values.link.trim())) {\n        if (!validator.isURL(values.link, { require_protocol: true })) {\n            errors.link = 'If provided, must be an url'\n        }\n    }\n    \n    return errors\n}","import React from 'react'\nimport { Redirect, Link } from 'react-router-dom'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { red } from '@material-ui/core/colors'\n\nimport TextFormField from '../../../components/form-fields/TextFormField'\nimport PasswordField from '../../../components/form-fields/PasswordField'\nimport { routeMap } from '../../'\nimport { IRegisterPageView } from './typings'\nimport FormSubmitButton from '../../../components/FormSubmitButton'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        //height: '100%',\n        padding: theme.spacing(8)\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    error: {\n        fontSize: '0.8rem',\n        color: red[900],\n        marginBottom: theme.spacing(1)\n    }\n}))\n\nconst RegisterPageView: IRegisterPageView = ({\n    loggedIn,\n    formId,\n    onFormSubmit,\n    status,\n    error: registerError\n}) => {\n    const classes = useStyles()\n\n    if (status === 'submit-success' || loggedIn) {\n        return <Redirect to={routeMap.home.path} />\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                spacing={6}\n                className={classes.fullHeight}\n            >\n                <Grid item>\n                    <Typography variant='h4'>\n                        Create Account\n                    </Typography>\n                </Grid>\n\n                <Grid item>\n                    {registerError &&\n                        <Typography className={classes.error}>\n                            *{registerError}\n                        </Typography>\n                    }\n                    <form id={formId} onSubmit={onFormSubmit}>\n                        <Grid\n                            item\n                            container\n                            justify='center'\n                            alignContent='space-around'\n                            direction='column'\n                            spacing={4}\n                            className={classes.fullHeight}\n                        >\n                            <Grid item>\n                                <TextFormField name='email' label='Email' type='email' autoFocus />\n                            </Grid>\n                            <Grid item>\n                                <TextFormField name='username' label='Username' />\n                            </Grid>\n                            <Grid item>\n                                <PasswordField name='password' label='Password' />\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n\n                <Grid item container justify='center'>\n                    <FormSubmitButton\n                        formState={status}\n                        formId={formId}\n                        variant='contained'\n                        color='primary'\n                    >\n                        Register\n                    </FormSubmitButton>\n                </Grid>\n\n                <Grid item>\n                    <Divider />\n                    <Button component={Link} to={routeMap.login.path}>\n                        Login instead\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default RegisterPageView\n","import validator from \"validator\"\n\nconst validate = ({ username, email, password }: Partial<RegisterData>) => {\n    const errors: { [P in keyof Partial<RegisterData>]: string } = {}\n\n    const ensureNotEmpty = (name: keyof RegisterData, value?: string) => {\n        if (!value || validator.isEmpty(value)) {\n            errors[name] = `${name} cannot be empty`\n        }\n    }\n\n    ensureNotEmpty('username', username)\n    ensureNotEmpty('password', password)\n    ensureNotEmpty('email', email)\n\n    if (email && !errors.email && !validator.isEmail(email)) {\n        errors.email = 'must be a valid email'\n    }\n\n    return errors\n}\n\nexport default validate","import HomePage from \"./pages/HomePage\"\nimport LoginPage from \"./pages/LoginPage\"\nimport CreatePostPageFormConnector from \"./pages/CreatePostPage/CreatePostPage-FormConnector\"\nimport RegisterPage from \"./pages/RegisterPage\"\n\ninterface IRouteMap {\n    home: IRoute\n    login: IRoute\n    register: IRoute\n    createPost: IRoute\n}\n\ninterface IRoute {\n    path: string\n    component: React.ComponentType\n    exact: boolean\n}\n\nexport const routeMap: IRouteMap = {\n    home: {\n        path: '/',\n        component: HomePage,\n        exact: true\n    },\n    login: {\n        path: '/login',\n        component: LoginPage,\n        exact: true\n    },\n    register: {\n        path: '/register',\n        component: RegisterPage,\n        exact: true\n    },\n    createPost: {\n        path: '/new-post',\n        component: CreatePostPageFormConnector,\n        exact: true\n    }\n}\n\nexport default Object.values<IRoute>(routeMap as any)","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { AxiosResponse } from 'axios'\n\nimport useForm from '../../../hooks/useForm'\nimport RegisterPageView from './RegisterPage-View'\nimport useAccount from '../../../hooks/useAccount'\nimport { IRegisterPageConnector, IRegisterPageConnectorOwnProps } from './typings/RegisterPage-Connector'\nimport unwrapAxiosError from '../../../utils/unwrap-axios-thunk-result'\nimport { createAccountAsync } from '../../../store/states/account-state/actions'\nimport validate from './validator'\n\nconst kFormId = 'user-register-form'\n\nconst RegisterPageConnector: IRegisterPageConnector = ({ handleSubmit }) => {\n    const [formState, actions] = useForm<void, any>({\n        successSnackbarMessage: 'User registration completed',\n        failureSnackbarMessage: 'Error registering user. Try again'\n    })\n    const [{ loggedIn }, { createAccount }] = useAccount({ autoFetch: true })\n\n    const submitForm = (formData: RegisterData) => {\n        actions.setFormSubmitting()\n\n        createAccount(formData)\n            .then(unwrapAxiosError(createAccountAsync))\n            .then(actions.setFormSubmitSuccess)\n            .catch(({ status, data }: AxiosResponse) => {\n                const unknownError = 'An unknown error occurred while trying to create the account'\n                if (status === 401) {\n                    actions.setFormSubmitFail(data ? data.message : unknownError)\n                } else {\n                    actions.setFormSubmitFail(unknownError)\n                }\n            })\n    }\n\n    return (\n        <RegisterPageView\n            loggedIn={loggedIn}\n            formId={kFormId}\n            onFormSubmit={handleSubmit(submitForm)}\n            {...formState}\n        />\n    )\n}\n\nexport default reduxForm<RegisterData, IRegisterPageConnectorOwnProps>({\n    form: kFormId,\n    validate\n})(RegisterPageConnector)\n","import routes, { routeMap } from './routes'\n\nexport { routeMap }\nexport default routes","import React from 'react';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useAccount from '../../../hooks/useAccount';\n\ninterface IAccountMenuProps {\n    anchorElement: null | HTMLElement\n    onCloseMenu: React.MouseEventHandler\n}\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    loggedInAs: {\n        marginRight: theme.spacing(1)\n    },\n    username: {\n        fontWeight: theme.typography.fontWeightBold\n    }\n}))\n\nconst AccountMenu: React.FC<IAccountMenuProps> = ({ anchorElement, onCloseMenu }) => {\n    const classes = useStyles()\n    const [{ user, loggedIn }, { logout }] = useAccount()\n\n    if (!loggedIn) {\n        return null\n    }\n\n    const username = user && user.username\n\n    return (\n        <Menu\n            keepMounted\n            id=\"account-menu\"\n            anchorEl={anchorElement}\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={Boolean(anchorElement)}\n            onClose={onCloseMenu}\n        >\n            <MenuItem>\n                <Typography className={classes.loggedInAs}>Logged in as:</Typography>\n                <Typography className={classes.username} noWrap>\n                    {username ? username : '-'}\n                </Typography>\n            </MenuItem>\n            <Divider />\n            <MenuItem onClick={logout as any}>Logout</MenuItem>\n        </Menu>\n    );\n}\n\n\nexport default AccountMenu\n","import React from 'react'\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport useAccount from '../../../hooks/useAccount'\nimport AccountMenu from './AccountMenu';\n\nconst AccountAvatar = () => {\n    // eslint-disable-next-line\n    const [account, _, { loading: isAccountLoading }] = useAccount()\n    const [menuAnchorElement, setMenuAnchorElement] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        console.log('click')\n        setMenuAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        console.log('close')\n        setMenuAnchorElement(null);\n    };\n\n    if (isAccountLoading || !account.loggedIn) {\n        return null\n    }\n\n    return (\n        <>\n            <IconButton onClick={handleClick}>\n                <AccountIcon fontSize='large' />\n            </IconButton>\n            <AccountMenu\n                anchorElement={menuAnchorElement}\n                onCloseMenu={handleClose}\n            />\n        </>\n    )\n}\n\nexport default AccountAvatar\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\n\nimport MaterialAppBar from '@material-ui/core/AppBar'\nimport { Toolbar, Typography, Button } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { grey } from '@material-ui/core/colors';\n\nimport useAccount from '../../hooks/useAccount'\nimport { routeMap } from '../../routes';\nimport { AccountAvatar } from './components'\n\nconst kStyleRemoveLink = {\n    color: 'inherit',\n    textDecoration: 'none',\n    \"&:hover\": {\n        color: 'inherit',\n        textDecoration: 'none'\n    },\n    outline: 0\n}\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        flexGrow: 1\n    },\n    title: {\n        flexGrow: 1,\n        ...kStyleRemoveLink,\n        '&:hover': {\n            ...kStyleRemoveLink[\"&:hover\"],\n            color: grey[400]\n        },\n        transition: 'color 0.5s ease-in'\n    },\n    noLink: kStyleRemoveLink\n}))\n\nconst AppBar = () => {\n    const classes = useStyles()\n    // eslint-disable-next-line\n    const [account, _, { loading: isAccountLoading }] = useAccount()\n\n    const LoginButton = () => {\n        if (account.loggedIn || isAccountLoading) {\n            return null\n        }\n\n        return (\n            <Button color='inherit' component={NavLink} to={routeMap.login.path}>\n                Login\n            </Button>\n        )\n    }\n\n    return (\n        <MaterialAppBar className={classes.root}>\n            <Toolbar>\n                <Typography\n                    variant='h6'\n                    className={classes.title}\n                    component={NavLink}\n                    to={routeMap.home.path}\n                >\n                    Personal Archive\n                </Typography>\n                <LoginButton />\n                <AccountAvatar />\n            </Toolbar>\n        </MaterialAppBar>\n    )\n}\n\nexport default AppBar\n","import React from 'react'\n\nimport AppBar from '../AppBar/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\n\nconst AppScaffold: React.FC = ({ children }) => {\n    return (\n        <>\n            <AppBar />\n            <Toolbar />\n            {children}\n        </>\n    )\n}\n\nexport default AppScaffold\n","import React from 'react'\nimport { Typography, Grid } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { routeMap } from '../routes'\nimport LinkTypography from '../../components/LinkTypography'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        height: '100%',\n        padding: theme.spacing(8)\n    },\n}))\n\nconst PageNotFound = () => {\n    const classes = useStyles()\n    return (\n        <Grid\n            container\n            direction='column'\n            justify='center'\n            className={classes.root}\n        >\n            <Typography variant='h1'>Error</Typography>\n            <Typography paragraph>We could not find the page you were looking for</Typography>\n            <LinkTypography to={routeMap.home.path}>Go back home</LinkTypography>\n        </Grid>\n    )\n}\n\nexport default PageNotFound\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport useAccount from '../hooks/useAccount'\nimport SplashScreen from '../features/SplashScreen/SplashScreen'\nimport routes from '../routes'\nimport AppScaffold from '../features/AppScaffold/AppScaffold'\nimport PageNotFound from '../routes/pages/PageNotFound'\n\nconst AppContent = () => {\n    const { loading } = useAccount({ autoFetch: true })[2]\n\n    if (loading) {\n        return <SplashScreen />\n    }\n\n    return (\n        <BrowserRouter>\n            <AppScaffold>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.path} />)}\n                    <Route path='*' component={PageNotFound} />\n                </Switch>\n            </AppScaffold>\n        </BrowserRouter>\n    )\n}\n\nconst App = () => {\n    return (\n        <>\n            <Helmet\n                titleTemplate='%s | Personal Archive'\n                defaultTitle='Personal Archive'\n            />\n            <AppContent />\n        </>\n    )\n}\n\nexport default App","import App from \"./App\";\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport { Provider as StoreProvider } from 'react-redux'\nimport store from './store'\n\nimport rootTheme from './theme'\nimport { ThemeProvider } from '@material-ui/core/styles'\n\nimport { SnackbarProvider } from 'notistack'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './app'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <ThemeProvider theme={rootTheme}>\n            <SnackbarProvider>\n                <CssBaseline />\n                <App />\n            </SnackbarProvider>\n        </ThemeProvider>\n    </StoreProvider>,\n    document.getElementById('root')\n)"],"sourceRoot":""}