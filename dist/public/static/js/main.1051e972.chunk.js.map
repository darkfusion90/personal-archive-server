{"version":3,"sources":["components/SelectPostTags.tsx","components/FormSubmitButton.tsx","api/posts/posts-get.ts","api/posts/posts-create.ts","api/posts/posts-delete.ts","api/posts/posts-edit.ts","features/PostForm/validator.ts","features/PostForm/typings/index.ts","components/form-fields/OutlinedTextFormField.tsx","features/PostForm/PostForm-View.tsx","api/axios.ts","api/auth/login-api.ts","api/auth/logout-api.ts","api/auth/status-api.ts","store/models/AccountModel.ts","api/auth/register-api.ts","store/states/account-state/actions/update-account-action.ts","utils/simplify-axios-error.ts","store/states/account-state/actions/login-action.ts","store/states/account-state/actions/logout-action.ts","store/states/account-state/actions/create-account-action.ts","store/states/account-state/account-slice.ts","store/states/posts-state/posts-adapter.ts","store/states/account-state/index.ts","store/states/filter-state/filter-selectors.ts","store/states/posts-state/actions/get-all-posts.ts","store/states/posts-state/actions/create-post.ts","store/states/posts-state/actions/delete-post.ts","store/states/posts-state/actions/edit-post.ts","store/states/posts-state/posts-slice.ts","store/states/filter-state/filter-slice.ts","store/states/posts-state/index.ts","store/states/filter-state/FilterState.ts","theme/theme.ts","theme/persist-theme.ts","theme/index.ts","store/states/theme-state/theme-slice.ts","store/states/theme-state/theme-selectors.ts","store/states/theme-state/index.ts","store/utils/async-match-fulfilled.ts","store/states/account-state/middlewares/index.ts","store/states/account-state/middlewares/monitor-login.ts","store/states/posts-state/middlewares/index.ts","store/states/posts-state/middlewares/monitor-posts-filter.ts","store/middlewares.ts","store/store.ts","store/index.ts","hooks/useAppTheme.ts","theme/AppThemeProvider.tsx","store/states/account-state/account-selectors.ts","hooks/useAccount.ts","features/SplashScreen/SplashScreen.tsx","components/HighlightTypography.tsx","hooks/useFilter.ts","features/PostList/components/PostTitle.tsx","features/PostList/components/PostComment.tsx","features/PostList/components/PostTags.tsx","features/PostList/components/PostMeta.tsx","components/LinkTypography.tsx","features/PostList/components/PostLink.tsx","features/PostList/components/PostSubtitle.tsx","store/states/posts-state/posts-selectors.ts","utils/unwrap-axios-thunk-result.ts","hooks/usePosts.ts","hooks/useSinglePost.ts","features/PostList/components/DeletePostDialog.tsx","features/PostList/components/MoreOptionsMenu.tsx","features/PostList/components/PostActions.tsx","features/PostList/components/PostListItem.tsx","features/PostList/components/AddPostFab.tsx","features/PostList/components/PostList-Skeleton.tsx","features/PostList/components/NoPostsView.tsx","features/PostFilterDialog/components/PostFilterForm/PostFilterForm-View.tsx","features/PostFilterDialog/components/PostFilterForm/PostFilterForm-Connector.tsx","features/PostFilterDialog/components/PostFilterForm/index.ts","features/PostFilterDialog/index.ts","features/PostFilterDialog/PostFilterDialog.tsx","features/PostList/components/PostListFilter.tsx","features/PostList/constants.ts","features/PostList/PostList-View.tsx","features/PostList/index.ts","features/PostList/PostList-Connector.tsx","routes/pages/HomePage.tsx","components/form-fields/PasswordField.tsx","routes/pages/LoginPage/LoginPage-View.tsx","routes/pages/LoginPage/LoginPage-Container.tsx","routes/pages/LoginPage/index.ts","routes/pages/LoginPage/LoginPage-FormConnector.tsx","routes/pages/CreatePostPage/CreatePostPage-View.tsx","hooks/useForm.ts","routes/pages/CreatePostPage/index.ts","routes/pages/CreatePostPage/CreatePostPage-FormConnector.tsx","routes/pages/RegisterPage/RegisterPage-View.tsx","routes/pages/RegisterPage/validator.ts","routes/pages/RegisterPage/index.ts","routes/pages/RegisterPage/RegisterPage-Connector.tsx","features/LoadingDialog.tsx","routes/pages/EditPostPage/EditPostPage-View.tsx","routes/pages/EditPostPage/EditPostPage-FormConnector.tsx","hooks/useAsyncState.ts","routes/routes.ts","routes/pages/EditPostPage/EditPostPage-DataConnector.tsx","routes/index.ts","features/AppBar/components/AccountAvatar/AccountMenu.tsx","features/AppBar/components/AccountAvatar/AccountAvatar.tsx","features/AppBar/components/AccountActions.tsx","features/AppBar/components/ThemeSwitcher.tsx","features/AppBar/AppBar.tsx","features/AppScaffold/AppScaffold.tsx","routes/pages/PageNotFound.tsx","app/App.tsx","app/index.ts","index.tsx","components/form-fields/TextFormField.tsx","api/posts/index.ts","features/PostForm/index.ts","store/models/PostModel.ts","components/LoadingButton.tsx"],"names":["renderSelect","input","currentValue","value","onChange","fieldLabel","getOptionLabel","id","multiple","selectOnFocus","clearOnBlur","options","filterOptions","_","inputValue","filtered","label","push","trim","option","renderInput","params","variant","placeholder","renderTags","getTagProps","map","tag","index","newValue","reason","details","Array","isArray","unique","Object","values","toRemove","filter","val","SelectPostTags","name","component","FormSubmitButton","children","formState","formId","buttonProps","form","type","loading","buildQuery","searchQuery","query","tags","sort","order","reqQuery","keys","key","join","getPosts","a","opts","axios","get","responseData","data","posts","postFromJson","getPostById","postId","createPost","postData","post","deletePost","delete","editPost","put","createPostFormValidator","errors","title","validator","isEmpty","link","isURL","require_protocol","OutlinedTextFormField","props","TextFormField","useStyles","makeStyles","theme","createStyles","fullHeight","height","header","marginBottom","spacing","subtitle","typography","subtitle2","color","palette","text","secondary","fontWeight","fontWeightRegular","PostFormView","onFormSubmit","formStatus","status","formActionText","classes","Grid","container","wrap","direction","justify","className","onSubmit","item","Typography","autoFocus","required","create","withCredentials","login","loginData","logout","response","user","json","loggedIn","register","accountData","updateAccountAsync","createAsyncThunk","auth","simplifyAxiosError","statusText","loginAsync","thunkApi","console","log","rejectWithValue","logoutAsync","createAccountAsync","reducer","createSlice","initialState","account","reducers","extraReducers","builder","addCase","fulfilled","state","action","payload","postsAdapter","AccountState","createEntityAdapter","selectFilterState","getAllPostsAsync","filterState","getState","createPostAsync","deletePostAsync","Promise","reject","editPostAsync","getInitialState","setAll","removeOne","filterSlice","setFilter","actions","commonPalette","primary","main","purple","contrastText","deepOrange","darkTheme","createMuiTheme","background","default","paper","focus","lightTheme","persistTheme","setTheme","localStorage","setItem","clearTheme","removeItem","getTheme","getItem","activeTheme","getStoredTheme","themeSlice","setActiveTheme","themeReducer","selectActiveTheme","createSelector","themeState","ThemeState","asyncMatchFulfilled","asyncAction","match","api","next","hasLoggedIn","hasLoggedOut","hasRegistered","dispatch","accountStateMiddlewares","postsMiddlewares","store","configureStore","accountReducer","postsReducer","filterReducer","formReducer","middleware","getDefaultMiddleware","serializableCheck","concat","middlewares","useAppDispatch","useDispatch","useAppTheme","useSelector","AppThemeProvider","React","useEffect","setThemeLocally","ThemeProvider","accountSelector","accountStateSelector","useAccount","autoFetch","useState","accountFetchStatus","setAccountStatus","then","unwrapResult","catch","updateAccount","createAccount","success","failure","uninitiated","root","fontFamily","SplashScreen","LinearProgress","alignItems","highlight","backgroundColor","HighlightTypography","typographyProps","TypographyWithProps","clsx","trimmedQuery","toLowerCase","textLower","queryLength","length","results","indexOf","parse","queryMatcher","renderHighlighted","renderNormal","useFilter","fontWeightBold","textDecoration","transition","outline","blue","PostTitle","postTitle","trimmedTitle","titleLength","strippedTitle","substring","ellipsis","displayTitle","href","target","PostComment","comment","paragraph","display","flexWrap","margin","marginLeft","light","PostTags","remainingTags","slice","Math","min","Chip","clickable","size","dotSeparator","PostMeta","creationDate","dateFormat","createdAt","alignContent","LinkTypography","to","linkOutsideApp","linkProps","Link","subtitle1","verticalAlign","PostLink","PostSubtitle","selectors","getSelectors","selectAll","selectById","selectTotal","unwrapAxiosError","actionToMatch","resultAction","rejected","usePosts","postsStatus","setPostsStatus","error","setError","err","updatePosts","selectAllPosts","updateAllPosts","useSinglePost","DeletePostDialog","isDeleting","onDeletePost","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","onClick","onClose","LoadingButton","disableElevation","CustomMenuItem","Icon","icon","linkTo","Boolean","MenuItem","ListItemIcon","ListItemText","MoreOptionsMenu","editPostUrl","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","EditIcon","DeleteIcon","marginTop","PostActions","dialogOpen","setDialogOpen","closeDeleteConfirmationDialog","openDeleteConfirmationDialog","menuAnchorEl","setMenuAnchorEl","enqueueSnackbar","useSnackbar","deletePostState","setDeletePostState","handleDeletePost","setTimeout","routeMap","path","replace","Hidden","xsDown","Tooltip","IconButton","smUp","event","currentTarget","open","keepMounted","anchorEl","postActionRoot","PostListItem","hasHighlighted","setHasHighlighted","ListItem","selected","secondaryTypographyProps","ListItemSecondaryAction","fab","position","right","bottom","zIndex","AddPostFab","history","useHistory","WaveSkeleton","Skeleton","animation","PostListSkeleton","skeletons","itemClassName","subheader","List","fill","NoPostsView","align","breakpoints","up","minWidth","width","SortTypeComponent","FormControl","FormLabel","RadioGroup","FormControlLabel","control","Radio","SortOrderComponent","PostFilterFormView","fullWidth","Field","WithForm","reduxForm","handleSubmit","afterSetFilter","formValues","PostFilterForm","connect","initialValues","PostFilterDialog","fullScreen","useMediaQuery","down","disableEscapeKeyDown","fontSize","PostListFilter","startIcon","constants","itemThemeSpacingUnit","listSubheader","subheaderMainTitle","flexGrow","PostListView","highlightPost","isLoading","ListSubheader","disableSticky","Helmet","Container","maxWidth","noMatchingPosts","primaryTypographyProps","postListBody","renderPosts","PostList","onUpdatePosts","HomePage","useLocation","undefined","PasswordField","showPassword","setShowPassword","InputProps","endAdornment","InputAdornment","padding","red","LoginPageView","isLoggingIn","loginError","loginResult","home","Divider","LoginPageContainer","otherProps","snackbarShown","setSnackbarShown","onEnter","LoginPage","username","password","setLoggingIn","setLoginError","setLoginResult","performLogin","unwrapAxiosThunkResult","errResponse","message","CreatePostPageView","PostForm","useForm","successSnackbarMessage","failureSnackbarMessage","setFormState","setFormSubmitSuccess","meta","setFormSubmitFail","setFormSubmitting","CreatePostPage","validate","formActions","createdPost","pathname","stringTags","RegisterPageView","registerError","email","ensureNotEmpty","isEmail","RegisterPage","formData","unknownError","dialogContent","LoadingDialog","loadingText","disableBackdropClick","CircularProgress","EditPostPageView","postFetchStatus","postNotReady","editPostFormValidator","editedPost","useAsyncState","setState","setLoading","setSuccess","setFailure","exact","CreatePostPageForm","fetchState","useParams","fetchPost","getInitialValues","routes","loggedInAs","marginRight","AccountMenu","anchorElement","onCloseMenu","noWrap","AccountAvatar","isAccountLoading","menuAnchorElement","setMenuAnchorElement","LinkButton","NavLink","LoginButton","ThemeSwitcher","isDarkTheme","DarkThemeIcon","LightThemeIcon","kStyleRemoveLink","grey","noLink","AppBar","Toolbar","AccountActions","AppScaffold","PageNotFound","AppContent","route","App","titleTemplate","defaultTitle","ReactDOM","render","CssBaseline","document","getElementById","renderField","touched","textFieldProps","hasError","userId","Date","updatedAt","stateIcon","disabled","thickness"],"mappings":"mKAmBMA,EAAe,SAAC,GAOK,IAAD,IANtBC,MACWC,EAKW,EALlBC,MACAC,EAIkB,EAJlBA,SAEJC,EAEsB,EAFtBA,WACAC,EACsB,EADtBA,eAEA,OACI,kBAAC,IAAD,CACIC,GAAG,gBACHC,UAAQ,EACRC,eAAa,EACbC,aAAW,EACXC,QAAS,GACTC,cAAe,SAACC,EAAD,GAAwB,IAAlBC,EAAiB,EAAjBA,WACXC,EAAuB,GAC7B,GAAmB,KAAfD,EAAmB,CACnB,IAAME,EAAQV,EACVA,EAAeQ,GADS,sBAETA,EAFS,KAI5BC,EAASE,KAAK,CACVd,MAAOW,EAAWI,OAClBF,UAIR,OAAOD,GAEXT,eAAgB,SAACa,GAAD,OAAYA,EAAOH,OACnCI,YAAa,SAACC,GAAD,OACT,kBAAC,IAAD,iBACQA,EADR,CAEIC,QAAQ,WACRN,MAAOX,GAAc,cACrBkB,YAAY,WAGpBC,WAAY,SAACrB,EAAOsB,GAAR,OAAwBtB,EAAMuB,KAAI,SAACC,EAAKC,GAChD,OACI,kBAAC,IAAD,eACIZ,MAAOW,EAAIxB,OACPsB,EAAY,CAAEG,gBAI9BxB,SAAU,SAACS,EAAGgB,EAAUC,EAAQC,GAC5B,IAAKC,MAAMC,QAAQJ,GACf,OAAO,KAGX,GAAe,kBAAXC,GAAyC,kBAAXA,EAA4B,CAE1D,IAF0D,EAEpDI,EAAoC,GAFgB,cAG1CL,GAH0C,IAG1D,2BAA0B,CAAC,IAAlBF,EAAiB,QACtBO,EAAOP,EAAIxB,OAASwB,GAJkC,8BAO1DvB,EAAS+B,OAAOC,OAAOF,IAG3B,GAAe,kBAAXJ,GAA8BC,EAAS,CACvC,IAAMM,EAAWN,EAAQZ,OACnBJ,EAAWb,EAAaoC,QAAO,SAACC,GAClC,OAAOA,EAAIpC,QAAUkC,EAASlC,SAGlCC,EAASW,KAGjBZ,MAAOD,GAAgB,MAmBpBsC,IAdwC,SAAC,GAGjD,IAFHnC,EAEE,EAFFA,WACAC,EACE,EADFA,eAEA,OACI,kBAAC,IAAD,CACImC,KAAK,OACLC,UAAW1C,EACXK,WAAYA,EACZC,eAAgBA,M,qEC5EbqC,IAlB0D,SAAC,GAKnE,IAJHC,EAIE,EAJFA,SACAC,EAGE,EAHFA,UACAC,EAEE,EAFFA,OACGC,EACD,iDACF,OACI,kBAAC,IAAD,eACIC,KAAMF,EACNG,KAAK,SACLC,QAAuB,eAAdL,GACLE,GAEHH,K,kJCbb,SAASO,EAAT,GAKmB,IAJRC,EAIO,EAJdC,MACAC,EAGc,EAHdA,KACAC,EAEc,EAFdA,KACAC,EACc,EADdA,MAEMC,EAAgB,GAiBtB,OAhBIL,IACAK,EAASJ,MAAQD,GAGjBG,IACAE,EAASF,KAAOA,GAGhBC,IACAC,EAASD,MAAQA,GAGjBF,IACAG,EAASH,KAAOA,GAGbnB,OAAOuB,KAAKD,GAAU/B,KAAI,SAAAiC,GAAG,gBAAOA,EAAP,YAAcF,EAASE,OAAQC,KAAK,KAGrE,IAAMC,EAAQ,uCAAG,4CAAAC,EAAA,6DAAOC,EAAP,+BAA6B,GAA7B,SACiBC,IAAMC,IAAN,qBAAwBd,EAAWY,KADpD,uBACNG,EADM,EACZC,KADY,kBAGbD,EAAaE,MAAM1C,IAAI2C,MAHV,2CAAH,qDAMRC,EAAW,uCAAG,WAAOC,GAAP,iBAAAT,EAAA,sEACAE,IAAMC,IAAN,qBAAwBM,IADxB,uBACfJ,EADe,EACfA,KADe,kBAGhBE,YAAaF,IAHG,2CAAH,uD,gHCtCXK,EAAU,uCAAG,WAAOC,GAAP,iBAAAX,EAAA,sEACCE,IAAMU,KAAN,cAA0BD,GAD3B,uBACdN,EADc,EACdA,KADc,kBAGfE,YAAaF,IAHE,2CAAH,uD,wGCFVQ,EAAU,uCAAG,WAAOJ,GAAP,SAAAT,EAAA,+EAA0BE,IAAMY,OAAN,qBAA2BL,KAArD,2CAAH,uD,gHCEVM,EAAQ,uCAAG,WAAOtE,EAAYkE,GAAnB,iBAAAX,EAAA,sEACGE,IAAMc,IAAN,qBAAwBvE,GAAMkE,GADjC,uBACZN,EADY,EACZA,KADY,kBAGbE,YAAaF,IAHA,2CAAH,yD,qDCFrB,uDAMe,SAASY,EAAwB3C,GAC5C,IAAM4C,EAAS,GAWf,MAV4B,kBAAjB5C,EAAO6C,OAAsBC,IAAUC,QAAQ/C,EAAO6C,SAC7DD,EAAOC,MAAQ,qBAGf7C,EAAOgD,OAASF,IAAUC,QAAQ/C,EAAOgD,KAAKlE,UACzCgE,IAAUG,MAAMjD,EAAOgD,KAAM,CAAEE,kBAAkB,MAClDN,EAAOI,KAAO,gCAIfJ,I,iCCpBX,e,8NCOeO,EAJ8C,SAACC,GAC1D,OAAO,kBAACC,EAAA,EAAD,iBAAmBD,EAAnB,CAA0BlE,QAAQ,eCOvCoE,EAAYC,aAAW,SAACC,GAAD,OAAWC,YAAa,CACjDC,WAAY,CACRC,OAAQ,QAEZC,OAAQ,CACJC,aAAcL,EAAMM,QAAQ,IAEhCC,SAAS,2BACFP,EAAMQ,WAAWC,WADhB,IAEJC,MAAOV,EAAMW,QAAQC,KAAKC,UAC1BC,WAAYd,EAAMQ,WAAWO,yBAgEtBC,IA5DqB,SAAC,GAM9B,IALH9D,EAKE,EALFA,OACA+D,EAIE,EAJFA,aACQC,EAGN,EAHFC,OACAC,EAEE,EAFFA,eACAhB,EACE,EADFA,OAEMiB,EAAUvB,IAEhB,OACI,kBAACwB,EAAA,EAAD,CACIC,WAAS,EACTC,KAAK,OACLC,UAAU,SACVC,QAAQ,SACRpB,QAAS,EACTqB,UAAWN,EAAQnB,WACnBpD,UAAU,OACVnC,GAAIuC,EACJ0E,SAAUX,GAEV,kBAACK,EAAA,EAAD,CAAMO,MAAI,EAACN,WAAS,EAACE,UAAU,SAASE,UAAWN,EAAQjB,QACvD,kBAACkB,EAAA,EAAD,CAAMO,MAAI,GACN,kBAACC,EAAA,EAAD,CAAYpG,QAAQ,MACf0E,IAGT,kBAACkB,EAAA,EAAD,CAAMO,MAAI,GACN,kBAACC,EAAA,EAAD,CAAYH,UAAWN,EAAQd,UAA/B,sCAMR,kBAACe,EAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,EAAD,CAAuBhF,KAAK,QAAQzB,MAAM,QAAQ2G,WAAS,EAACC,UAAQ,KAExE,kBAACV,EAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,EAAD,CAAuBhF,KAAK,OAAOzB,MAAM,UAE7C,kBAACkG,EAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,EAAD,CAAuBhF,KAAK,UAAUzB,MAAM,aAEhD,kBAACkG,EAAA,EAAD,CAAMO,MAAI,GACN,kBAACjF,EAAA,EAAD,OAEJ,kBAAC0E,EAAA,EAAD,CAAMO,MAAI,GACN,kBAAC9E,EAAA,EAAD,CACIG,OAAQA,EACRD,UAAWiE,EACXR,MAAM,UACNhF,QAAQ,aAEP0F,O,4FC9ErB,sBAEehD,QAAM6D,OAAO,CAAEC,iBAAiB,K,sTCIhCC,EAJD,SAACC,GACX,OAAOhE,IAAMU,KAAK,kBAAmBsD,ICG1BC,EAJA,WACX,OAAOjE,IAAMU,KAAK,qB,yBCKPqC,EALH,uCAAG,4BAAAjD,EAAA,sEACYE,IAAMC,IAAI,oBADtB,cACLiE,EADK,yBCKJ,CACHC,MAFwBC,EDFLF,EAAS/D,MCIlB,KACVkE,SAAUD,EAAI,WDPP,iCCIgB,IAACA,IDJjB,OAAH,qDEGGE,EAJE,SAACC,GACd,OAAOvE,IAAMU,KAAK,qBAAsB6D,I,QCG7BC,EAFYC,YAA+B,qBAAsBC,EAAK3B,QCFtE,SAAS4B,EAAT,GAA4F,IAA9DT,EAA6D,EAA7DA,SACzC,GAAKA,EAIL,MAAO,CACH/D,KAAM+D,EAAS/D,KACf4C,OAAQmB,EAASnB,OACjB6B,WAAYV,EAASU,YCN7B,IAUeC,EAVIJ,YAAiC,aAAjB,uCAA+B,WAAOT,EAAWc,GAAlB,SAAAhF,EAAA,+EAE5C4E,EAAKX,MAAMC,GAFiC,uCAErB7D,MAFqB,uCAI1D4E,QAAQC,IAAI,gBAAZ,MACAD,QAAQC,IAAI,aAAc,KAAId,UAL4B,kBAMnDY,EAASG,gBAAgBN,EAAmB,EAAD,MANQ,yDAA/B,yDCCpBO,EAFKT,YAAiB,cAAeC,EAAKT,QCc1CkB,EAbYV,YACvB,qBADuC,uCAEvC,WAAOF,EAAaO,GAApB,SAAAhF,EAAA,+EAEsB4E,EAAKJ,SAASC,GAFpC,uCAEkDpE,MAFlD,uCAIQ4E,QAAQC,IAAI,mBAAZ,MACAD,QAAQC,IAAI,aAAc,KAAId,UALtC,kBAMeY,EAASG,gBAAgBN,EAAmB,EAAD,MAN1D,yDAFuC,yDCa9BS,EAXQC,YAA2D,CAC5E5G,KAAM,gBACN6G,aAJ+B,CAAEC,QAAS,CAAElB,UAAU,IAKtDmB,SAAU,GACVC,cAAe,SAAAC,GACXA,EAAQC,QAAQnB,EAAmBoB,WAAW,SAACC,EAAOC,GAClDD,EAAMN,QAAUO,EAAOC,cAKCX,QCZrBY,GCAAC,EAAf,EDFqBC,eECRC,EAAsD,SAACN,GAAD,OAAWA,EAAMvH,QCmBrE8H,EAhBU3B,YAIvB,oBAAoB,SAAC4B,EAAD,GAAgC,IAAhBC,EAAe,EAAfA,SAC5BhI,EAAS+H,GAAeF,EAAkBG,KACxCjH,EAA6Bf,EAA7Be,MAAOE,EAAsBjB,EAAtBiB,KAAMC,EAAgBlB,EAAhBkB,MAAOF,EAAShB,EAATgB,KAE5B,OAAOc,EAAMP,SAAS,CAClBR,QACAE,OACAC,QACAF,MAAOA,GAAQ,IAAI5B,KAAI,SAAAC,GAAG,OAAIA,KAAKiC,KAAK,UCVjC2G,EALS9B,YACpB,kBACAjE,cCSWgG,EAZS/B,YACpB,kBADoC,uCAEpC,WAAOlE,GAAP,SAAAT,EAAA,+EAEcM,EAAMO,WAAWJ,GAF/B,gCAGeA,GAHf,yDAKekG,QAAQC,OAAR,OALf,wDAFoC,uD,QCWzBC,EAXOlC,YAClB,gBADkC,uCAElC,+BAAA3E,EAAA,6DAASvD,EAAT,EAASA,GAAOmE,EAAhB,wCAEcG,mBAAStE,EAAImE,GAF3B,+EAIe+F,QAAQC,OAAR,OAJf,wDAFkC,uDCYzBtB,EAVMC,YAAuD,CACtE5G,KAAM,cACN6G,aAAcU,EAAaY,kBAC3BpB,SAAU,GACVC,cAAe,SAAAC,GACXA,EAAQC,QAAQS,EAAiBR,UAAWI,EAAaa,QACzDnB,EAAQC,QAAQa,EAAgBZ,UAAWI,EAAac,cAI9B1B,Q,SCZ5B2B,G,OCCN,EDDoB1B,YAAyD,CACzE5G,KAAM,eACN6G,aEKqC,CACrC/F,KAAM,QACNC,MAAO,MACPF,KAAM,IFPNkG,SAAU,CACNwB,UAAW,SAACnK,EAAGiJ,GAAJ,OAAeA,EAAOC,aAI1BiB,EAAcD,EAAYE,QAA1BD,UACA5B,EAAqB2B,EAArB3B,Q,GAAqB2B,EAAZE,Q,2CGRlBC,EAAgC,CAClCC,QAAS,CACLC,KAAMC,IAAO,KACbC,aAAc,QAElB7E,UAAW,CACP2E,KAAMG,IAAW,OAIZC,EAAYC,YAAe,CACpClF,QAAQ,2BACD2E,GADA,IAEHjI,KAAM,OACNyI,WAAY,CACRC,QAAS,UACTC,MAAO,WAEXpF,KAAM,CACF2E,QAAS,QAEbrB,OAAQ,CACJ+B,MAAO,YAKNC,EAAaL,YAAe,CACrClF,QAAQ,2BACD2E,GADA,IAEHjI,KAAM,YC9BR8I,EAAe,CACjBC,SAAU,SAACpG,GACPqG,aAAaC,QAJS,yBAIsBtG,IAEhDuG,WAAY,WACRF,aAAaG,WAPS,2BAS1BC,SAAU,WACN,IAAMzG,EAAQqG,aAAaK,QAVL,0BAYtB,MAAc,SAAV1G,GAA8B,UAAVA,EACbA,EAGJ,OCdUoG,EDkBVD,EClBUC,SCAnB1C,EAA2B,CAC7BiD,aAAaC,EFiBFT,EClBAM,aCCsB,QAG/BI,EAAapD,YAAuD,CACtE5G,KAAM,cACN6G,eACAE,SAAU,CACNkD,eAAgB,SAAC7L,EAAGiJ,GAAJ,MAA0D,CACtEyC,YAAazC,EAAOC,aAKnB4C,EAAeF,EAAWrD,QAExBsD,EAAmBD,EAAWxB,QAA9ByB,e,SCdFE,GAGTC,cAL6D,SAAChD,GAAD,OAAWA,EAAMjE,SAO9E,SAACkH,GAAD,OAAgBA,EAAWP,e,ICThBQ,EAAf,W,QCGeC,GAHa,SAACC,EAAwCnD,GAAzC,OACxBmD,EAAYrD,UAAUsD,MAAMpD,ICDjB,ICEiC,SAACqD,GAAD,OAAS,SAACC,GAAD,OAAU,SAACtD,GAChE,IAAMuD,EAAcL,GAAoBnE,EAAYiB,GAC9CwD,EAAeN,GAAoB9D,EAAaY,GAChDyD,EAAgBP,GAAoB7D,EAAoBW,IAE1DuD,GAAeC,GAAgBC,IAC/BJ,EAAIK,SAAShF,KAGjB4E,EAAKtD,OCXM,ICIuC,SAAC,GAAD,IAClD0D,EADkD,EAClDA,SADkD,OAEhD,SAACJ,GAAD,OAAU,SAACtD,GACTkB,EAAUkC,MAAMpD,IAChB0D,EAASpD,EAAiBN,EAAOC,UAGrCqD,EAAKtD,OCVK,0BAAK2D,IAAnB,aAA+CC,KCOzCC,GAAQC,YAAe,CACzBxE,QAAS,CACLG,QAASsE,EACTzJ,MAAO0J,EACPxL,OAAQyL,EACRnI,MAAO+G,EACP3J,KAAMgL,KAEVC,WAAYC,YAAqB,CAAEC,mBAAmB,IAASC,OAAOC,MAK7DC,GAAiB,kBAAmBC,eCrBlCZ,GDsBAA,G,kBEAAa,GAZK,WAChB,IAAMjC,EAAckC,YAAY7B,IAC1BY,EAAWc,KAEjB,MAAO,CACH/B,EACA,CACIG,eAAgB,SAAC9G,GAAD,OAAW4H,EAASd,EAAe9G,QCShD8I,GArB4C,SAAClJ,GAAW,IAAD,EAC5CgJ,KAAfjC,EAD2D,qBAGlEoC,IAAMC,WAAU,WAEZC,EAAgBtC,KACjB,CAACA,IAUJ,OACI,kBAACuC,GAAA,EAAD,eAAelJ,MARK,SAAhB2G,EACOf,EAGJM,GAI+BtG,K,8CCjBjCuJ,GAAqD,SAAClF,GAAD,OAFK,SAACA,GAAD,OAAWA,EAAMN,QAEXyF,CAAqBnF,GAAON,SC2D1F0F,GArCI,WAAyE,IAAD,yDAAtC,CAAEC,WAAW,GAA5CA,EAAqE,EAArEA,UAAqE,EACxCP,IAAMQ,SAA4B,eADM,oBAChFC,EADgF,KAC5DC,EAD4D,KAEjF7B,EAAWc,KAEjBK,IAAMC,WAAU,WAAM,4CAClB,sBAAA9K,EAAA,0DACQoL,EADR,uBAEQG,EAAiB,WAFzB,SAGc7B,EAAShF,KACV8G,KAAKC,KACLD,MAAK,SAACzO,GAAD,OAAYwO,EAAiB,cAClCG,OAAM,SAAC3O,GAAD,OAAYwO,EAAiB,WANhD,4CADkB,uBAAC,WAAD,wBAWlBI,KACD,CAACjC,EAAU0B,IAEd,IAAM3F,EAAUkF,YAAYM,IAE5B,MAAO,CACHxF,EACA,CACIxB,MAAO,SAAC5D,GAAD,OAAUqJ,EAAS3E,EAAW1E,KACrC8D,OAAQ,kBAAMuF,EAAStE,MACvBwG,cAAe,SAACvL,GAAD,OAAUqJ,EAASrE,EAAmBhF,KACrDsL,cAAe,kBAAMjC,EAAShF,OAElC,CACItF,QAAgC,YAAvBkM,EACTO,QAAgC,YAAvBP,EACTQ,QAAgC,SAAvBR,EACTS,YAAoC,gBAAvBT,K,iDCvDnB1J,GAAYC,aAAWE,aAAa,CACtCiK,KAAM,CACF/J,OAAQ,QAEZK,WAAY,CACR2J,WAAY,aAyBLC,GArBM,WACjB,IAAM/I,EAAUvB,KAEhB,OACI,oCACI,kBAACuK,GAAA,EAAD,MACA,kBAAC/I,GAAA,EAAD,CACIC,WAAS,EACTE,UAAU,SACV6I,WAAW,SACX5I,QAAQ,SACRC,UAAWN,EAAQ6I,MAEnB,kBAACpI,GAAA,EAAD,CAAYpG,QAAQ,KAAKiG,UAAWN,EAAQb,YAA5C,uB,mGCdVV,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDsK,UAAW,CACPC,gBAAiBxK,EAAMW,QAAQE,UAAU2E,WAmElCiF,OA/DmC,SAAC,GAAyC,IAAvChN,EAAsC,EAAtCA,MAAOmD,EAA+B,EAA/BA,KAAS8J,EAAsB,gCACjFrJ,EAAUvB,KAEV6K,EAAiD,SAAC/K,GACpD,IAAM+B,EAAYiJ,aAAKF,EAAgB/I,UAAW/B,EAAM+B,WACxD,OAAO,kBAACG,GAAA,EAAD,iBAAgB4I,EAAqB9K,EAArC,CAA4C+B,UAAWA,MAGlE,IAAKlE,IAAUmD,EACX,OAAO,kBAAC+J,EAAD,KAAsB/J,GAmBjC,OACI,kBAAC+J,EAAD,KAWR,SAAsB/J,EAAenD,GACjC,GAAsB,kBAATmD,GAAsC,kBAAVnD,EACrC,MAAO,GAGX,IAAMoN,EAAepN,EAAMnC,OAAOwP,cAC5BC,EAAYnK,EAAKkK,cACjBE,EAAcH,EAAaI,OAEjC,GAAyB,IAArBF,EAAUE,QAAgC,IAAhBD,EAC1B,MAAO,GAGX,IAAME,EAAU,GACZC,EAAUJ,EAAUI,QAAQN,GAChC,KAAOM,GAAW,GACdD,EAAQ7P,KAAK,CAAC8P,EAASA,EAAUH,IACjCG,EAAUJ,EAAUI,QAAQ1N,EAAO0N,EAAUH,GAGjD,OAAOI,KAAMxK,EAAMsK,GA7BPG,CAAazK,EAAMnD,GAAO3B,KAAI,YAA0B,IAAvB8E,EAAsB,EAAtBA,KAC7B,OADmD,EAAhB2J,UAnBzB,SAAC3J,GACvB,OAEI,kBAAC+J,EAAD,CAAqB7N,UAAU,OAAO6E,UAAWN,EAAQkJ,WACpD3J,GAgBsB0K,CAAkB1K,GAXhC,SAACA,GAClB,OAEI,kBAAC+J,EAAD,CAAqB7N,UAAU,QAAQ8D,GAQc2K,CAAa3K,QC3B/D4K,GAZG,WACd,IAAM5D,EAAWc,KAGjB,MAAO,CAFQG,YAAYtE,GAIvB,CACIa,UAAW,SAAC1I,GAAD,OAAYkL,EAASxC,EAAU1I,QCZhDoD,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFpJ,WAAYd,EAAMQ,WAAWiL,eAC7B/K,MAAO,UACPgL,eAAgB,OAChBC,WAAY,sBACZC,QAAS,EACT,UAAW,CACPF,eAAgB,OAChBhL,MAAOmL,KAAK,YA+BTC,GAxBe,SAAC,GAA0C,IAAD,IAAvChN,KAAeiN,EAAwB,EAA/B1M,MAAkBG,EAAa,EAAbA,KACjD6B,EAAUvB,KADoD,EAEhD0L,KAAX/N,EAF2D,qBAE3DA,MAEHuO,EAAeD,EAAUzQ,OACzB2Q,EAAcD,EAAaf,OAC3BiB,EAAgBF,EAAaG,UAAU,EARzB,IASdC,EAAWH,EATG,GAS6B,MAAQ,GACnDI,EAAY,UAAMH,GAAN,OAAsBE,GAExC,OACI,kBAAC,GAAD,CACIzK,UAAWN,EAAQ6I,KACnBxO,QAAQ,KAERoB,UAAU,IACVwP,KAAM9M,GAAQ,IACd+M,OAAO,SACP3L,KAAMyL,EACN5O,MAAOA,KCzBJ+O,GAZmB,SAAC,GAA2B,IAAjBC,EAAgB,EAAxB3N,KAAQ2N,QAAgB,EACrCjB,KAAX/N,EADgD,qBAChDA,MAET,OACI,kBAAC,GAAD,CACIiP,WAAS,EACT9L,KAAM6L,EACNhP,MAAOA,K,yCCNbqC,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFyC,QAAS,cACTC,SAAU,OACV,QAAS,CACLC,OAAQ7M,EAAMM,QAAQ,KAG1BwM,WAAW,IAAD,OAAM9M,EAAMM,QAAQ,IAApB,OAGdvE,IAAK,CACD2E,MAAOV,EAAMW,QAAQ4E,QAAQwH,YAiDtBC,GA3Ca,SAAC,GAAwB,IAAdtP,EAAa,EAArBoB,KAAQpB,KAC7B2D,EAAUvB,KAEhB,GAAoB,IAAhBpC,EAAKuN,OACL,OAAO,KAGX,IAAMgC,EAAgBvP,EAAKuN,OATP,EA+BpB,OACI,yBAAKtJ,UAAWN,EAAQ6I,MACnBxM,EAAKwP,MAAM,EAAGC,KAAKC,IAjCR,EAiC6B1P,EAAKuN,SAASnP,KAtBvC,SAACC,GAKrB,OACI,kBAACsR,GAAA,EAAD,CACIC,WAAS,EACT3L,UAAWN,EAAQtF,IACnBwR,KAAK,QACL7R,QAAQ,WACRgF,MAAM,UACNtF,MAAOW,EACPe,UAAU,IACVwP,KAAK,wBACLC,OAAO,cASPU,EAAgB,EACZ,kBAACnL,GAAA,EAAD,UACOmL,EADP,SAGA,OClDdnN,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDuN,aAAa,eACNxN,EAAMQ,WAAWC,gBAmCbgN,GA/Ba,SAAC,GAAc,IAAZ3O,EAAW,EAAXA,KACrBuC,EAAUvB,KACV4N,EAAeC,aAAW7O,EAAK8O,UAAW,gBAEhD,OACI,kBAACtM,GAAA,EAAD,CACIC,WAAS,EACTC,KAAK,SACL8I,WAAW,SACXuD,aAAa,SACbvN,QAAS,GAET,kBAACgB,GAAA,EAAD,CAAMO,MAAI,EAACL,KAAK,UACZ,kBAACM,GAAA,EAAD,CAAYpB,MAAM,iBACbgN,IAIR5O,EAAKpB,KAAKuN,OAAS,GAChB,kBAAC3J,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,KAAD,CAAkBF,UAAWN,EAAQmM,gBAI7C,kBAAClM,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,GAAD,CAAU/C,KAAMA,O,qBClC1BgB,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFwB,eAAgB,OAChBC,WAAY,sBACZC,QAAS,EACT,UAAW,CACPF,eAAgB,OAChBhL,MAAOmL,KAAK,YAgCTiC,GA3B8E,SAAC,GAKvF,IAJHnM,EAIE,EAJFA,UACAoM,EAGE,EAHFA,GACAC,EAEE,EAFFA,eACGpO,EACD,mDACIyB,EAAUvB,KAEVmO,EAAiB,GAUvB,OATID,GACAC,EAAUnR,UAAY,IACtBmR,EAAU3B,KAAOyB,EACjBE,EAAU1B,OAAS,WAEnB0B,EAAUnR,UAAYoR,KACtBD,EAAUF,GAAKA,GAIf,kBAACjM,GAAA,EAAD,eACIH,UAAWiJ,aAAKjJ,EAAWN,EAAQ6I,OAC/B+D,EACArO,KClCVE,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAK,2BACElK,EAAMQ,WAAW2N,WADpB,IAEAC,cAAe,SACfzB,QAAS,gBAEbnN,KAAM,CACFkB,MAAOmL,KAAK,WAqBLwC,GAjBa,SAAC,GAAc,IAAZvP,EAAW,EAAXA,KACrBuC,EAAUvB,KAChB,OAAKhB,EAAKU,KAKN,kBAACsC,GAAA,EAAD,CAAYH,UAAWN,EAAQ6I,MAC3B,kBAAC,KAAD,MADJ,OAGI,kBAAC,GAAD,CAAgB8D,gBAAc,EAACD,GAAIjP,EAAKU,KAAMmC,UAAWN,EAAQ7B,MAC5DV,EAAKU,OARP,MCNA8O,GAVqB,SAAC,GAAc,IAAZxP,EAAW,EAAXA,KACnC,OACI,oCACI,kBAAC,GAAD,CAAUA,KAAMA,IAChB,kBAAC,GAAD,CAAaA,KAAMA,IACnB,kBAAC,GAAD,CAAUA,KAAMA,M,6FCTtByP,GAAYnK,EAAaoK,cAAwB,SAAAvK,GAAK,OAAIA,EAAMzF,SAEvDiQ,GAAuCF,GAAvCE,UAAWC,GAA4BH,GAA5BG,WAA4BH,GAAhBI,YCHvB,SAASC,GAAiBC,GACrC,OAAO,SAACC,GACJ,GAAID,EAAc7K,UAAUsD,MAAMwH,GAC9B,OAAOA,EAAa3K,QACjB,GAAI0K,EAAcE,SAASzH,MAAMwH,GACpC,MAAMA,EAAa3K,QAEnB,OAAO2K,GCsBnB,IAyCeE,GAzCE,WAA6E,IAAD,yDAAxC,CAAE1F,WAAW,GAA9CA,EAAyE,EAAzEA,UAAyE,EACnDP,IAAMQ,SAA4B,eADiB,oBAClF0F,EADkF,KACrEC,EADqE,OAE/DnG,IAAMQ,WAFyD,oBAElF4F,EAFkF,KAE3EC,EAF2E,KAGnFxH,EAAWc,KAEjBK,IAAMC,WAAU,WAAM,4CAClB,sBAAA9K,EAAA,0DACQoL,EADR,uBAEQ4F,EAAe,WAFvB,SAGctH,EAASpD,KACVkF,KAAKkF,IACLlF,MAAK,SAACzO,GAAD,OAAYiU,EAAe,cAChCtF,OAAM,SAACyF,GACJH,EAAe,QACfE,EAASC,MARzB,4CADkB,uBAAC,WAAD,wBAclBC,KACD,CAAC1H,EAAU0B,IAEd,IAAM9K,EAAQqK,YAAY0G,IAE1B,MAAO,CACH/Q,EACA,CACIgR,eAAgB,kBAAM5H,EAASpD,MAC/B5F,WAAY,SAACL,GAAD,OAAUqJ,EAASjD,EAAgBpG,KAC/CU,SAAU,SAACV,GAAD,OAAUqJ,EAAS7C,EAAcxG,MAE/C,CACIjB,QAAyB,YAAhB2R,EACTlF,QAAyB,YAAhBkF,EACTjF,QAAyB,SAAhBiF,EACThF,YAA6B,gBAAhBgF,EACbE,WCnCGM,GAXO,SAAC9Q,GAAsG,IAAD,yDAA7C,CAAE2K,WAAW,GAAnDA,EAAmF,EAAnFA,UAAmF,EAEhG0F,GAAS,CAAE1F,cAFqF,oBAE1GnI,GAF0G,gBAGlHrC,EAAO+J,aAAkC,SAAC5E,GAAD,OAAWyK,GAAWzK,EAAOtF,MACtEiJ,EAAWc,KAEjB,MAAO,CAAC5J,EAAM,CACVC,WAAY,kBAAM6I,EAAShD,EAAgBjG,MAC5CwC,I,qECyBQuO,GAlC4C,SAAC,GAKrD,IAJH5Q,EAIE,EAJFA,KACA6Q,EAGE,EAHFA,WACAC,EAEE,EAFFA,aACGhQ,EACD,oDACF,OACI,kBAACiQ,GAAA,EAAWjQ,EACR,kBAACkQ,GAAA,EAAD,mCAC4BhR,EAAKO,MADjC,OAGA,kBAAC0Q,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,sCAIJ,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAQC,QAASvQ,EAAMwQ,SAAvB,gBAGA,kBAACC,GAAA,EAAD,CACIC,kBAAgB,EAChBhT,QAASqS,EACTjU,QAAQ,YACRgF,MAAM,UACNyP,QAASP,GALb,kB,8BCAVW,GAAgD,SAAC,GAKhD,IAJGC,EAIJ,EAJFC,KACA7P,EAGE,EAHFA,KACA8P,EAEE,EAFFA,OACG9Q,EACD,wCACIqO,EAAiB,GAMvB,OALI0C,QAAQD,KACRzC,EAAUnR,UAAYoR,KACtBD,EAAUF,GAAK2C,GAKf,kBAACE,GAAA,EAAD,iBAAchR,EAAWqO,GACrB,kBAAC4C,GAAA,EAAD,KACI,kBAACL,EAAD,OAEJ,kBAACM,GAAA,EAAD,KACKlQ,KAMFmQ,GAtD0C,SAAC,GAInD,IAHHnB,EAGE,EAHFA,aACAoB,EAEE,EAFFA,YACGpR,EACD,8CACF,OACI,kBAACqR,GAAA,EAAD,eACItW,GAAG,oBACHuW,mBAAoB,KACpBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,WAC5CzR,GAEJ,kBAAC,GAAD,CACI6Q,KAAMc,KACN3Q,KAAK,YACL8P,OAAQM,IAEZ,kBAAC,GAAD,CAAgBP,KAAMe,KAAY5Q,KAAK,cAAcuP,QAASP,MCVpE9P,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFuH,UAAWzR,EAAMM,QAAQ,SAiFlBoR,GA7EmB,SAAC,GAAc,IAAZ5S,EAAW,EAAXA,KAC3BuC,EAAUvB,KAD4B,EAGhB2P,GAAc3Q,EAAKnE,IAHH,oBAGhCoE,GAHgC,UAGhCA,YAHgC,EAIRgK,IAAMQ,UAAS,GAJP,oBAIrCoI,EAJqC,KAIzBC,EAJyB,KAKtCC,EAAgC,kBAAMD,GAAc,IACpDE,EAA+B,kBAAMF,GAAc,IANb,EAQJ7I,IAAMQ,SAA6B,MAR/B,oBAQrCwI,EARqC,KAQvBC,EARuB,KAgBpCC,EAAoBC,eAApBD,gBAhBoC,EAiBElJ,IAAMQ,SAA4B,eAjBpC,oBAiBrC4I,EAjBqC,KAiBpBC,EAjBoB,KAmBtCC,EAAgB,uCAAG,sBAAAnU,EAAA,6DACrBkU,EAAmB,WADE,kBAGXrT,IAAa2K,KAAKC,KAHP,OAIjByI,EAAmB,WACnBH,EAAgB,4BAA6B,CAAEvW,QAAS,YACxD4W,WAAWT,EAA+B,KANzB,gDAQjBO,EAAmB,QACnBH,EAAgB,sBAAuB,CAAEvW,QAAS,UATjC,yDAAH,qDAahBsV,EAAcuB,GAAStT,SAASuT,KAAKC,QAAQ,UAAW3T,EAAKnE,IAEnE,OACI,oCACI,yBAAKgH,UAAWN,EAAQ6I,MACpB,kBAACwI,GAAA,EAAD,CAAQC,QAAM,GACV,kBAACC,GAAA,EAAD,CAASvT,MAAM,aACX,kBAACwT,GAAA,EAAD,CAAY/V,UAAWoR,KAAMH,GAAIiD,GAC7B,kBAAC,KAAD,QAGR,kBAAC4B,GAAA,EAAD,CAASvT,MAAM,qDACX,kBAACwT,GAAA,EAAD,CAAY1C,QAAS2B,GACjB,kBAAC,KAAD,SAKZ,kBAACY,GAAA,EAAD,CAAQI,MAAI,GACR,kBAACF,GAAA,EAAD,CAASvT,MAAM,gBACX,kBAACwT,GAAA,EAAD,CAAY1C,QA1CJ,SAAC4C,GACzBf,EAAgBe,EAAMC,iBA0CF,kBAAC,KAAD,UAKhB,kBAAC,GAAD,CACIC,KAAMtB,EACNvB,QAASyB,EACTlC,WAAgC,YAApBwC,EACZvC,aAAcyC,EACdvT,KAAMA,IAEV,kBAAC,GAAD,CACIoU,aAAW,EACXD,KAAMtC,QAAQoB,GACdoB,SAAUpB,EACV3B,QAvDiB,kBAAM4B,EAAgB,OAwDvCpC,aAAckC,EACdd,YAAaA,MCtFvBlR,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDmT,eAAgB,CACZjT,OAAQ,QAEZI,SAAU,CACNkR,UAAWzR,EAAMM,QAAQ,SAoClB+S,GAhCqB,SAAC,GAAoC,IAAlCvU,EAAiC,EAAjCA,KAAMiD,EAA2B,EAA3BA,UAAWJ,EAAgB,EAAhBA,UAC9CN,EAAUvB,KADoD,EAExBiJ,IAAMQ,UAAS,GAFS,oBAE7D+J,EAF6D,KAE7CC,EAF6C,KAapE,OATAxK,IAAMC,WAAU,WACRjH,IAAcuR,IACdnQ,QAAQC,IAAI,mBAAoBtE,GAChCwT,YAAW,WACPiB,GAAkB,KACnB,QAER,CAACzU,EAAMiD,EAAWuR,EAAgBC,IAIjC,kBAACC,GAAA,EAAD,CACI7R,UAAWA,EACXI,UAAWA,EACX0R,SAAU1R,IAAcuR,GAExB,kBAACxC,GAAA,EAAD,CACIvL,QAAS,kBAAC,GAAD,CAAWzG,KAAMA,IAC1B+B,UAAW,kBAAC,GAAD,CAAc/B,KAAMA,IAC/B4U,yBAA0B,CAAE5W,UAAW,MAAO6E,UAAWN,EAAQd,YAErE,kBAACoT,GAAA,EAAD,CAAyBhS,UAAWN,EAAQ+R,gBACxC,kBAAC,GAAD,CAAatU,KAAMA,O,+BCrC7BgB,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjD2T,IAAK,CACDC,SAAU,QACVC,MAAO9T,EAAMM,QAAQ,GACrByT,OAAQ/T,EAAMM,QAAQ,GACtB0T,OAAQ,UAmBDC,GAfI,WACf,IAAM5S,EAAUvB,KACVoU,EAAUC,eAEhB,OACI,kBAAC,KAAD,CACIxS,UAAWN,EAAQuS,IACnBlT,MAAM,YACNyP,QAAS,kBAAM+D,EAAQ7Y,KAAKkX,GAAS3T,WAAW4T,QAEhD,kBAAC,KAAD,Q,UCrBN4B,GAAwC,SAACxU,GAAD,OAC1C,kBAACyU,GAAA,EAAD,eAAUC,UAAU,QAAW1U,KA+BpB2U,GA7B6B,SAAC,GAItC,IAAD,IAHFC,iBAGE,MAHU,GAGV,MAFFC,qBAEE,MAFc,GAEd,EADFC,EACE,EADFA,UAkBA,OACI,kBAACC,GAAA,EAAD,KACKD,EACAtY,MAAMoY,GAAWI,KAAK,MAAM9Y,KAnBd,WACnB,OACI,kBAAC0X,GAAA,EAAD,CAAU7R,UAAW8S,GACjB,kBAAC3D,GAAA,EAAD,CACIvL,QAAS,kBAAC,GAAD,MACT1E,UACI,oCACI,kBAAC,GAAD,CAAcnF,QAAQ,OAAOyE,OAAQ,KACrC,kBAAC,GAAD,eCXtBL,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDT,KAAK,2BACEQ,EAAMQ,WAAW2N,WADpB,IAEAzN,MAAOmL,KAAK,YA0BLgJ,GAtBK,WAChB,IAAMxT,EAAUvB,KAEhB,OACI,kBAACwB,GAAA,EAAD,CAAMC,WAAS,EAACjB,QAAS,EAAGgK,WAAW,SAAS5I,QAAQ,UACpD,kBAACJ,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACC,GAAA,EAAD,CAAYgT,MAAM,SAASpU,MAAM,iBAAjC,8BAIJ,kBAACY,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,GAAD,CACIkM,GAAIwE,GAAS3T,WAAW4T,KACxB7Q,UAAWN,EAAQ7B,MAFvB,kB,iICZVM,GAAYC,cAAW,SAACC,GAAD,aAAWC,aAAa,CACjDiK,MAAI,oBACClK,EAAM+U,YAAYC,GAAG,MAAQ,CAC1BC,SAAS,GAAD,OAAKjV,EAAM+U,YAAYG,MAAM,MAAQ,GAArC,QAFZ,eAIA,QAAS,CACLzD,UAAWzR,EAAMM,QAAQ,KAL7B,eAOA,kBAAmB,CACfD,aAAcL,EAAMM,QAAQ,KARhC,QA8DF6U,GAAiD,SAAC,GAAe,IAAb9a,EAAY,EAAZA,MACtD,OACI,kBAAC+a,GAAA,EAAD,CAAatY,UAAU,YACnB,kBAACuY,GAAA,EAAD,CAAWvY,UAAU,UAArB,WACA,kBAACwY,GAAA,EAAejb,EACZ,kBAACkb,GAAA,EAAD,CAAkBhb,MAAM,QAAQa,MAAM,QAAQoa,QAAS,kBAACC,GAAA,EAAD,QACvD,kBAACF,GAAA,EAAD,CAAkBhb,MAAM,OAAOa,MAAM,OAAOoa,QAAS,kBAACC,GAAA,EAAD,WAM/DC,GAAkD,SAAC,GAAe,IAAbrb,EAAY,EAAZA,MACvD,OACI,kBAAC+a,GAAA,EAAD,CAAatY,UAAU,YACnB,kBAACuY,GAAA,EAAD,CAAWvY,UAAU,UAArB,cACA,kBAACwY,GAAA,EAAejb,EACZ,kBAACkb,GAAA,EAAD,CAAkBhb,MAAM,MAAMa,MAAM,YAAYoa,QAAS,kBAACC,GAAA,EAAD,QACzD,kBAACF,GAAA,EAAD,CAAkBhb,MAAM,OAAOa,MAAM,aAAaoa,QAAS,kBAACC,GAAA,EAAD,WAM5DE,GAzEiC,SAAC,GAG1C,IAFHzY,EAEE,EAFFA,OACA+D,EACE,EADFA,aAEMI,EAAUvB,KAEhB,OACI,kBAACwB,GAAA,EAAD,CACIC,WAAS,EACTI,UAAWN,EAAQ6I,KACnBvP,GAAIuC,EACJ0E,SAAUX,EACVnE,UAAU,OACV2E,UAAU,UAEV,kBAACH,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAChC,GAAA,EAAD,CACIhD,KAAK,QACLzB,MAAM,eACNM,QAAQ,WACRqG,WAAS,EACT6T,WAAS,KAIjB,kBAACtU,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACgU,GAAA,EAAD,CACI/Y,UAAWqY,GACXtY,KAAK,UAIb,kBAACyE,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACgU,GAAA,EAAD,CACI/Y,UAAW4Y,GACX7Y,KAAK,WAIb,kBAACyE,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACjF,GAAA,EAAD,CACInC,WAAW,kBACXC,eAAgB,SAACH,GAAD,yBAAuBA,EAAvB,WC/B9Bub,GAAWC,aAAiE,CAC9E3Y,KA7BY,oBA4BC2Y,EA1ByC,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eAAqB,EAEjEzK,KAFiE,oBAEhFpG,GAFgF,UAEhFA,WASZ,OAAO,kBAAC,GAAD,CAAoBlI,OAbf,mBAagC+D,aAAc+U,GAPvC,SAACE,GAChB,IAAMxY,GAAQwY,EAAWxY,MAAQ,IAAI5B,KAAI,SAAAC,GAAG,OAAIA,EAAIxB,SAEpD6K,EAAU,2BAAK8Q,GAAN,IAAkBxY,UAC3BuY,YCtBOE,GD4CAC,aAhBS,SAACnS,GACrB,IAAMvH,EAAS6H,EAAkBN,GAC3BvG,GAAQhB,EAAOgB,MAAQ,IAAI5B,KAAI,SAAAvB,GAAK,MAAK,CAC3CA,QACAa,MAAM,YAAD,OAAcb,OAGvB,MAAO,CACH8b,cAAc,2BAAM3Z,GAAP,IAAegB,YAQrB0Y,CAAyBN,IE5CzBQ,GCYiC,SAAC1W,GAC7C,IAAM2W,EAAaC,cAAqB,SAACxW,GAAD,OAAWA,EAAM+U,YAAY0B,KAAK,SAE1E,OACI,kBAAC5G,GAAA,EAAD,eAAQ6G,sBAAoB,EAACH,WAAYA,GAAgB3W,GACrD,kBAACkQ,GAAA,EAAD,qBACA,kBAACC,GAAA,EAAD,KACI,kBAACoG,GAAD,CAAgBF,eAAgBrW,EAAMwQ,WAE1C,kBAACH,GAAA,EAAD,KACI,kBAACC,GAAA,EAAD,CAAQC,QAASvQ,EAAMwQ,SAAvB,UAIA,kBAACF,GAAA,EAAD,CACI7S,KAAK,SACLD,KAAK,mBACL1B,QAAQ,YACRgF,MAAM,WAJV,iBCrBVZ,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFyM,SAAU,UACVjW,MAAO,gBAyBAkW,GArBQ,WACnB,IAAMvV,EAAUvB,KADS,EAEWiJ,IAAMQ,UAAS,GAF1B,oBAElBoI,EAFkB,KAENC,EAFM,KAIzB,OACI,oCACI,kBAAC1B,GAAA,EAAD,CACIvO,UAAWN,EAAQ6I,KACnB2M,UAAW,kBAAC,KAAD,MACX1G,QAAS,kBAAMyB,GAAc,KAHjC,UAOA,kBAAC,GAAD,CACIqB,KAAMtB,EACNvB,QAAS,kBAAMwB,GAAc,QCvB9BkF,GAFuB,CAAEC,qBAAsB,ICkBxDjX,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACF2C,OAAO,GAAD,OAAK7M,EAAMM,QAAQ,GAAnB,YAEV0W,cAAe,CACX3W,aAAa,IAAD,OAAML,EAAMM,QAAQwW,GAAUC,qBAAuB,KAArD,MACZpK,QAAS,OACTrC,WAAY,YAEhB2M,mBAAoB,CAChBN,SAAU,UACV7V,WAAY,UACZoW,SAAU,GAEdrV,KAAM,CACFgL,OAAO,GAAD,OAAK7M,EAAMM,QAAQwW,GAAUC,sBAA7B,iBA2ECI,GAvEqB,SAAC,GAK9B,IAJH3Y,EAIE,EAJFA,MACA4Y,EAGE,EAHFA,cACAC,EAEE,EAFFA,UACA7Z,EACE,EADFA,YAEM6D,EAAUvB,KAEV4U,EACF,kBAAC4C,GAAA,EAAD,CAAeC,eAAa,EAAC5V,UAAWN,EAAQ2V,eAC5C,kBAAClV,GAAA,EAAD,CAAYH,UAAWN,EAAQ4V,oBAA/B,SAGA,kBAAC,GAAD,OAsCR,OACI,oCACI,kBAACO,GAAA,EAAD,KACI,yCAEJ,kBAAC,GAAD,MACA,kBAACC,GAAA,EAAD,CAAWC,SAAS,KAAK/V,UAAWN,EAAQ6I,MAEpCmN,EACI,kBAAC,GAAD,CACI5C,cAAepT,EAAQQ,KACvB6S,UAAWA,IA7Cf,WAChB,GAAqB,IAAjBlW,EAAMyM,QAAuC,qBAAhBzN,EAC7B,OAAO,kBAAC,GAAD,MAGX,IAAMma,EACF,kBAACnE,GAAA,EAAD,CAAU7R,UAAWN,EAAQQ,MACzB,kBAACiP,GAAA,EAAD,CAAc8G,uBAAwB,CAAE9C,MAAO,WAA/C,gCACkCtX,EADlC,MAMFqa,EAAerZ,EAAM1C,KAAI,SAACgD,GAAD,OAC3B,kBAAC,GAAD,CACI6C,UAAWN,EAAQQ,KACnB/C,KAAMA,EACNf,IAAKe,EAAKnE,GACVoH,UAAWjD,EAAKnE,KAAOyc,OAI/B,OACI,kBAACzC,GAAA,EAAD,KACKD,EAEGlX,GAAgC,IAAjBgB,EAAMyM,OACjB0M,EACAE,GAmBAC,MCvGTC,GCGiD,SAAC,GAAuB,IAArBX,EAAoB,EAApBA,cAAoB,EAC3BpI,GAAS,CAAE1F,WAAW,IADK,oBAC5E9K,EAD4E,KACnEgR,EADmE,KACnEA,eADmE,OAC/ClS,EAD+C,EAC/CA,QAAS6R,EADsC,EACtCA,MADsC,EAE/D3D,KAAX/N,EAF0E,qBAE1EA,MAET,OACI,kBAAC,GAAD,CAAce,MAAOA,EACjBwZ,cAAexI,EACf4H,cAAeA,EACfC,UAAW/Z,EACX6R,MAAOA,EACP3R,YAAaC,KCSVwa,GAbE,WAAO,IAAD,EACI5O,KAAd5G,EADU,qBACVA,SACDwB,EAAUiU,eAAVjU,MAEFmT,EAAgBnT,EAAQA,EAAMmT,mBAAgBe,EAEpD,OAAI1V,EACO,kBAACsV,GAAD,CAAUX,cAAeA,IAG7B,kBAAC,KAAD,CAAUrJ,GAAIwE,GAASpQ,MAAMqQ,Q,oDCuBzB4F,GAhCsC,SAAC,GAG/C,IAFHvb,EAEE,EAFFA,KACAzB,EACE,EADFA,MACE,EACsC2N,IAAMQ,UAAS,GADrD,oBACK8O,EADL,KACmBC,EADnB,KAKF,OACI,kBAACzY,GAAA,EAAD,CACIxC,KAAMgb,EAAe,OAAS,WAC9Bjd,MAAOA,EACPyB,KAAMA,EACN0b,WAAY,CACRC,aACI,kBAACC,GAAA,EAAD,CAAgB5E,SAAS,OACrB,kBAAChB,GAAA,EAAD,CACI1C,QAXS,kBAAMmI,GAAiBD,KAc5BA,EACI,kBAAC,KAAD,MACA,kBAAC,KAAD,Y,oBClB9BvY,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CAEFwO,QAAS1Y,EAAMM,QAAQ,IAE3BJ,WAAY,CACRC,OAAQ,QAEZgP,MAAO,CACHwH,SAAU,SACVjW,MAAOiY,KAAI,KACXtY,aAAcL,EAAMM,QAAQ,SAqFrBsY,GAjFuB,SAAC,GAOhC,IANHnW,EAME,EANFA,SACAoW,EAKE,EALFA,YACA3b,EAIE,EAJFA,OACA+D,EAGE,EAHFA,aACA6X,EAEE,EAFFA,WACAC,EACE,EADFA,YAEM1X,EAAUvB,KAEhB,MAAoB,YAAhBiZ,GAA6BtW,EACtB,kBAAC,KAAD,CAAUsL,GAAIwE,GAASyG,KAAKxG,OAInC,yBAAK7Q,UAAWN,EAAQ6I,MACpB,kBAAC5I,GAAA,EAAD,CACIC,WAAS,EACTE,UAAU,SACV6I,WAAW,SACX5I,QAAQ,SACRpB,QAAS,EACTqB,UAAWN,EAAQnB,YAEnB,kBAACoB,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACC,GAAA,EAAD,CAAYpG,QAAQ,MAApB,UAKJ,kBAAC4F,GAAA,EAAD,CAAMO,MAAI,GACLiX,GACG,kBAAChX,GAAA,EAAD,CAAYH,UAAWN,EAAQ8N,OAA/B,IACM2J,GAGV,0BAAMne,GAAIuC,EAAQ0E,SAAUX,GACxB,kBAACK,GAAA,EAAD,CACIO,MAAI,EACJN,WAAS,EACTG,QAAQ,SACRmM,aAAa,eACbpM,UAAU,SACVnB,QAAS,EACTqB,UAAWN,EAAQnB,YAEnB,kBAACoB,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAChC,GAAA,EAAD,CAAehD,KAAK,WAAWzB,MAAM,WAAW2G,WAAS,KAE7D,kBAACT,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,GAAD,CAAehF,KAAK,WAAWzB,MAAM,iBAMrD,kBAACkG,GAAA,EAAD,CAAMO,MAAI,EAACN,WAAS,EAACG,QAAQ,UACzB,kBAACJ,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACwO,GAAA,EAAD,CACI/S,QAASub,EACTnd,QAAQ,YACRgF,MAAM,UACNrD,KAAK,SACLD,KAAMF,GALV,WAYR,kBAACoE,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACoX,GAAA,EAAD,CAASvd,QAAQ,cACjB,kBAACwU,GAAA,EAAD,CAAQpT,UAAWoR,KAAMH,GAAIwE,GAAS7P,SAAS8P,MAA/C,8BCxEL0G,GAzBiC,SAAC,GAG1C,IAFHH,EAEE,EAFFA,YACGI,EACD,+BACMlH,EAAoBC,eAApBD,gBADN,EAKwClJ,IAAMQ,UAAS,GALvD,oBAKK6P,EALL,KAKoBC,EALpB,KAMF,GAAIN,IAAgBK,EAAe,CAC/B,IAAME,EAAU,kBAAMD,GAAiB,IAEnB,YAAhBN,EACA9G,EACI,mDACA,CAAEvW,QAAS,UAAW4d,YAG1BrH,EAAgB,eAAgB,CAAEvW,QAAS,QAAS4d,YAI5D,OAAO,kBAAC,GAAD,eAAeP,YAAaA,GAAiBI,KC1BzCI,GCoDAxD,aAAsD,CACjE3Y,KA5CY,aA6CZiZ,cAAe,CACXmD,SAAU,WACVC,SAAU,aAJH1D,EAzCyC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAExC3M,KAFwC,oBAEjE5G,EAFiE,KAEjEA,SAAcN,EAFmD,KAEnDA,MAFmD,EAGtC4G,IAAMQ,UAAS,GAHuB,oBAGnEsP,EAHmE,KAGtDa,EAHsD,OAItC3Q,IAAMQ,cAA6B4O,GAJG,oBAInEW,EAJmE,KAIvDa,EAJuD,OAKpC5Q,IAAMQ,WAL8B,oBAKnEwP,EALmE,KAKtDa,EALsD,KAOpEC,EAAY,uCAAG,WAAOzX,GAAP,SAAAlE,EAAA,6DACjBiF,QAAQC,IAAI,kBAAmBhB,GAC/BsX,GAAa,GAFI,SAIXvX,EAAMC,GACPsH,KAAKoQ,GAAuB7W,IAC5ByG,MAAK,SAACzO,GACH2e,EAAe,cAElBhQ,OAAM,SAACmQ,GACuB,MAAvBA,EAAY5Y,OACZwY,EAAcI,EAAYxb,KAAKyb,SAE/BL,EAAc,qDAGlBC,EAAe,cAhBN,OAmBjBF,GAAa,GAnBI,2CAAH,sDAsBlB,OACI,kBAAC,GAAD,CACIjX,SAAUA,EACVsW,YAAaA,EACbD,WAAYA,EACZD,YAAaA,EACb3b,OArCI,aAsCJ+D,aAAc+U,EAAa6D,Q,SCvCjC/Z,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACF2C,OAAO,GAAD,OAAK7M,EAAMM,QAAQ,GAAnB,iBAiBC2Z,GAb6B,SAACra,GACzC,IAAMyB,EAAUvB,KAEhB,OACI,kBAAC2X,GAAA,EAAD,CAAWC,SAAS,KAAK/V,UAAWN,EAAQ6I,MACxC,kBAACsN,GAAA,EAAD,KACI,+CAEJ,kBAAC0C,GAAA,QAAD,iBAAkBta,EAAlB,CAAyBwB,eAAe,cAAchB,OAAO,mBC8B1D+Z,GA/BC,YAAiI,IAAnGC,EAAkG,EAAlGA,uBAAwBC,EAA0E,EAA1EA,uBAA0E,EAC1G9Q,mBAAqB,CAAEpI,OAAQ,YAD2E,oBACrIlE,EADqI,KAC1Hqd,EAD0H,OAElG/Q,oBAAS,GAFyF,oBAErI6P,EAFqI,KAEtHC,EAFsH,KAGpIpH,EAAoBC,eAApBD,gBAkBR,OAhBAjJ,qBAAU,WACFoQ,IAIqB,mBAArBnc,EAAUkE,SACV8Q,EAAgBmI,EAAwB,CAAE1e,QAAS,YACnD2d,GAAiB,IAGI,gBAArBpc,EAAUkE,SACV8Q,EAAgBoI,EAAwB,CAAE3e,QAAS,UACnD2d,GAAiB,OAEtB,CAACD,EAAenc,EAAWqd,EAAcrI,EAAiBmI,EAAwBC,IAE9E,CACHpd,EACA,CACIsd,qBAAsB,SAACC,GAAD,OAAgBF,EAAa,CAAEnZ,OAAQ,iBAAkBqZ,UAC/EC,kBAAmB,SAACtL,GAAD,OAAkBmL,EAAa,CAAEnZ,OAAQ,cAAegO,WAC3EuL,kBAAmB,kBAAMJ,EAAa,CAAEnZ,OAAQ,mBC/C7CwZ,GCiEA5E,aAAiE,CAC5E3Y,KAjDY,mBAkDZiZ,cAjDwC,CACxChX,MAAO,YAiDPub,SAAUzb,cAHC4W,EA3C+C,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,aAA0B,KAAZ7G,MAE/CH,MAF2D,oBAE3EpQ,GAF2E,UAE3EA,YAF2E,EAGtDub,GAAuB,CACpDC,uBAAwB,qCACxBC,uBAAwB,wBAL2D,oBAGhFpd,EAHgF,KAGrE4d,EAHqE,KA0BvF,GAAyB,mBAArB5d,EAAUkE,OAA6B,CACvC,IAAM2Z,EAAc7d,EAAUud,KAC9B,OAAO,kBAAC,KAAD,CAAUzM,GAAI,CACjBgN,SAAUxI,GAASyG,KAAKxG,KACxBvO,MAAO,CAAEmT,cAAe0D,GAAeA,EAAYngB,OAI3D,OACI,kBAAC,GAAD,eACIuC,OAzCI,mBA0CJ+D,aAAc+U,GA7BH,SAAC,GAAkD,IAC9DgF,EADctd,EAA+C,EAA/CA,KAASwY,EAAsC,wBAE7DxY,IACAsd,EAAatd,EAAK5B,KAAI,SAAAC,GAAG,OAAIA,EAAIxB,UAGrCsgB,EAAYH,oBACZ9b,EAAW,2BAAKsX,GAAN,IAAkBxY,KAAMsd,KAC7BtR,KAAKkF,GAAiBjK,IAEtB+E,MAAK,SAACoR,GACHD,EAAYN,qBAAqBO,MAEpClR,OAAM,SAACuF,GACJ0L,EAAYJ,kBAAkBtL,UAgB9BlS,O,UC9CV6C,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CAEFwO,QAAS1Y,EAAMM,QAAQ,IAE3BJ,WAAY,CACRC,OAAQ,QAEZgP,MAAO,CACHwH,SAAU,SACVjW,MAAOiY,KAAI,KACXtY,aAAcL,EAAMM,QAAQ,SAoFrB2a,GAhF6B,SAAC,GAMtC,IALHxY,EAKE,EALFA,SACAvF,EAIE,EAJFA,OACA+D,EAGE,EAHFA,aACAE,EAEE,EAFFA,OACO+Z,EACL,EADF/L,MAEM9N,EAAUvB,KAEhB,MAAe,mBAAXqB,GAA+BsB,EACxB,kBAAC,KAAD,CAAUsL,GAAIwE,GAASyG,KAAKxG,OAInC,yBAAK7Q,UAAWN,EAAQ6I,MACpB,kBAAC5I,GAAA,EAAD,CACIC,WAAS,EACTE,UAAU,SACV6I,WAAW,SACX5I,QAAQ,SACRpB,QAAS,EACTqB,UAAWN,EAAQnB,YAEnB,kBAACoB,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACC,GAAA,EAAD,CAAYpG,QAAQ,MAApB,mBAKJ,kBAAC4F,GAAA,EAAD,CAAMO,MAAI,GACLqZ,GACG,kBAACpZ,GAAA,EAAD,CAAYH,UAAWN,EAAQ8N,OAA/B,IACM+L,GAGV,0BAAMvgB,GAAIuC,EAAQ0E,SAAUX,GACxB,kBAACK,GAAA,EAAD,CACIO,MAAI,EACJN,WAAS,EACTG,QAAQ,SACRmM,aAAa,eACbpM,UAAU,SACVnB,QAAS,EACTqB,UAAWN,EAAQnB,YAEnB,kBAACoB,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAChC,GAAA,EAAD,CAAehD,KAAK,QAAQzB,MAAM,QAAQiC,KAAK,QAAQ0E,WAAS,KAEpE,kBAACT,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAChC,GAAA,EAAD,CAAehD,KAAK,WAAWzB,MAAM,cAEzC,kBAACkG,GAAA,EAAD,CAAMO,MAAI,GACN,kBAAC,GAAD,CAAehF,KAAK,WAAWzB,MAAM,iBAMrD,kBAACkG,GAAA,EAAD,CAAMO,MAAI,EAACN,WAAS,EAACG,QAAQ,UACzB,kBAAC3E,GAAA,EAAD,CACIE,UAAWkE,EACXjE,OAAQA,EACRxB,QAAQ,YACRgF,MAAM,WAJV,aAUJ,kBAACY,GAAA,EAAD,CAAMO,MAAI,GACN,kBAACoX,GAAA,EAAD,MACA,kBAAC/I,GAAA,EAAD,CAAQpT,UAAWoR,KAAMH,GAAIwE,GAASpQ,MAAMqQ,MAA5C,qB,oBChFLoI,GApBE,SAAC,GAA0D,IAAxDpB,EAAuD,EAAvDA,SAAU2B,EAA6C,EAA7CA,MAAO1B,EAAsC,EAAtCA,SAC3Bra,EAAyD,GAEzDgc,EAAiB,SAACve,EAA0BtC,GACzCA,IAAS+E,KAAUC,QAAQhF,KAC5B6E,EAAOvC,GAAP,UAAkBA,EAAlB,sBAYR,OARAue,EAAe,WAAY5B,GAC3B4B,EAAe,WAAY3B,GAC3B2B,EAAe,QAASD,IAEpBA,GAAU/b,EAAO+b,OAAU7b,KAAU+b,QAAQF,KAC7C/b,EAAO+b,MAAQ,yBAGZ/b,GCjBIkc,GC6CAvF,aAAwD,CACnE3Y,KApCY,qBAqCZwd,aAFW7E,EAjCuC,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAAmB,EAC3CmE,GAAmB,CAC5CC,uBAAwB,8BACxBC,uBAAwB,sCAH4C,oBACjEpd,EADiE,KACtDoI,EADsD,OAK9BgE,GAAW,CAAEC,WAAW,IALM,oBAK/D7G,EAL+D,KAK/DA,SAAcqH,EALiD,KAKjDA,cAkBvB,OACI,kBAAC,GAAD,eACIrH,SAAUA,EACVvF,OA5BI,qBA6BJ+D,aAAc+U,GApBH,SAACuF,GAChBlW,EAAQqV,oBAER5Q,EAAcyR,GACT7R,KAAKkF,GAAiBrL,IACtBmG,KAAKrE,EAAQkV,sBACb3Q,OAAM,YAAsC,IAAnCzI,EAAkC,EAAlCA,OAAQ5C,EAA0B,EAA1BA,KACRid,EAAe,+DACN,MAAXra,EACAkE,EAAQoV,kBAAkBlc,EAAOA,EAAKyb,QAAUwB,GAEhDnW,EAAQoV,kBAAkBe,UAU9Bve,O,UC/BV6C,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDwb,cAAe,CACXtb,OAAQ,OACR,QAAS,CACL0M,OAAQ7M,EAAMM,QAAQ,UA4BnBob,GAvByD,SAAC,GAGlE,IAFHC,EAEE,EAFFA,YACG/b,EACD,+BACIyB,EAAUvB,KAChB,OACI,kBAAC+P,GAAA,EAAD,eAAQ0G,YAAU,EAACG,sBAAoB,EAACkF,sBAAoB,GAAKhc,GAC7D,kBAACmQ,GAAA,EAAD,KACI,kBAACzO,GAAA,EAAD,CACIC,WAAS,EACTE,UAAU,SACVC,QAAQ,SACR4I,WAAW,SACX3I,UAAWN,EAAQoa,eAEnB,kBAACI,GAAA,EAAD,MACA,kBAAC7L,GAAA,EAAD,CAAmBtU,QAAQ,MAAMigB,GAAe,eCzB9D7b,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACF2C,OAAO,GAAD,OAAK7M,EAAMM,QAAQ,GAAnB,iBA0BCwb,GAtB2B,SAAC,GAA+C,IAA1B3a,EAAyB,EAA5C4a,gBAAmB5a,OAAavB,EAAY,mCAC/EyB,EAAUvB,KAEVkc,EAA0B,gBAAX7a,GAAuC,YAAXA,EAEjD,MAAe,SAAXA,EACO,sCAIP,oCACI,kBAACsW,GAAA,EAAD,CAAWC,SAAS,KAAK/V,UAAWN,EAAQ6I,MACxC,kBAACsN,GAAA,EAAD,KACI,6CAEJ,kBAAC0C,GAAA,QAAD,iBAAkBta,EAAlB,CAAyBwB,eAAe,eAAehB,OAAO,gBAElE,kBAAC,GAAD,CAAe6S,KAAM+I,EAAcL,YAAY,mBCgC5C5F,gBAAqD,CAChE3Y,KApDY,iBAqDZwd,SAAUqB,cAFClG,EAjDuC,SAAC,GAIhD,IAHHC,EAGE,EAHFA,aACArX,EAEE,EAFFA,OACAod,EACE,EADFA,gBACE,EAEwB/M,KAFxB,oBAEU/P,GAFV,UAEUA,UAFV,EAG+Bkb,GAAwB,CACrDC,uBAAwB,uBACxBC,uBAAwB,uBAL1B,oBAGKpd,EAHL,KAGgB4d,EAHhB,KA2BF,GAAyB,mBAArB5d,EAAUkE,OAA6B,CACvC,IAAM+a,EAAajf,EAAUud,KAC7B,OAAO,kBAAC,KAAD,CAAUzM,GAAI,CACjBgN,SAAUxI,GAASyG,KAAKxG,KACxBvO,MAAO,CAAEmT,cAAe8E,GAAcA,EAAWvhB,OAIzD,OACI,kBAAC,GAAD,eACIuC,OA3CI,iBA4CJ+D,aAAc+U,GA9BH,SAAC,GAA4C,IACxDgF,EADctd,EAAyC,EAAzCA,KAASwY,EAAgC,wBAEvDxY,IACAsd,EAAatd,EAAK5B,KAAI,SAAAC,GAAG,OAAIA,EAAIxB,UAGrCsgB,EAAYH,oBACZzb,EAAS,2BAAKiX,GAAN,IAAkBvb,GAAIgE,EAAQjB,KAAMsd,KACvCtR,KAAKkF,GAAiB7J,IAEtB2E,MAAK,SAACwS,GACH/Y,QAAQC,IAAI,CAAE8Y,eACdrB,EAAYN,qBAAqB2B,MAEpCtS,OAAM,SAACuF,GACJ0L,EAAYJ,kBAAkBtL,SAgBlC4M,gBAAiBA,GACb9e,OCjCDkf,GAZO,WAAoD,IAAD,EAC3C5S,mBAA4B,CAAEpI,OAAQ,gBADK,oBAC9D8C,EAD8D,KACvDmY,EADuD,KAGrE,MAAO,CACHnY,EAAO,CACHoY,WAAY,kBAAMD,EAAS,CAAEjb,OAAQ,UAAWgO,WAAOgJ,EAAWqC,UAAMrC,KACxEmE,WAAY,SAAC9B,GAAD,OAAU4B,EAAS,CAAEjb,OAAQ,UAAWqZ,OAAMrL,WAAOgJ,KACjEoE,WAAY,SAACpN,GAAD,OAAWiN,EAAS,CAAEjb,OAAQ,OAAQgO,QAAOqL,UAAMrC,QCH9D5F,GAAsB,CAC/ByG,KAAM,CACFxG,KAAM,IACN1V,UAAWmb,GACXuE,OAAO,GAEXra,MAAO,CACHqQ,KAAM,SACN1V,UAAWyc,GACXiD,OAAO,GAEX9Z,SAAU,CACN8P,KAAM,YACN1V,UAAWwe,GACXkB,OAAO,GAEX5d,WAAY,CACR4T,KAAM,aACN1V,UAAW2f,GACXD,OAAO,GAEXvd,SAAU,CACNuT,KAAM,sBACN1V,UC/B2B,WAAO,IAAD,EACwBqf,KADxB,oBAC9BO,EAD8B,YAChBJ,EADgB,EAChBA,WAAYC,EADI,EACJA,WAAYF,EADR,EACQA,WACrC1d,EAAWge,eAAXhe,OAERoK,IAAMC,WAAU,WAAM,4CAClB,sBAAA9K,EAAA,6DACIme,IADJ,SAEU3d,sBAAYC,GACb+K,MAAK,SAAC5K,GAAD,OAAUwd,EAAWxd,QAAcqZ,MACxCvO,MAAM2S,GAJf,4CADkB,sBAQQ,gBAAtBG,EAAWvb,QARI,WAAD,wBASdyb,KAGL,CAACje,EAAQ+d,EAAYL,EAAYE,EAAYD,IAgBhD,OACI,kBAAC,GAAD,CACI3d,OAAQA,EACR0X,cAhBiB,WACrB,IAAMvX,EAAO4d,EAAWlC,KACxB,GAAI1b,EACA,OAAO,2BACAA,GADP,IAEIpB,KAAMoB,EAAKpB,KAAK5B,KAAI,SAAAvB,GAAK,MAAK,CAC1Ba,MAAM,gBAAD,OAAkBb,EAAlB,KACLA,cASOsiB,GACfd,gBAAiBW,KDJrBF,OAAO,IEzCAM,GF6CAvgB,OAAOC,OAAe+V,I,mDGhC/BzS,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjD8c,WAAY,CACRC,YAAahd,EAAMM,QAAQ,IAE/BkZ,SAAU,CACN1Y,WAAYd,EAAMQ,WAAWiL,qBAsCtBwR,GAlCkC,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YACzD9b,EAAUvB,KADiE,EAExCuJ,KAFwC,2BAExE9G,EAFwE,EAExEA,KAAME,EAFkE,EAElEA,SAAcJ,EAFoD,KAEpDA,OAE7B,IAAKI,EACD,OAAO,KAGX,IAAM+W,EAAWjX,GAAQA,EAAKiX,SAE9B,OACI,kBAACvI,GAAA,EAAD,CACIiC,aAAW,EACXvY,GAAG,eACHwY,SAAU+J,EACVhM,mBAAoB,KACpBC,aAAc,CAAEC,SAAU,SAAUC,WAAY,UAChDC,gBAAiB,CAAEF,SAAU,MAAOC,WAAY,UAChD4B,KAAMtC,QAAQuM,GACd9M,QAAS+M,GAET,kBAACvM,GAAA,EAAD,KACI,kBAAC9O,GAAA,EAAD,CAAYH,UAAWN,EAAQ0b,YAA/B,iBACA,kBAACjb,GAAA,EAAD,CAAYH,UAAWN,EAAQmY,SAAU4D,QAAM,GAC1C5D,GAAsB,MAG/B,kBAACP,GAAA,EAAD,MACA,kBAACrI,GAAA,EAAD,CAAUT,QAAS9N,GAAnB,YCdGgb,GAhCO,WAAM,MAE4BhU,KAF5B,oBAEjB1F,EAFiB,KAEM2Z,GAFN,UAEHhgB,SAFG,EAG0ByL,IAAMQ,SAA6B,MAH7D,oBAGjBgU,EAHiB,KAGEC,EAHF,KAexB,OAAIF,IAAqB3Z,EAAQlB,SACtB,KAIP,oCACI,kBAACoQ,GAAA,EAAD,CAAY1C,QAhBA,SAAC4C,GACjB5P,QAAQC,IAAI,SACZoa,EAAqBzK,EAAMC,iBAenB,kBAAC,KAAD,CAAa2D,SAAS,WAE1B,kBAAC,GAAD,CACIuG,cAAeK,EACfJ,YAhBQ,WAChBha,QAAQC,IAAI,SACZoa,EAAqB,WCZvBC,GAAmD,SAAC7d,GACtD,OAAO,kBAACsQ,GAAA,EAAD,eAAQpT,UAAW4gB,MAAa9d,KAuB5B+d,GApBK,WAAM,MAE8BtU,KAF9B,oBAEf1F,EAFe,KAEQ2Z,GAFR,UAEDhgB,SAErB,OAAIqG,EAAQlB,UAAY6a,EACb,KAIP,oCACI,kBAAC,GAAD,CAAYvP,GAAIwE,GAASpQ,MAAMqQ,KAAM9W,QAAQ,QAA7C,SAGA,kBAAC,GAAD,CAAYqS,GAAIwE,GAAS7P,SAAS8P,KAAM9W,QAAQ,YAAhD,c,0CCeGkiB,GA9BO,WAAO,IAAD,EACkBhV,KADlB,oBACjBjC,EADiB,KACFG,EADE,KACFA,eAChB+W,EAA8B,SAAhBlX,EAkBd6J,EAfEqN,EACOC,KAGJC,KAYX,OACI,kBAACnL,GAAA,EAAD,CAASvT,MAAM,2BACX,kBAACwT,GAAA,EAAD,CAAY1C,QAXA,WAChB,GAAI0N,EACA,OAAO/W,EAAe,SAG1BA,EAAe,UAOP,kBAAC0J,EAAD,CAAMmG,SAAS,aCtBzBqH,GAAmB,CACrBtd,MAAO,UACPgL,eAAgB,OAChB,UAAW,CACPhL,MAAO,UACPgL,eAAgB,QAEpBE,QAAS,GAGP9L,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACFgN,SAAU,EACV,qBAAsB,CAClBtC,KAAM5U,EAAMW,QAAQ4E,QAAQG,eAGpCrG,MAAM,yBACF6X,SAAU,GACP8G,IAFF,IAGD,UAAU,2BACHA,GAAiB,YADxB,IAEItd,MAAOud,KAAK,OAEhBtS,WAAY,uBAEhBuS,OAAQF,QAyBGG,GAtBA,WACX,IAAM9c,EAAUvB,KAEhB,OACI,kBAAC,KAAD,CAAgB6B,UAAWN,EAAQ6I,MAC/B,kBAACkU,GAAA,EAAD,KACI,kBAACtc,GAAA,EAAD,CACIpG,QAAQ,KACRiG,UAAWN,EAAQhC,MACnBvC,UAAW4gB,KACX3P,GAAIwE,GAASyG,KAAKxG,MAJtB,oBAQA,kBAAC,GAAD,MACA,kBAAC6L,GAAD,MACA,kBAAC,GAAD,SCzCDC,GAVe,SAAC,GAAkB,IAAhBthB,EAAe,EAAfA,SAC7B,OACI,oCACI,kBAAC,GAAD,MACA,kBAACohB,GAAA,EAAD,MACCphB,ICFP8C,GAAYC,cAAW,SAACC,GAAD,OAAWC,aAAa,CACjDiK,KAAM,CACF/J,OAAQ,OACRuY,QAAS1Y,EAAMM,QAAQ,SAoBhBie,GAhBM,WACjB,IAAMld,EAAUvB,KAChB,OACI,kBAACwB,GAAA,EAAD,CACIC,WAAS,EACTE,UAAU,SACVC,QAAQ,SACRC,UAAWN,EAAQ6I,MAEnB,kBAACpI,GAAA,EAAD,CAAYpG,QAAQ,MAApB,SACA,kBAACoG,GAAA,EAAD,CAAY4K,WAAS,GAArB,mDACA,kBAAC,GAAD,CAAgBqB,GAAIwE,GAASyG,KAAKxG,MAAlC,kBChBNgM,GAAa,WAGf,OAFoBnV,GAAW,CAAEC,WAAW,IAAQ,GAA5ChM,QAGG,kBAAC,GAAD,MAIP,kBAAC,KAAD,KACI,kBAAC,GAAD,KACI,kBAAC,KAAD,KACKwf,GAAOhhB,KAAI,SAAA2iB,GAAK,OAAI,kBAAC,KAAD,iBAAWA,EAAX,CAAkB1gB,IAAK0gB,EAAMjM,WAClD,kBAAC,KAAD,CAAOA,KAAK,IAAI1V,UAAWyhB,SCpBhCG,GD2BH,WACR,OACI,oCACI,kBAAClH,GAAA,EAAD,CACImH,cAAc,wBACdC,aAAa,qBAEjB,kBAAC,GAAD,QErBZC,IAASC,OACL,kBAAC,IAAD,CAAe/W,MAAOA,IAClB,kBAAC,GAAD,KACI,kBAAC,KAAD,KACI,kBAACgX,GAAA,EAAD,MACA,kBAAC,GAAD,SAIZC,SAASC,eAAe,U,sFCdtBC,EAAiE,SAAC,GAKjE,IAJH7kB,EAIE,EAJFA,MAIE,IAHFmgB,KAAQ2E,EAGN,EAHMA,QAAShQ,EAGf,EAHeA,MACjB/T,EAEE,EAFFA,MACGgkB,EACD,wCACIC,EAAWF,GAAWhQ,EAE5B,OACI,oCACI,kBAAC,IAAD,eACIyG,WAAS,EACTxa,MAAOA,EACP+T,MAAOkQ,GACHD,EACA/kB,IAEPglB,GAAY,kBAAC,IAAD,CAAY3e,MAAM,SAASyO,KAmBrCtP,IAdsC,SAAC,GAK/C,IAJHhD,EAIE,EAJFA,KACAzB,EAGE,EAHFA,MAEGgkB,GACD,EAFFpiB,SAEE,4CACF,OAAO,kBAAC,IAAD,eACHF,UAAWoiB,EACXriB,KAAMA,EACNzB,MAAOA,GACHgkB,M,gCC1CZ,ic,gCCAA,yEAKepe,YAAf,G,gCCLA,kCAYO,IAAMvC,EAAe,SAAC+D,GACzB,MAAO,CACH7H,GAAI6H,EAAI,IACRnD,MAAOmD,EAAI,MACX8c,OAAQ9c,EAAI,OACZhD,KAAMgD,EAAI,KACViK,QAASjK,EAAI,QACb9E,KAAM8E,EAAI,KACVoL,UAAW,IAAI2R,KAAK/c,EAAI,WACxBgd,UAAW,IAAID,KAAK/c,EAAI,c,gGCX1B1C,EAAYC,aAAW,SAACC,GAAD,OAAWC,YAAa,CACjDwf,UAAW,CACPzC,YAAahd,EAAMM,QAAQ,KAC3B8N,cAAe,eAmBRiC,IAfsC,SAAC,GAI/C,IAAD,IAHF/S,eAGE,SAFFN,EAEE,EAFFA,SACGG,EACD,sCACIkE,EAAUvB,IAEhB,OACI,kBAAC,IAAD,iBAAY3C,EAAZ,CAAyBuiB,SAAUpiB,IAC9BA,GAAW,kBAAC,IAAD,CAAkBqiB,UAAW,EAAGpS,KAAM,GAAI5L,UAAWN,EAAQoe,YACxEziB,M","file":"static/js/main.1051e972.chunk.js","sourcesContent":["import React from 'react'\nimport { Field, WrappedFieldProps } from 'redux-form'\n\nimport TextField from '@material-ui/core/TextField'\nimport Chip from '@material-ui/core/Chip'\nimport AutoComplete, { AutocompleteRenderInputParams } from '@material-ui/lab/Autocomplete'\n\nexport interface IPostTag {\n    value: string\n    label: string\n}\n\ninterface ISelectPostTagsProps {\n    fieldLabel?: string\n    getOptionLabel?: ValueCallback<IPostTag['value'], IPostTag['label']>\n}\n\ntype IRenderSelectProps = ISelectPostTagsProps & WrappedFieldProps\n\nconst renderSelect = ({\n    input: {\n        value: currentValue,\n        onChange\n    },\n    fieldLabel,\n    getOptionLabel\n}: IRenderSelectProps) => {\n    return (\n        <AutoComplete<IPostTag, true>\n            id=\"tags-outlined\"\n            multiple\n            selectOnFocus\n            clearOnBlur\n            options={[]}\n            filterOptions={(_, { inputValue }) => {\n                const filtered: IPostTag[] = []\n                if (inputValue !== '') {\n                    const label = getOptionLabel ?\n                        getOptionLabel(inputValue) :\n                        `Create tag \"${inputValue}\"`\n\n                    filtered.push({\n                        value: inputValue.trim(),\n                        label\n                    })\n                }\n\n                return filtered\n            }}\n            getOptionLabel={(option) => option.label}\n            renderInput={(params: AutocompleteRenderInputParams) => (\n                <TextField\n                    {...params}\n                    variant=\"outlined\"\n                    label={fieldLabel || \"Create Tags\"}\n                    placeholder=\"Tags\"\n                />\n            )}\n            renderTags={(value, getTagProps) => value.map((tag, index) => {\n                return (\n                    <Chip\n                        label={tag.value}\n                        {...getTagProps({ index })}\n                    />\n                )\n            })}\n            onChange={(_, newValue, reason, details) => {\n                if (!Array.isArray(newValue)) {\n                    return null\n                }\n\n                if (reason === 'create-option' || reason === 'select-option') {\n                    // Only unique tags allowed\n                    const unique: { [k: string]: IPostTag } = {}\n                    for (let tag of newValue) {\n                        unique[tag.value] = tag\n                    }\n\n                    onChange(Object.values(unique))\n                }\n\n                if (reason === 'remove-option' && details) {\n                    const toRemove = details.option\n                    const filtered = currentValue.filter((val: IPostTag) => {\n                        return val.value !== toRemove.value\n                    })\n\n                    onChange(filtered)\n                }\n            }}\n            value={currentValue || []}\n        />\n    )\n}\n\nconst SelectPostTags: React.FC<ISelectPostTagsProps> = ({\n    fieldLabel,\n    getOptionLabel\n}) => {\n    return (\n        <Field\n            name='tags'\n            component={renderSelect}\n            fieldLabel={fieldLabel}\n            getOptionLabel={getOptionLabel}\n        />\n    )\n}\n\nexport default SelectPostTags\n","import React from 'react'\nimport LoadingButton from './LoadingButton'\nimport { IFormStatus } from '../hooks/useForm'\nimport { ButtonProps } from '@material-ui/core'\n\ninterface IFormSubmitButtonProps {\n    formState: IFormStatus\n    formId: string\n}\n\nconst FormSubmitButton: React.FC<IFormSubmitButtonProps & ButtonProps> = ({\n    children,\n    formState,\n    formId,\n    ...buttonProps\n}) => {\n    return (\n        <LoadingButton\n            form={formId}\n            type='submit'\n            loading={formState === 'submitting'}\n            {...buttonProps}\n        >\n            {children}\n        </LoadingButton>\n    )\n}\n\nexport default FormSubmitButton","import axios from \"../axios\";\nimport PostModel, { postFromJson } from \"../../store/models/PostModel\";\n\nexport interface IGetPostsOpts {\n    query?: string\n    tags?: string\n    sort?: string\n    order?: string\n}\n\nfunction buildQuery({\n    query: searchQuery,\n    tags,\n    sort,\n    order\n}: IGetPostsOpts) {\n    const reqQuery: any = {}\n    if (searchQuery) {\n        reqQuery.query = searchQuery\n    }\n\n    if (sort) {\n        reqQuery.sort = sort\n    }\n\n    if (order) {\n        reqQuery.order = order\n    }\n\n    if (tags) {\n        reqQuery.tags = tags\n    }\n\n    return Object.keys(reqQuery).map(key => `${key}=${reqQuery[key]}`).join('&')\n}\n\nexport const getPosts = async (opts: IGetPostsOpts = {}): Promise<PostModel[]> => {\n    const { data: responseData } = await axios.get(`/api/posts?${buildQuery(opts)}`)\n\n    return responseData.posts.map(postFromJson)\n}\n\nexport const getPostById = async (postId: string): Promise<PostModel | null> => {\n    const { data } = await axios.get(`/api/posts/${postId}`)\n\n    return postFromJson(data)\n}","import PostModel, { postFromJson } from \"../../store/models/PostModel\"\nimport axios from \"../axios\"\nimport { IPostData } from \"./shared\"\n\nexport const createPost = async (postData: IPostData): Promise<PostModel | null> => {\n    const { data } = await axios.post(`/api/posts/`, postData)\n\n    return postFromJson(data)\n}","import axios from \"../axios\"\n\nexport const deletePost = async (postId: string) => axios.delete(`/api/posts/${postId}`)","import PostModel, { postFromJson } from \"../../store/models/PostModel\"\nimport axios from \"../axios\"\nimport { IPostData } from \"./shared\"\n\nexport const editPost = async (id: string, postData: IPostData): Promise<PostModel | null> => {\n    const { data } = await axios.put(`/api/posts/${id}`, postData)\n\n    return postFromJson(data)\n}","import { IPostFormData } from \"./typings\";\n\nimport validator from 'validator'\n\ntype ErrorMap = {\n    [k in keyof IPostFormData]: string\n}\n\nexport default function createPostFormValidator(values: IPostFormData): ErrorMap {\n    const errors = {} as ErrorMap\n    if (typeof values.title === 'string' && validator.isEmpty(values.title)) {\n        errors.title = 'Title is required'\n    }\n\n    if (values.link && !validator.isEmpty(values.link.trim())) {\n        if (!validator.isURL(values.link, { require_protocol: true })) {\n            errors.link = 'If provided, must be an url'\n        }\n    }\n\n    return errors\n}","export * from './PostForm-VIew'\nexport * from './PostFormData'","import React from 'react'\nimport TextFormField, { ITextFormFieldProps } from './TextFormField'\n\nconst OutlinedTextFormField: React.FC<ITextFormFieldProps> = (props) => {\n    return <TextFormField {...props} variant='outlined' />\n}\n\nexport default OutlinedTextFormField\n","import React from 'react'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport FormSubmitButton from '../../components/FormSubmitButton'\nimport SelectPostTags from '../../components/SelectPostTags'\nimport OutlinedTextFormField from '../../components/form-fields/OutlinedTextFormField'\nimport { IPostFormView } from './typings'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    fullHeight: {\n        height: '100%'\n    },\n    header: {\n        marginBottom: theme.spacing(4)\n    },\n    subtitle: {\n        ...theme.typography.subtitle2,\n        color: theme.palette.text.secondary,\n        fontWeight: theme.typography.fontWeightRegular\n    }\n}))\n\nconst PostFormView: IPostFormView = ({\n    formId,\n    onFormSubmit,\n    status: formStatus,\n    formActionText,\n    header\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Grid\n            container\n            wrap='wrap'\n            direction='column'\n            justify='center'\n            spacing={4}\n            className={classes.fullHeight}\n            component='form'\n            id={formId}\n            onSubmit={onFormSubmit}\n        >\n            <Grid item container direction='column' className={classes.header}>\n                <Grid item>\n                    <Typography variant='h4'>\n                        {header}\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <Typography className={classes.subtitle}>\n                        Required items are marked with *\n                        </Typography>\n                </Grid>\n            </Grid>\n\n            <Grid item>\n                <OutlinedTextFormField name='title' label='Title' autoFocus required />\n            </Grid>\n            <Grid item>\n                <OutlinedTextFormField name='link' label='Link' />\n            </Grid>\n            <Grid item>\n                <OutlinedTextFormField name='comment' label='Comment' />\n            </Grid>\n            <Grid item>\n                <SelectPostTags />\n            </Grid>\n            <Grid item>\n                <FormSubmitButton\n                    formId={formId}\n                    formState={formStatus}\n                    color='primary'\n                    variant='contained'\n                >\n                    {formActionText}\n                </FormSubmitButton>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default PostFormView","import axios from 'axios'\n\nexport default axios.create({ withCredentials: true })","import axios from '../axios'\n\nconst login = (loginData: LoginData) => {\n    return axios.post('/api/auth/login', loginData)\n}\n\nexport default login","import axios from '../axios'\n\nconst logout = () => {\n    return axios.post('/api/auth/logout')\n}\n\nexport default logout","import axios from '../axios'\nimport AccountModel, { accountFromJson } from '../../store/models/AccountModel'\n\nconst status = async (): Promise<AccountModel> => {\n    const response = await axios.get('/api/auth/status')\n    return accountFromJson(response.data)\n}\n\nexport default status","import UserModel from \"./UserModel\";\n\ninterface AccountModel {\n    user?: UserModel\n    loggedIn: boolean\n}\n\nexport const accountFromJson = (json: any): AccountModel => {\n    return {\n        user: json['user'],\n        loggedIn: json['loggedIn']\n    }\n}\n\nexport default AccountModel","import axios from '../axios'\n\nconst register = (accountData: LoginData) => {\n    return axios.post('/api/auth/register', accountData)\n}\n\nexport default register","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport AccountModel from \"../../../models/AccountModel\";\n\nconst updateAccountAsync = createAsyncThunk<AccountModel>('updateAccountAsync', auth.status)\n\nexport default updateAccountAsync","import { AxiosError } from \"axios\";\n\nexport default function simplifyAxiosError({ response }: AxiosError): SimplifiedAxiosResponse | undefined {\n    if (!response) {\n        return \n    }\n\n    return {\n        data: response.data,\n        status: response.status,\n        statusText: response.statusText\n    }\n}","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport { simplifyAxiosError } from \"../../../../utils\";\n\nconst loginAsync = createAsyncThunk<any, LoginData>('loginAsync', async (loginData, thunkApi) => {\n    try {\n        return (await auth.login(loginData)).data\n    } catch (err) {\n        console.log('Login Error: ', err)\n        console.log('Response: ', err.response)\n        return thunkApi.rejectWithValue(simplifyAxiosError(err))\n    }\n})\n\nexport default loginAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\n\nconst logoutAsync = createAsyncThunk('logoutAsync', auth.logout)\n\nexport default logoutAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { auth } from \"../../../../api\";\nimport { simplifyAxiosError } from \"../../../../utils\";\n\nconst createAccountAsync = createAsyncThunk<any, RegisterData>(\n    'createAccountAsync',\n    async (accountData, thunkApi) => {\n        try {\n            return (await auth.register(accountData)).data\n        } catch (err) {\n            console.log('Register Error: ', err)\n            console.log('Response: ', err.response)\n            return thunkApi.rejectWithValue(simplifyAxiosError(err))\n        }\n    }\n)\n\nexport default createAccountAsync","import { createSlice, SliceCaseReducers } from '@reduxjs/toolkit'\nimport AccountState from './AccountState'\nimport { updateAccountAsync } from './actions'\n\nconst initialState: AccountState = { account: { loggedIn: false } }\n\nconst accountSlice = createSlice<AccountState, SliceCaseReducers<AccountState>>({\n    name: 'account-slice',\n    initialState: initialState,\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(updateAccountAsync.fulfilled, (state, action) => {\n            state.account = action.payload\n        })\n    }\n})\n\nexport const reducer = accountSlice.reducer","import { createEntityAdapter } from \"@reduxjs/toolkit\";\nimport PostModel from \"../../models/PostModel\";\n\nconst postsAdapter = createEntityAdapter<PostModel>()\n\nexport default postsAdapter","import AccountState from \"./AccountState\";\nimport { reducer } from \"./account-slice\";\nimport * as actions from './actions'\n\nexport { reducer, actions }\nexport default AccountState","import { Selector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store\";\nimport FilterState from \"./FilterState\";\n\nexport const selectFilterState: Selector<RootState, FilterState> = (state) => state.filter","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { posts } from \"../../../../api\";\nimport PostModel from \"../../../models/PostModel\";\nimport { selectFilterState } from \"../../filter-state/filter-selectors\";\nimport { RootState } from \"../../../store\";\nimport FilterState from \"../../filter-state/FilterState\";\n\nconst getAllPostsAsync = createAsyncThunk<\n    PostModel[],\n    FilterState | undefined,\n    { state: RootState }\n>('getAllPostsAsync', (filterState, { getState }) => {\n    const filter = filterState || selectFilterState(getState())\n    const { query, sort, order, tags } = filter\n\n    return posts.getPosts({\n        query,\n        sort,\n        order,\n        tags: (tags || []).map(tag => tag).join(',')\n    })\n})\n\nexport default getAllPostsAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createPost, IPostData } from \"../../../../api/posts\";\nimport PostModel from \"../../../models/PostModel\";\n\nconst createPostAsync = createAsyncThunk<PostModel | null, IPostData>(\n    'createPostAsync',\n    createPost\n)\n\nexport default createPostAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { posts } from \"../../../../api\";\n\nconst deletePostAsync = createAsyncThunk<string, string>(\n    'deletePostAsync',\n    async (postId) => {\n        try {\n            await posts.deletePost(postId)\n            return postId\n        } catch (err) {\n            return Promise.reject(err)\n        }\n    }\n)\n\nexport default deletePostAsync","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { IPostData, editPost } from \"../../../../api/posts\";\n\nconst editPostAsync = createAsyncThunk<void, IPostData & { id: string }>(\n    'editPostAsync',\n    async ({ id, ...post }) => {\n        try {\n            await editPost(id, post)\n        } catch (err) {\n            return Promise.reject(err)\n        }\n    }\n)\n\nexport default editPostAsync","import { createSlice, SliceCaseReducers } from \"@reduxjs/toolkit\";\nimport PostsState from \"./PostsState\";\nimport postsAdapter from \"./posts-adapter\";\nimport { getAllPostsAsync, deletePostAsync } from './actions'\n\nconst postsSlice = createSlice<PostsState, SliceCaseReducers<PostsState>>({\n    name: 'posts-slice',\n    initialState: postsAdapter.getInitialState(),\n    reducers: {},\n    extraReducers: builder => {\n        builder.addCase(getAllPostsAsync.fulfilled, postsAdapter.setAll)\n        builder.addCase(deletePostAsync.fulfilled, postsAdapter.removeOne)\n    }\n})\n\nexport const reducer = postsSlice.reducer","import { createSlice, SliceCaseReducers } from \"@reduxjs/toolkit\";\nimport FilterState, { initialState } from \"./FilterState\";\n\nconst filterSlice = createSlice<FilterState, SliceCaseReducers<FilterState>>({\n    name: 'post-filters',\n    initialState,\n    reducers: {\n        setFilter: (_, action) => action.payload\n    }\n})\n\nexport const { setFilter } = filterSlice.actions\nexport const { reducer, actions } = filterSlice","import { reducer } from \"./posts-slice\";\nimport PostsState from \"./PostsState\";\n\nexport { reducer }\nexport default PostsState","export type FilterSortTechnique = 'title' | 'date'\nexport type FilterSortOrder = 'asc' | 'desc'\n\ninterface FilterState {\n    query?: string\n    sort: FilterSortTechnique\n    order: FilterSortOrder\n    tags: string[]\n}\n\nexport const initialState: FilterState = {\n    sort: 'title',\n    order: 'asc',\n    tags: []\n}\n\nexport default FilterState","import { createMuiTheme } from '@material-ui/core/styles'\nimport { purple, deepOrange } from '@material-ui/core/colors'\nimport { PaletteOptions } from '@material-ui/core/styles/createPalette'\n\nconst commonPalette: PaletteOptions = {\n    primary: {\n        main: purple[500],\n        contrastText: '#fff'\n    },\n    secondary: {\n        main: deepOrange[500]\n    }\n}\n\nexport const darkTheme = createMuiTheme({\n    palette: {\n        ...commonPalette,\n        type: 'dark',\n        background: {\n            default: '#121212',\n            paper: '#0e0e0e',\n        },\n        text: {\n            primary: '#fff'\n        },\n        action: {\n            focus: '#f00'\n        }\n    }\n})\n\nexport const lightTheme = createMuiTheme({\n    palette: {\n        ...commonPalette,\n        type: 'light'\n    }\n})","import { IAppTheme } from \"../store/states/theme-state/ThemeState\"\n\nconst kLocalStorageThemeKey = 'personal-archive-theme'\n\nconst persistTheme = {\n    setTheme: (theme: IAppTheme) => {\n        localStorage.setItem(kLocalStorageThemeKey, theme)\n    },\n    clearTheme: () => {\n        localStorage.removeItem(kLocalStorageThemeKey)\n    },\n    getTheme: (): IAppTheme | null => {\n        const theme = localStorage.getItem(kLocalStorageThemeKey)\n        // Only load applicable theme\n        if (theme === 'dark' || theme === 'light') {\n            return theme\n        }\n\n        return null\n    }\n}\n\nexport default persistTheme","import { lightTheme, darkTheme } from './theme'\nimport persistTheme from './persist-theme'\n\nexport { lightTheme, darkTheme }\nexport const { getTheme, setTheme, clearTheme } = persistTheme","import { createSlice, SliceCaseReducers, PayloadAction } from \"@reduxjs/toolkit\";\nimport { ThemeState } from \"./ThemeState\";\nimport { getTheme as getStoredTheme } from \"../../../theme\";\n\nconst initialState: ThemeState = {\n    activeTheme: getStoredTheme() || 'dark'\n}\n\nconst themeSlice = createSlice<ThemeState, SliceCaseReducers<ThemeState>>({\n    name: 'theme-state',\n    initialState,\n    reducers: {\n        setActiveTheme: (_, action: PayloadAction<ThemeState['activeTheme']>) => ({\n            activeTheme: action.payload\n        })\n    }\n})\n\nexport const themeReducer = themeSlice.reducer\n\nexport const { setActiveTheme } = themeSlice.actions","import { RootState } from \"../../store\";\nimport { Selector, createSelector } from \"@reduxjs/toolkit\";\nimport ThemeState from \".\";\n\nexport const selectThemeState: Selector<RootState, ThemeState> = (state) => state.theme\n\nexport const selectActiveTheme: Selector<\n    RootState,\n    ThemeState['activeTheme']\n> = createSelector<RootState, ThemeState, ThemeState['activeTheme']>(\n    selectThemeState,\n    (themeState) => themeState.activeTheme\n)","import { ThemeState } from './ThemeState'\n\nexport default ThemeState\nexport * from './theme-slice'\nexport * from './theme-selectors'","import { AsyncThunk } from \"@reduxjs/toolkit\";\n\nconst asyncMatchFulfilled = (asyncAction: AsyncThunk<any, any, any>, action: any) =>\n    asyncAction.fulfilled.match(action)\n\nexport default asyncMatchFulfilled","import monitorLoginMiddleware from \"./monitor-login\";\n\nexport default [monitorLoginMiddleware]","import { loginAsync, logoutAsync, updateAccountAsync, createAccountAsync } from '../actions'\nimport { asyncMatchFulfilled } from \"../../../utils\";\nimport { ThunkMiddleware } from \"../../../@types/thunk-middleware\";\n\nconst monitorLoginMiddleware: ThunkMiddleware = (api) => (next) => (action) => {\n    const hasLoggedIn = asyncMatchFulfilled(loginAsync, action)\n    const hasLoggedOut = asyncMatchFulfilled(logoutAsync, action)\n    const hasRegistered = asyncMatchFulfilled(createAccountAsync, action)\n\n    if (hasLoggedIn || hasLoggedOut || hasRegistered) {\n        api.dispatch(updateAccountAsync())\n    }\n\n    next(action)\n}\n\nexport default monitorLoginMiddleware","import onFilterChange from './monitor-posts-filter'\n\nexport default [onFilterChange]","import { Middleware, ThunkDispatch, AnyAction } from \"@reduxjs/toolkit\";\n\nimport { setFilter } from \"../../filter-state/filter-slice\";\nimport { getAllPostsAsync } from \"../actions\";\n\ntype Dispatch = ThunkDispatch<any, {}, AnyAction>\nconst onFilterChange: Middleware<{}, any, Dispatch> = ({\n    dispatch\n}) => (next) => (action) => {\n    if (setFilter.match(action)) {\n        dispatch(getAllPostsAsync(action.payload))\n    }\n\n    next(action)\n}\nexport default onFilterChange\n","import accountStateMiddlewares from './states/account-state/middlewares';\nimport postsMiddlewares from './states/posts-state/middlewares'\n\nexport default [...accountStateMiddlewares, ...postsMiddlewares]\n\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport { reducer as formReducer } from 'redux-form'\n\nimport { reducer as accountReducer } from \"./states/account-state\";\nimport { reducer as postsReducer } from \"./states/posts-state\";\nimport { reducer as filterReducer } from \"./states/filter-state\";\nimport { themeReducer } from './states/theme-state'\nimport middlewares from './middlewares'\nimport { useDispatch } from \"react-redux\";\n\nconst store = configureStore({\n    reducer: {\n        account: accountReducer,\n        posts: postsReducer,\n        filter: filterReducer,\n        theme: themeReducer,\n        form: formReducer\n    },\n    middleware: getDefaultMiddleware({ serializableCheck: false }).concat(middlewares)\n})\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = ReturnType<typeof store.dispatch>\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>()\nexport default store","import store from \"./store\";\n\nexport default store\nexport * from './store'","import { useSelector } from \"react-redux\"\n\nimport { selectActiveTheme, setActiveTheme } from \"../store/states/theme-state\"\nimport { useAppDispatch } from \"../store\"\nimport { IAppTheme } from \"../store/states/theme-state/ThemeState\"\n\ninterface IUseThemeHookActions {\n    setActiveTheme: ValueCallback<IAppTheme>\n}\n\ntype IUseThemeHook = Hook<IAppTheme, IUseThemeHookActions>\n\nconst useAppTheme = (): IUseThemeHook => {\n    const activeTheme = useSelector(selectActiveTheme)\n    const dispatch = useAppDispatch()\n\n    return [\n        activeTheme,\n        {\n            setActiveTheme: (theme) => dispatch(setActiveTheme(theme))\n        }\n    ]\n}\n\nexport default useAppTheme","import React from 'react'\nimport { ThemeProviderProps, ThemeProvider } from '@material-ui/core'\nimport useAppTheme from '../hooks/useAppTheme'\nimport { darkTheme, lightTheme, setTheme as setThemeLocally } from './'\n\ntype IAppThemeProviderProps = Omit<ThemeProviderProps, 'theme'>\n\nconst AppThemeProvider: React.FC<IAppThemeProviderProps> = (props) => {\n    const [activeTheme] = useAppTheme()\n\n    React.useEffect(() => {\n        // Sets theme to localStorage to persist during page reloads\n        setThemeLocally(activeTheme)\n    }, [activeTheme])\n\n    const getTheme = () => {\n        if (activeTheme === 'dark') {\n            return darkTheme\n        }\n\n        return lightTheme\n    }\n\n    return (\n        <ThemeProvider theme={getTheme()} {...props} />\n    )\n}\n\nexport default AppThemeProvider\n","import { Selector } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../store\";\nimport AccountState from \"./AccountState\";\nimport AccountModel from \"../../models/AccountModel\";\n\nexport const accountStateSelector: Selector<RootState, AccountState> = (state) => state.account\n\nexport const accountSelector: Selector<RootState, AccountModel> = (state) => accountStateSelector(state).account\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport AccountModel from '../store/models/AccountModel'\nimport { accountSelector } from '../store/states/account-state/account-selectors'\nimport { updateAccountAsync, loginAsync, logoutAsync, createAccountAsync } from '../store/states/account-state/actions'\nimport { useAppDispatch } from '../store'\nimport { unwrapResult } from '@reduxjs/toolkit'\n\ninterface AccountHookOpts {\n    autoFetch: boolean\n}\n\ninterface AccountFetchStatus {\n    loading: boolean\n    success: boolean\n    failure: boolean\n    uninitiated: boolean\n}\n\ninterface AccountActions {\n    login: ValueCallback<LoginData>\n    logout: VoidCallback\n    createAccount: ValueCallback<RegisterData>\n    updateAccount: VoidCallback\n}\n\ntype AccountHook = HookWithMeta<AccountModel, AccountActions, AccountFetchStatus>\n\nconst useAccount = ({ autoFetch }: AccountHookOpts = { autoFetch: false }): AccountHook => {\n    const [accountFetchStatus, setAccountStatus] = React.useState<GenericAsyncState>('uninitiated')\n    const dispatch = useAppDispatch()\n\n    React.useEffect(() => {\n        async function updateAccount() {\n            if (autoFetch) {\n                setAccountStatus('loading')\n                await dispatch(updateAccountAsync())\n                    .then(unwrapResult)\n                    .then((_: any) => setAccountStatus('success'))\n                    .catch((_: any) => setAccountStatus('fail'))\n            }\n        }\n\n        updateAccount()\n    }, [dispatch, autoFetch])\n\n    const account = useSelector(accountSelector)\n\n    return [\n        account,\n        {\n            login: (data) => dispatch(loginAsync(data)),\n            logout: () => dispatch(logoutAsync()),\n            createAccount: (data) => dispatch(createAccountAsync(data)),\n            updateAccount: () => dispatch(updateAccountAsync())\n        },\n        {\n            loading: accountFetchStatus === 'loading',\n            success: accountFetchStatus === 'success',\n            failure: accountFetchStatus === 'fail',\n            uninitiated: accountFetchStatus === 'uninitiated'\n        }\n    ]\n}\n\nexport default useAccount","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport LinearProgress from '@material-ui/core/LinearProgress'\n\nconst useStyles = makeStyles(createStyles({\n    root: {\n        height: '100%'\n    },\n    typography: {\n        fontFamily: 'Caveat' || 'cursive',\n    }\n}))\n\nconst SplashScreen = () => {\n    const classes = useStyles()\n\n    return (\n        <>\n            <LinearProgress />\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                className={classes.root}\n            >\n                <Typography variant='h4' className={classes.typography}>\n                    Personal Archive\n            </Typography>\n            </Grid>\n        </>\n    )\n}\n\nexport default SplashScreen\n","import React from 'react'\nimport { TypographyProps, Typography } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport clsx from 'clsx'\nimport parse from 'autosuggest-highlight/parse'\n\ninterface IHighlightTypographyProps extends TypographyProps {\n    query?: string\n    text?: string\n}\n\ntype IHighlightTypography = React.FC<IHighlightTypographyProps>\n\nconst useStyles = makeStyles((theme) => createStyles({\n    highlight: {\n        backgroundColor: theme.palette.secondary.main,\n    }\n}))\n\nconst HighlightTypography: IHighlightTypography = ({ query, text, ...typographyProps }) => {\n    const classes = useStyles()\n\n    const TypographyWithProps: React.FC<TypographyProps> = (props) => {\n        const className = clsx(typographyProps.className, props.className)\n        return <Typography {...typographyProps} {...props} className={className} />\n    }\n\n    if (!query || !text) {\n        return <TypographyWithProps>{text}</TypographyWithProps>\n    }\n\n    const renderHighlighted = (text: string) => {\n        return (\n            // @ts-ignore\n            <TypographyWithProps component='span' className={classes.highlight}>\n                {text}\n            </TypographyWithProps>\n        )\n    }\n\n    const renderNormal = (text: string) => {\n        return (\n            // @ts-ignore\n            <TypographyWithProps component='span'>{text}</TypographyWithProps>\n        )\n    }\n\n    return (\n        <TypographyWithProps>\n            {\n                queryMatcher(text, query).map(({ text, highlight }) => {\n                    return highlight ? renderHighlighted(text) : renderNormal(text)\n                })\n            }\n        </TypographyWithProps>\n    )\n}\n\n// Sincere credits: https://github.com/moroshko/autosuggest-highlight/issues/5#issuecomment-392333344\nfunction queryMatcher(text?: string, query?: string) {\n    if (!(typeof text === 'string' && typeof query === 'string')) {\n        return []\n    }\n\n    const trimmedQuery = query.trim().toLowerCase()\n    const textLower = text.toLowerCase()\n    const queryLength = trimmedQuery.length\n\n    if (textLower.length === 0 && queryLength === 0) {\n        return []\n    }\n\n    const results = []\n    let indexOf = textLower.indexOf(trimmedQuery)\n    while (indexOf > -1) {\n        results.push([indexOf, indexOf + queryLength])\n        indexOf = textLower.indexOf(query, indexOf + queryLength)\n    }\n\n    return parse(text, results)\n}\n\nexport default HighlightTypography\n","import { useSelector } from \"react-redux\"\n\nimport FilterState from \"../store/states/filter-state/FilterState\"\nimport { useAppDispatch } from \"../store\"\nimport { selectFilterState } from \"../store/states/filter-state/filter-selectors\"\nimport { setFilter } from \"../store/states/filter-state/filter-slice\"\n\ninterface IUseFilterHookActions {\n    setFilter: ValueCallback<FilterState>\n}\n\ntype IUseFilterHook = Hook<FilterState, IUseFilterHookActions>\n\nconst useFilter = (): IUseFilterHook => {\n    const dispatch = useAppDispatch()\n    const filter = useSelector(selectFilterState)\n\n    return [\n        filter,\n        {\n            setFilter: (filter) => dispatch(setFilter(filter))\n        }\n    ]\n}\n\nexport default useFilter","import React from 'react'\nimport { IPostTitle } from '../typings/PostTitle'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { blue } from '@material-ui/core/colors'\nimport HighlightTypography from '../../../components/HighlightTypography'\nimport useFilter from '../../../hooks/useFilter'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        fontWeight: theme.typography.fontWeightBold,\n        color: 'inherit',\n        textDecoration: 'none',\n        transition: '0.8s color ease-out',\n        outline: 0,\n        '&:hover': {\n            textDecoration: 'none',\n            color: blue[800],\n        }\n    }\n}))\n\nconst kMaxTitleLength = 50\n\nconst PostTitle: IPostTitle = ({ post: { title: postTitle, link } }) => {\n    const classes = useStyles()\n    const [{ query }] = useFilter()\n\n    const trimmedTitle = postTitle.trim()\n    const titleLength = trimmedTitle.length\n    const strippedTitle = trimmedTitle.substring(0, kMaxTitleLength)\n    const ellipsis = titleLength > kMaxTitleLength ? '...' : ''\n    const displayTitle = `${strippedTitle}${ellipsis}`\n\n    return (\n        <HighlightTypography\n            className={classes.root}\n            variant='h5'\n            // @ts-ignore\n            component='a'\n            href={link || '#'}\n            target='_blank'\n            text={displayTitle}\n            query={query}\n        />\n    )\n}\n\nexport default PostTitle\n","import React from 'react'\nimport { IPostComment } from '../typings/PostComment'\n\nimport useFilter from '../../../hooks/useFilter'\nimport HighlightTypography from '../../../components/HighlightTypography'\n\nconst PostComment: IPostComment = ({ post: { comment } }) => {\n    const [{ query }] = useFilter()\n\n    return (\n        <HighlightTypography\n            paragraph\n            text={comment}\n            query={query}\n        />\n    )\n}\n\nexport default PostComment\n","import React from 'react'\nimport { IPostTags } from '../typings/PostTags'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Chip from '@material-ui/core/Chip'\nimport Typography from '@material-ui/core/Typography'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        display: 'inline-flex',\n        flexWrap: 'wrap',\n        '& > *': {\n            margin: theme.spacing(0.5),\n        },\n        // To counter the margin applied to first child on the left by '& > *' styling above\n        marginLeft: `-${theme.spacing(0.5)}px`\n    },\n\n    tag: {\n        color: theme.palette.primary.light,\n    }\n}))\n\nconst kMaxVisibleTags = 5\n\nconst PostTags: IPostTags = ({ post: { tags } }) => {\n    const classes = useStyles()\n\n    if (tags.length === 0) {\n        return null\n    }\n\n    const remainingTags = tags.length - kMaxVisibleTags\n\n    const renderSingleTag = (tag: string) => {\n        // In case you're wondering why use color='primary' when already using that in className,\n        // this is why: classes.tag only overrides the text color but the border will remain default\n        // If you don't provide color in the component itself, the text will be fine \n        // but the border will default to grey which doesn't look pretty :D\n        return (\n            <Chip\n                clickable\n                className={classes.tag}\n                size='small'\n                variant='outlined'\n                color='primary'\n                label={tag}\n                component='a'\n                href='http://localhost:7000'\n                target='_blank'\n            />\n        )\n    }\n\n    return (\n        <div className={classes.root}>\n            {tags.slice(0, Math.min(kMaxVisibleTags, tags.length)).map(renderSingleTag)}\n            {\n                remainingTags > 0 ?\n                    <Typography>\n                        + {remainingTags} tags\n                    </Typography> :\n                    null\n            }\n        </div>\n    )\n}\n\nexport default PostTags\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport DotSeparatorIcon from '@material-ui/icons/FiberManualRecord'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport dateFormat from 'date-fns/format'\n\nimport { IPostMeta } from '../typings/PostMeta'\nimport PostTags from './PostTags'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    dotSeparator: {\n        ...theme.typography.subtitle2\n    }\n}))\n\nconst PostMeta: IPostMeta = ({ post }) => {\n    const classes = useStyles()\n    const creationDate = dateFormat(post.createdAt, 'MMM dd, yyyy')\n\n    return (\n        <Grid\n            container\n            wrap='nowrap'\n            alignItems='center'\n            alignContent='center'\n            spacing={2}\n        >\n            <Grid item wrap='nowrap'>\n                <Typography color='textSecondary'>\n                    {creationDate}\n                </Typography>\n            </Grid>\n\n            {post.tags.length > 0 &&\n                <Grid item>\n                    <DotSeparatorIcon className={classes.dotSeparator} />\n                </Grid>\n            }\n\n            <Grid item>\n                <PostTags post={post} />\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default PostMeta\n","import React from 'react'\nimport clsx from 'clsx'\nimport { Link, LinkProps } from 'react-router-dom'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Typography, { TypographyProps } from '@material-ui/core/Typography'\n\nimport { blue } from '@material-ui/core/colors'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        textDecoration: 'none',\n        transition: '0.8s color ease-out',\n        outline: 0,\n        '&:hover': {\n            textDecoration: 'none',\n            color: blue[800],\n        }\n    },\n}))\n\nconst LinkTypography: React.FC<TypographyProps & LinkProps & { linkOutsideApp?: boolean }> = ({\n    className,\n    to,\n    linkOutsideApp,\n    ...props\n}) => {\n    const classes = useStyles()\n\n    const linkProps: any = {}\n    if (linkOutsideApp) {\n        linkProps.component = 'a'\n        linkProps.href = to\n        linkProps.target = '_blank'\n    }else{\n        linkProps.component = Link\n        linkProps.to = to\n    }\n\n    return (\n        <Typography\n            className={clsx(className, classes.root)}\n            {...linkProps}\n            {...props}\n        />\n    )\n}\n\nexport default LinkTypography\n","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport LinkIcon from '@material-ui/icons/Link'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { IPostLink } from '../typings/PostLink'\nimport LinkTypography from '../../../components/LinkTypography'\nimport { blue } from '@material-ui/core/colors'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        ...theme.typography.subtitle1,\n        verticalAlign: 'middle',\n        display: 'inline-flex',\n    },\n    link: {\n        color: blue[600]\n    }\n}))\n\nconst PostLink: IPostLink = ({ post }) => {\n    const classes = useStyles()\n    if (!post.link) {\n        return null\n    }\n\n    return (\n        <Typography className={classes.root}>\n            <LinkIcon />\n            &nbsp;\n            <LinkTypography linkOutsideApp to={post.link} className={classes.link}>\n                {post.link}\n            </LinkTypography>\n        </Typography>\n    )\n}\n\nexport default PostLink","import React from 'react'\n\nimport { IPostSubtitle } from '../typings/PostSubtitle'\nimport PostComment from './PostComment'\nimport PostMeta from './PostMeta'\nimport PostLink from './PostLink'\n\nconst PostSubtitle: IPostSubtitle = ({ post }) => {\n    return (\n        <>\n            <PostLink post={post} />\n            <PostComment post={post} />\n            <PostMeta post={post} />\n        </>\n    )\n}\n\nexport default PostSubtitle","import postsAdapter from \"./posts-adapter\";\nimport { RootState } from \"../../store\";\n\nconst selectors = postsAdapter.getSelectors<RootState>(state => state.posts)\n\nexport const { selectAll, selectById, selectTotal } = selectors\n","import { AsyncThunk } from \"@reduxjs/toolkit\";\n\nexport default function unwrapAxiosError(actionToMatch: AsyncThunk<any, any, any>) {\n    return (resultAction: any) => {\n        if (actionToMatch.fulfilled.match(resultAction)) {\n            return resultAction.payload\n        } else if (actionToMatch.rejected.match(resultAction)) {\n            throw resultAction.payload\n        } else {\n            return resultAction\n        }\n    }\n}","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport PostModel from '../store/models/PostModel'\nimport { getAllPostsAsync, createPostAsync, editPostAsync } from '../store/states/posts-state/actions'\nimport { useAppDispatch } from '../store'\nimport { selectAll as selectAllPosts } from '../store/states/posts-state/posts-selectors'\n\nimport { IPostData } from '../api/posts'\nimport unwrapAxiosError from '../utils/unwrap-axios-thunk-result'\n\ninterface IUsePostsHookOpts {\n    autoFetch: boolean\n}\n\nexport interface IPostsFetchStatus {\n    loading: boolean\n    success: boolean\n    failure: boolean\n    uninitiated: boolean\n    error?: any\n}\n\ninterface IPostsActions {\n    updateAllPosts: VoidCallback\n    createPost: ValueCallback<IPostData>\n    editPost: ValueCallback<IPostData & { id: string }>\n}\n\ntype IUsePostsHook = HookWithMeta<PostModel[], IPostsActions, IPostsFetchStatus>\n\nconst usePosts = ({ autoFetch }: IUsePostsHookOpts = { autoFetch: false }): IUsePostsHook => {\n    const [postsStatus, setPostsStatus] = React.useState<GenericAsyncState>('uninitiated')\n    const [error, setError] = React.useState<any>()\n    const dispatch = useAppDispatch()\n\n    React.useEffect(() => {\n        async function updatePosts() {\n            if (autoFetch) {\n                setPostsStatus('loading')\n                await dispatch(getAllPostsAsync())\n                    .then(unwrapAxiosError)\n                    .then((_: any) => setPostsStatus('success'))\n                    .catch((err: any) => {\n                        setPostsStatus('fail')\n                        setError(err)\n                    })\n            }\n        }\n\n        updatePosts()\n    }, [dispatch, autoFetch])\n\n    const posts = useSelector(selectAllPosts)\n\n    return [\n        posts,\n        {\n            updateAllPosts: () => dispatch(getAllPostsAsync()),\n            createPost: (data) => dispatch(createPostAsync(data)),\n            editPost: (data) => dispatch(editPostAsync(data))\n        },\n        {\n            loading: postsStatus === 'loading',\n            success: postsStatus === 'success',\n            failure: postsStatus === 'fail',\n            uninitiated: postsStatus === 'uninitiated',\n            error\n        }\n    ]\n}\n\nexport default usePosts\n","import { useSelector } from 'react-redux'\n\nimport PostModel from '../store/models/PostModel'\nimport { useAppDispatch, RootState } from '../store'\nimport { selectById } from '../store/states/posts-state/posts-selectors'\n\nimport usePosts, { IPostsFetchStatus } from './usePosts'\nimport { deletePostAsync } from '../store/states/posts-state/actions'\n\ntype MaybePost = PostModel | undefined\n\ninterface IUseSinglePostHookOpts {\n    autoFetch: boolean\n}\n\ninterface IPostActions {\n    deletePost: VoidCallback<Promise<any>>\n}\n\ntype IUseSinglePostHook = HookWithMeta<MaybePost, IPostActions, IPostsFetchStatus>\n\nconst useSinglePost = (postId: string, { autoFetch }: IUseSinglePostHookOpts = { autoFetch: false }): IUseSinglePostHook => {\n    // eslint-disable-next-line\n    const [_, __, status] = usePosts({ autoFetch })\n    const post = useSelector<RootState, MaybePost>((state) => selectById(state, postId))\n    const dispatch = useAppDispatch()\n\n    return [post, {\n        deletePost: () => dispatch(deletePostAsync(postId))\n    }, status]\n}\n\nexport default useSinglePost\n","import React from 'react'\n\nimport {\n    Button,\n    Dialog,\n    DialogProps,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions\n} from '@material-ui/core'\nimport PostModel from '../../../store/models/PostModel'\nimport LoadingButton from '../../../components/LoadingButton'\n\ninterface IDeletePostDialogProps extends DialogProps {\n    post: PostModel\n    isDeleting: boolean\n    onDeletePost: VoidCallback\n}\n\nconst DeletePostDialog: React.FC<IDeletePostDialogProps> = ({\n    post,\n    isDeleting,\n    onDeletePost,\n    ...props\n}) => {\n    return (\n        <Dialog {...props}>\n            <DialogTitle>\n                {`Delete Post titled \"${post.title}\"?`}\n            </DialogTitle>\n            <DialogContent>\n                <DialogContentText>\n                    This action cannot be undone\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose as any}>\n                    Don't Delete\n                </Button>\n                <LoadingButton\n                    disableElevation\n                    loading={isDeleting}\n                    variant='contained'\n                    color='primary'\n                    onClick={onDeletePost}\n                >\n                    Delete Post\n                    </LoadingButton>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default DeletePostDialog\n","import React from 'react'\nimport { Menu, MenuProps, MenuItem, ListItemIcon, ListItemText, MenuItemProps } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport { Link } from 'react-router-dom'\n\ntype IMoreOptionsMenuProps = MenuProps & {\n    onDeletePost: VoidCallback\n    editPostUrl: string\n}\n\nconst MoreOptionsMenu: React.FC<IMoreOptionsMenuProps> = ({\n    onDeletePost,\n    editPostUrl,\n    ...props\n}) => {\n    return (\n        <Menu\n            id='more-options-post'\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n            {...props}\n        >\n            <CustomMenuItem\n                icon={EditIcon}\n                text='Edit Post'\n                linkTo={editPostUrl}\n            />\n            <CustomMenuItem icon={DeleteIcon} text='Delete Post' onClick={onDeletePost} />\n        </Menu>\n    )\n}\n\ntype CustomMenuItemProps = MenuItemProps & {\n    icon: React.ElementType\n    text: string\n    linkTo?: string\n}\n\nconst CustomMenuItem: React.FC<CustomMenuItemProps> = ({\n    icon: Icon,\n    text,\n    linkTo,\n    ...props\n}) => {\n    const linkProps: any = {}\n    if (Boolean(linkTo)) {\n        linkProps.component = Link\n        linkProps.to = linkTo\n    }\n\n    return (\n        // @ts-ignore\n        <MenuItem {...props} {...linkProps}>\n            <ListItemIcon>\n                <Icon />\n            </ListItemIcon>\n            <ListItemText>\n                {text}\n            </ListItemText>\n        </MenuItem>\n    )\n}\n\nexport default MoreOptionsMenu\n","import React from 'react'\n\nimport DeletePostIcon from '@material-ui/icons/Delete'\nimport MoreOptionsIcon from '@material-ui/icons/MoreVert'\nimport EditPostIcon from '@material-ui/icons/Edit'\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport Hidden from '@material-ui/core/Hidden'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useSinglePost from '../../../hooks/useSinglePost'\nimport { IPostActions } from '../typings/PostActions'\nimport { useSnackbar } from 'notistack'\nimport { unwrapResult } from '@reduxjs/toolkit'\nimport { Link } from 'react-router-dom'\nimport { routeMap } from '../../../routes'\nimport DeletePostDialog from './DeletePostDialog'\nimport MoreOptionsMenu from './MoreOptionsMenu'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        marginTop: theme.spacing(1)\n    }\n}))\n\nconst PostActions: IPostActions = ({ post }) => {\n    const classes = useStyles()\n    // eslint-disable-next-line\n    const [_, { deletePost }] = useSinglePost(post.id)\n    const [dialogOpen, setDialogOpen] = React.useState(false)\n    const closeDeleteConfirmationDialog = () => setDialogOpen(false)\n    const openDeleteConfirmationDialog = () => setDialogOpen(true)\n\n    const [menuAnchorEl, setMenuAnchorEl] = React.useState<null | HTMLElement>(null);\n\n    const openMoreOptionsMenu = (event: React.MouseEvent<HTMLElement>) => {\n        setMenuAnchorEl(event.currentTarget);\n    };\n\n    const closeMoreOptionsMenu = () => setMenuAnchorEl(null)\n\n    const { enqueueSnackbar } = useSnackbar()\n    const [deletePostState, setDeletePostState] = React.useState<GenericAsyncState>('uninitiated')\n\n    const handleDeletePost = async () => {\n        setDeletePostState('loading')\n        try {\n            await deletePost().then(unwrapResult)\n            setDeletePostState('success')\n            enqueueSnackbar('Post deleted successfully', { variant: 'success' })\n            setTimeout(closeDeleteConfirmationDialog, 500);\n        } catch (err) {\n            setDeletePostState('fail')\n            enqueueSnackbar('Error deleting post', { variant: 'error' })\n        }\n    }\n\n    const editPostUrl = routeMap.editPost.path.replace(':postId', post.id)\n\n    return (\n        <>\n            <div className={classes.root} >\n                <Hidden xsDown>\n                    <Tooltip title='Edit Post'>\n                        <IconButton component={Link} to={editPostUrl}>\n                            <EditPostIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title='Delete Post (clicking will prompt a confirmation)'>\n                        <IconButton onClick={openDeleteConfirmationDialog}>\n                            <DeletePostIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Hidden>\n\n                <Hidden smUp>\n                    <Tooltip title='More Options'>\n                        <IconButton onClick={openMoreOptionsMenu} >\n                            <MoreOptionsIcon />\n                        </IconButton>\n                    </Tooltip>\n                </Hidden>\n            </div>\n            <DeletePostDialog\n                open={dialogOpen}\n                onClose={closeDeleteConfirmationDialog}\n                isDeleting={deletePostState === 'loading'}\n                onDeletePost={handleDeletePost}\n                post={post}\n            />\n            <MoreOptionsMenu\n                keepMounted\n                open={Boolean(menuAnchorEl)}\n                anchorEl={menuAnchorEl}\n                onClose={closeMoreOptionsMenu}\n                onDeletePost={openDeleteConfirmationDialog}\n                editPostUrl={editPostUrl}\n            />\n        </>\n    )\n}\n\nexport default PostActions\n\n","import React from 'react'\n\nimport { ListItem, ListItemText, ListItemSecondaryAction } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport PostTitle from './PostTitle'\nimport PostSubtitle from './PostSubtitle'\nimport PostActions from './PostActions'\nimport { IPostListItem } from '../typings/PostListItem'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    postActionRoot: {\n        height: '100%'\n    },\n    subtitle: {\n        marginTop: theme.spacing(1)\n    }\n}))\n\nconst PostListItem: IPostListItem = ({ post, autoFocus, className }) => {\n    const classes = useStyles()\n    const [hasHighlighted, setHasHighlighted] = React.useState(false)\n\n    React.useEffect(() => {\n        if (autoFocus && !hasHighlighted) {\n            console.log('Will highlight: ', post)\n            setTimeout(() => {\n                setHasHighlighted(true)\n            }, 3000);\n        }\n    }, [post, autoFocus, hasHighlighted, setHasHighlighted])\n\n    return (\n        // @ts-ignore\n        <ListItem\n            className={className}\n            autoFocus={autoFocus}\n            selected={autoFocus && !hasHighlighted}\n        >\n            <ListItemText\n                primary={<PostTitle post={post} />}\n                secondary={<PostSubtitle post={post} />}\n                secondaryTypographyProps={{ component: 'div', className: classes.subtitle }}\n            />\n            <ListItemSecondaryAction className={classes.postActionRoot}>\n                <PostActions post={post} />\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport default PostListItem\n","import React from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport FloatingActionButton from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { routeMap } from '../../../routes'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    fab: {\n        position: 'fixed',\n        right: theme.spacing(4),\n        bottom: theme.spacing(4),\n        zIndex: 999\n    }\n}))\n\nconst AddPostFab = () => {\n    const classes = useStyles()\n    const history = useHistory()\n\n    return (\n        <FloatingActionButton\n            className={classes.fab}\n            color='secondary'\n            onClick={() => history.push(routeMap.createPost.path)}\n        >\n            <AddIcon />\n        </FloatingActionButton>\n    )\n}\n\nexport default AddPostFab\n","import React from 'react'\n\nimport Skeleton, { SkeletonProps } from '@material-ui/lab/Skeleton'\nimport { IPostListSkeleton } from '../typings/PostListSkeleton'\nimport { List, ListItem, ListItemText } from '@material-ui/core'\n\nconst WaveSkeleton: React.FC<SkeletonProps> = (props) =>\n    <Skeleton animation='wave' {...props} />\n\nconst PostListSkeleton: IPostListSkeleton = ({\n    skeletons = 10,\n    itemClassName = '',\n    subheader\n}) => {\n    const renderSkeleton = () => {\n        return (\n            <ListItem className={itemClassName}>\n                <ListItemText\n                    primary={<WaveSkeleton />}\n                    secondary={\n                        <>\n                            <WaveSkeleton variant='rect' height={64} />\n                            <WaveSkeleton />\n                        </>\n                    }\n                />\n            </ListItem>\n        )\n    }\n\n    return (\n        <List>\n            {subheader}\n            {Array(skeletons).fill(null).map(renderSkeleton)}\n        </List>\n    )\n}\n\nexport default PostListSkeleton\n","import React from 'react'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport { blue } from '@material-ui/core/colors'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { routeMap } from '../../../routes'\nimport LinkTypography from '../../../components/LinkTypography'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    link: {\n        ...theme.typography.subtitle1,\n        color: blue[900]\n    }\n}))\n\nconst NoPostsView = () => {\n    const classes = useStyles()\n\n    return (\n        <Grid container spacing={1} alignItems='center' justify='center'>\n            <Grid item>\n                <Typography align='center' color='textSecondary'>\n                    You don't have any posts.\n                </Typography>\n            </Grid>\n            <Grid item>\n                <LinkTypography\n                    to={routeMap.createPost.path}\n                    className={classes.link}\n                >\n                    Create Post\n                </LinkTypography>\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default NoPostsView\n","import React from 'react'\nimport { WrappedFieldProps, Field } from 'redux-form'\nimport {\n    RadioGroup,\n    Radio,\n    FormLabel,\n    FormControlLabel,\n    FormControl,\n    Grid\n} from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { IPostFilterFormView } from '../../typings/PostFilterForm-View'\nimport TextFormField from '../../../../components/form-fields/TextFormField'\nimport SelectPostTags from '../../../../components/SelectPostTags'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        [theme.breakpoints.up('sm')]: {\n            minWidth: `${theme.breakpoints.width('sm') - 50}px`,\n        },\n        '& > *': {\n            marginTop: theme.spacing(4)\n        },\n        '& > :last-child': {\n            marginBottom: theme.spacing(4)\n        }\n    }\n}))\n\nconst PostFilterFormView: IPostFilterFormView = ({\n    formId,\n    onFormSubmit\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Grid\n            container\n            className={classes.root}\n            id={formId}\n            onSubmit={onFormSubmit}\n            component='form'\n            direction='column'\n        >\n            <Grid item>\n                <TextFormField\n                    name='query'\n                    label='Search Query'\n                    variant='outlined'\n                    autoFocus\n                    fullWidth\n                />\n            </Grid>\n\n            <Grid item>\n                <Field\n                    component={SortTypeComponent}\n                    name='sort'\n                />\n            </Grid>\n\n            <Grid item>\n                <Field\n                    component={SortOrderComponent}\n                    name='order'\n                />\n            </Grid>\n\n            <Grid item>\n                <SelectPostTags\n                    fieldLabel='Add Filter Tags'\n                    getOptionLabel={(value) => `Add tag \"${value}\"`}\n                />\n            </Grid>\n        </Grid>\n    )\n}\n\nconst SortTypeComponent: React.FC<WrappedFieldProps> = ({ input }) => {\n    return (\n        <FormControl component='fieldset'>\n            <FormLabel component='legend'>Sort By</FormLabel>\n            <RadioGroup {...input}>\n                <FormControlLabel value='title' label='Title' control={<Radio />} />\n                <FormControlLabel value='date' label='Date' control={<Radio />} />\n            </RadioGroup>\n        </FormControl>\n    )\n}\n\nconst SortOrderComponent: React.FC<WrappedFieldProps> = ({ input }) => {\n    return (\n        <FormControl component='fieldset'>\n            <FormLabel component='legend'>Sort Order</FormLabel>\n            <RadioGroup {...input}>\n                <FormControlLabel value='asc' label='Ascending' control={<Radio />} />\n                <FormControlLabel value='desc' label='Descending' control={<Radio />} />\n            </RadioGroup>\n        </FormControl>\n    )\n}\n\nexport default PostFilterFormView\n","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { connect } from 'react-redux'\n\nimport PostFilterFormView from './PostFilterForm-View'\nimport {\n    IPostFilterFormConnector,\n    IPostFilterFormConnectorOwnProps,\n    IPostFilterFormData\n} from '../../typings/PostFilterForm-Connector'\nimport useFilter from '../../../../hooks/useFilter'\nimport { RootState } from '../../../../store'\nimport { selectFilterState } from '../../../../store/states/filter-state/filter-selectors'\n\nconst kFormId = 'post-filter-form'\n\nconst PostFilterFormConnector: IPostFilterFormConnector = ({ handleSubmit, afterSetFilter }) => {\n    // eslint-disable-next-line\n    const [_, { setFilter }] = useFilter()\n\n    const submitForm = (formValues: IPostFilterFormData) => {\n        const tags = (formValues.tags || []).map(tag => tag.value)\n\n        setFilter({ ...formValues, tags })\n        afterSetFilter()\n    }\n\n    return <PostFilterFormView formId={kFormId} onFormSubmit={handleSubmit(submitForm)} />\n}\n\nconst mapStateToProps = (state: RootState) => {\n    const filter = selectFilterState(state)\n    const tags = (filter.tags || []).map(value => ({\n        value,\n        label: `Add Tag: ${value}`\n    }))\n\n    return {\n        initialValues: { ...filter, tags }\n    }\n}\n\nconst WithForm = reduxForm<IPostFilterFormData, IPostFilterFormConnectorOwnProps>({\n    form: kFormId,\n})(PostFilterFormConnector)\n\nexport default connect(mapStateToProps)(WithForm)\n\n","import PostFilterForm from \"./PostFilterForm-Connector\";\n\nexport default PostFilterForm","import PostFilterDialog from \"./PostFilterDialog\";\n\nexport default PostFilterDialog","import React from 'react'\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    DialogProps,\n    Button,\n    useMediaQuery,\n    Theme\n} from '@material-ui/core'\n\nimport { PostFilterForm } from './components'\n\nconst PostFilterDialog: React.FC<DialogProps> = (props) => {\n    const fullScreen = useMediaQuery<Theme>((theme) => theme.breakpoints.down('sm'))\n\n    return (\n        <Dialog disableEscapeKeyDown fullScreen={fullScreen} {...props}>\n            <DialogTitle>Filter Posts</DialogTitle>\n            <DialogContent>\n                <PostFilterForm afterSetFilter={props.onClose as any} />\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose as any}>\n                    Cancel\n                </Button>\n\n                <Button\n                    type='submit'\n                    form='post-filter-form'\n                    variant='contained'\n                    color='primary'\n                >\n                    Set Filter\n                </Button>\n            </DialogActions>\n        </Dialog>\n    )\n}\n\nexport default PostFilterDialog","import React from 'react'\n\nimport FilterIcon from '@material-ui/icons/FilterList'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport PostFilterDialog from '../../PostFilterDialog'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        fontSize: 'inherit',\n        color: 'inherit'\n    }\n}))\n\nconst PostListFilter = () => {\n    const classes = useStyles()\n    const [dialogOpen, setDialogOpen] = React.useState(false)\n\n    return (\n        <>\n            <Button\n                className={classes.root}\n                startIcon={<FilterIcon />}\n                onClick={() => setDialogOpen(true)}\n            >\n                Filter\n            </Button>\n            <PostFilterDialog\n                open={dialogOpen}\n                onClose={() => setDialogOpen(false)}\n            />\n        </>\n    )\n}\n\nexport default PostListFilter\n","interface IPostListConstants {\n    itemThemeSpacingUnit: number\n}\n\nconst constants: IPostListConstants = { itemThemeSpacingUnit: 10 }\n\nexport default constants","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport Container from '@material-ui/core/Container'\nimport List from '@material-ui/core/List'\nimport ListSubheader from '@material-ui/core/ListSubheader'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Typography from '@material-ui/core/Typography'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport PostListItem from './components/PostListItem'\nimport AddPostFab from './components/AddPostFab'\nimport PostListSkeleton from './components/PostList-Skeleton'\nimport NoPostsView from './components/NoPostsView'\nimport PostListFilter from './components/PostListFilter'\n\nimport PostModel from '../../store/models/PostModel'\nimport { IPostListView } from './typings/PostList-View'\nimport constants from './constants'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        margin: `${theme.spacing(4)}px auto`\n    },\n    listSubheader: {\n        marginBottom: `-${theme.spacing(constants.itemThemeSpacingUnit / 1.5)}px`,\n        display: 'flex',\n        alignItems: 'baseline'\n    },\n    subheaderMainTitle: {\n        fontSize: 'inherit',\n        fontWeight: 'inherit',\n        flexGrow: 1\n    },\n    item: {\n        margin: `${theme.spacing(constants.itemThemeSpacingUnit)}px auto`\n    },\n}))\n\nconst PostListView: IPostListView = ({\n    posts,\n    highlightPost,\n    isLoading,\n    searchQuery\n}) => {\n    const classes = useStyles()\n\n    const subheader = (\n        <ListSubheader disableSticky className={classes.listSubheader}>\n            <Typography className={classes.subheaderMainTitle}>\n                POSTS\n            </Typography>\n            <PostListFilter />\n        </ListSubheader>\n    )\n\n    const renderPosts = () => {\n        if (posts.length === 0 && typeof searchQuery === 'undefined') {\n            return <NoPostsView />\n        }\n\n        const noMatchingPosts = (\n            <ListItem className={classes.item}>\n                <ListItemText primaryTypographyProps={{ align: 'center' }}>\n                    No posts matching the query '{searchQuery}'\n                            </ListItemText>\n            </ListItem>\n        )\n\n        const postListBody = posts.map((post: PostModel) =>\n            <PostListItem\n                className={classes.item}\n                post={post}\n                key={post.id}\n                autoFocus={post.id === highlightPost}\n            />\n        )\n\n        return (\n            <List>\n                {subheader}\n                {\n                    searchQuery && posts.length === 0 ?\n                        noMatchingPosts :\n                        postListBody\n                }\n            </List>\n        )\n    }\n\n    return (\n        <>\n            <Helmet>\n                <title>Posts</title>\n            </Helmet>\n            <AddPostFab />\n            <Container maxWidth='md' className={classes.root}>\n                {\n                    isLoading ?\n                        <PostListSkeleton\n                            itemClassName={classes.item}\n                            subheader={subheader}\n                        /> :\n                        renderPosts()\n                }\n            </Container>\n        </>\n    )\n}\n\nexport default PostListView\n","import PostList from \"./PostList-Connector\";\n\nexport default PostList","import React from 'react'\nimport PostListView from './PostList-View'\nimport usePosts from '../../hooks/usePosts'\nimport useFilter from '../../hooks/useFilter'\n\nconst PostListConnector: React.FC<{ highlightPost?: string }> = ({ highlightPost }) => {\n    const [posts, { updateAllPosts }, { loading, error }] = usePosts({ autoFetch: true })\n    const [{ query }] = useFilter()\n\n    return (\n        <PostListView posts={posts}\n            onUpdatePosts={updateAllPosts}\n            highlightPost={highlightPost}\n            isLoading={loading}\n            error={error}\n            searchQuery={query}\n        />\n    )\n}\n\nexport default PostListConnector\n","import React from 'react'\nimport { Redirect, useLocation } from 'react-router-dom'\n\nimport useAccount from '../../hooks/useAccount'\nimport PostList from '../../features/PostList'\nimport { routeMap } from '../routes'\n\ninterface IHomePageHistoryState {\n    highlightPost?: string\n}\n\nconst HomePage = () => {\n    const [{ loggedIn }] = useAccount()\n    const { state } = useLocation<IHomePageHistoryState>()\n\n    const highlightPost = state ? state.highlightPost : undefined\n\n    if (loggedIn) {\n        return <PostList highlightPost={highlightPost} />\n    }\n\n    return <Redirect to={routeMap.login.path} />\n}\n\nexport default HomePage\n","import React from 'react'\nimport { InputAdornment, IconButton } from '@material-ui/core'\nimport VisibilityOn from '@material-ui/icons/Visibility'\nimport VisibilityOff from '@material-ui/icons/VisibilityOff'\n\nimport TextFormField from './TextFormField'\n\ninterface IPasswordFieldProps {\n    name: string\n    label: string\n}\n\nconst PasswordField: React.FC<IPasswordFieldProps> = ({\n    name,\n    label\n}) => {\n    const [showPassword, setShowPassword] = React.useState(false)\n\n    const togglePasswordVisibility = () => setShowPassword(!showPassword)\n\n    return (\n        <TextFormField\n            type={showPassword ? 'text' : 'password'}\n            label={label}\n            name={name}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position='end'>\n                        <IconButton\n                            onClick={togglePasswordVisibility}\n                        >\n                            {\n                                showPassword ?\n                                    <VisibilityOn /> :\n                                    <VisibilityOff />\n                            }\n                        </IconButton>\n                    </InputAdornment>\n                )\n            }}\n        />\n    )\n}\n\nexport default PasswordField\n","import React from 'react'\nimport { Redirect, Link } from 'react-router-dom'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { ILoginPageView } from './typings/LoginPage-View'\nimport TextFormField from '../../../components/form-fields/TextFormField'\nimport PasswordField from '../../../components/form-fields/PasswordField'\nimport LoadingButton from '../../../components/LoadingButton'\nimport { red } from '@material-ui/core/colors'\nimport { routeMap } from '../..'\nimport { Divider } from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        //height: '100%',\n        padding: theme.spacing(8)\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    error: {\n        fontSize: '0.8rem',\n        color: red[900],\n        marginBottom: theme.spacing(1)\n    }\n}))\n\nconst LoginPageView: ILoginPageView = ({\n    loggedIn,\n    isLoggingIn,\n    formId,\n    onFormSubmit,\n    loginError,\n    loginResult\n}) => {\n    const classes = useStyles()\n\n    if (loginResult === 'success' || loggedIn) {\n        return <Redirect to={routeMap.home.path} />\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                spacing={6}\n                className={classes.fullHeight}\n            >\n                <Grid item>\n                    <Typography variant='h4'>\n                        Login\n                    </Typography>\n                </Grid>\n\n                <Grid item>\n                    {loginError &&\n                        <Typography className={classes.error}>\n                            *{loginError}\n                        </Typography>\n                    }\n                    <form id={formId} onSubmit={onFormSubmit}>\n                        <Grid\n                            item\n                            container\n                            justify='center'\n                            alignContent='space-around'\n                            direction='column'\n                            spacing={4}\n                            className={classes.fullHeight}\n                        >\n                            <Grid item>\n                                <TextFormField name='username' label='Username' autoFocus />\n                            </Grid>\n                            <Grid item>\n                                <PasswordField name='password' label='Password' />\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n\n                <Grid item container justify='center'>\n                    <Grid item>\n                        <LoadingButton\n                            loading={isLoggingIn}\n                            variant='contained'\n                            color='primary'\n                            type='submit'\n                            form={formId}\n                        >\n                            Login\n                        </LoadingButton>\n                    </Grid>\n                </Grid>\n\n                <Grid item>\n                    <Divider variant='fullWidth' />\n                    <Button component={Link} to={routeMap.register.path}>\n                        Create account instead\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default LoginPageView","import React from 'react'\nimport { useSnackbar } from 'notistack'\n\nimport LoginPageView from './LoginPage-View'\nimport { ILoginPageContainer } from './typings/LoginPage-Container'\n\nconst LoginPageContainer: ILoginPageContainer = ({\n    loginResult,\n    ...otherProps\n}) => {\n    const { enqueueSnackbar } = useSnackbar()\n    // If login fails, error snackbar is shown and then marked shown\n    // Next time the snackbar is not shown since it was marked shown\n    // Make sure to reset the flag on snackbar close/UI state changed (text field change, etc)\n    const [snackbarShown, setSnackbarShown] = React.useState(false)\n    if (loginResult && !snackbarShown) {\n        const onEnter = () => setSnackbarShown(true)\n\n        if (loginResult === 'success') {\n            enqueueSnackbar(\n                'Login Successful. You will be redirected shortly',\n                { variant: 'success', onEnter }\n            )\n        } else {\n            enqueueSnackbar('Login Failed', { variant: 'error', onEnter })\n        }\n    }\n\n    return <LoginPageView loginResult={loginResult} {...otherProps} />\n}\n\nexport default LoginPageContainer","import LoginPage from \"./LoginPage-FormConnector\";\n\nexport default LoginPage","import React from 'react'\nimport { reduxForm } from 'redux-form'\n\nimport useAccount from '../../../hooks/useAccount'\nimport { loginAsync } from '../../../store/states/account-state/actions'\nimport unwrapAxiosThunkResult from '../../../utils/unwrap-axios-thunk-result'\n\nimport { ILoginPageFormConnector, ILoginPageFormConnectorOwnProps } from './typings/LoginPage-FormConnector'\nimport { ILoginResult } from './typings/LoginPage-View'\nimport LoginPageContainer from './LoginPage-Container'\n\nconst kFormId = 'login-form'\n\nconst LoginPageFormConnector: ILoginPageFormConnector = ({ handleSubmit }) => {\n    // eslint-disable-next-line\n    const [{ loggedIn }, { login }] = useAccount()\n    const [isLoggingIn, setLoggingIn] = React.useState(false)\n    const [loginError, setLoginError] = React.useState<string | undefined>(undefined)\n    const [loginResult, setLoginResult] = React.useState<ILoginResult>()\n\n    const performLogin = async (loginData: LoginData) => {\n        console.log('Perform Login: ', loginData)\n        setLoggingIn(true)\n\n        await login(loginData)\n            .then(unwrapAxiosThunkResult(loginAsync))\n            .then((_: any) => {\n                setLoginResult('success')\n            })\n            .catch((errResponse: SimplifiedAxiosResponse) => {\n                if (errResponse.status === 401) {\n                    setLoginError(errResponse.data.message)\n                } else {\n                    setLoginError('An unknown error occurred. Please try again later')\n                }\n\n                setLoginResult('failure')\n            })\n\n        setLoggingIn(false)\n    }\n\n    return (\n        <LoginPageContainer\n            loggedIn={loggedIn}\n            loginResult={loginResult}\n            loginError={loginError}\n            isLoggingIn={isLoggingIn}\n            formId={kFormId}\n            onFormSubmit={handleSubmit(performLogin)}\n        />\n    )\n}\n\nexport default reduxForm<LoginData, ILoginPageFormConnectorOwnProps>({\n    form: kFormId,\n    initialValues: {\n        username: 'John Doe',\n        password: 'password'\n    }\n})(LoginPageFormConnector)\n","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Container from '@material-ui/core/Container'\n\nimport { ICreatePostView } from './typings/CreatePostPage-View'\nimport PostFormView from '../../../features/PostForm'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        margin: `${theme.spacing(8)}px auto`\n    }\n}))\n\nconst CreatePostPageView: ICreatePostView = (props) => {\n    const classes = useStyles()\n\n    return (\n        <Container maxWidth='sm' className={classes.root}>\n            <Helmet>\n                <title>Create Post</title>\n            </Helmet>\n            <PostFormView {...props} formActionText='Create Post' header='Create Post' />\n        </Container>\n    )\n}\n\nexport default CreatePostPageView","import { useState, useEffect } from \"react\"\nimport { useSnackbar } from \"notistack\"\n\ninterface IUseFormHookActions<Meta, Error> {\n    setFormSubmitting: VoidCallback\n    setFormSubmitFail: ValueCallback<Error>\n    setFormSubmitSuccess: ValueCallback<Meta>\n}\n\nexport interface IFormState<Meta = any, Error = any> {\n    status: IFormStatus\n    meta?: Meta\n    error?: Error\n}\n\nexport type IFormStatus = 'initial' | 'submitting' | 'submit-fail' | 'submit-success'\ntype IUseFormHook<M, E> = Hook<IFormState<M, E>, IUseFormHookActions<M, E>>\n\ninterface IUseFormHookOpts {\n    successSnackbarMessage: string\n    failureSnackbarMessage: string\n}\n\nconst useForm = <Meta = void, Error = void>({ successSnackbarMessage, failureSnackbarMessage }: IUseFormHookOpts): IUseFormHook<Meta, Error> => {\n    const [formState, setFormState] = useState<IFormState>({ status: 'initial' })\n    const [snackbarShown, setSnackbarShown] = useState(false)\n    const { enqueueSnackbar } = useSnackbar()\n\n    useEffect(() => {\n        if (snackbarShown) {\n            return\n        }\n\n        if (formState.status === 'submit-success') {\n            enqueueSnackbar(successSnackbarMessage, { variant: 'success' })\n            setSnackbarShown(true)\n        }\n\n        if (formState.status === 'submit-fail') {\n            enqueueSnackbar(failureSnackbarMessage, { variant: 'error' })\n            setSnackbarShown(true)\n        }\n    }, [snackbarShown, formState, setFormState, enqueueSnackbar, successSnackbarMessage, failureSnackbarMessage])\n\n    return [\n        formState,\n        {\n            setFormSubmitSuccess: (meta: Meta) => setFormState({ status: 'submit-success', meta }),\n            setFormSubmitFail: (error: Error) => setFormState({ status: 'submit-fail', error }),\n            setFormSubmitting: () => setFormState({ status: 'submitting' })\n        }\n    ]\n}\n\nexport default useForm","import CreatePostPage from \"./CreatePostPage-FormConnector\";\n\nexport default CreatePostPage","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { Redirect } from 'react-router-dom'\n\nimport {\n    ICreatePostFormConnector,\n    ICreatePostFormData,\n    ICreatePostFormConnectorOwnProps\n} from './typings'\nimport CreatePostPageView from './CreatePostPage-View'\n\nimport usePosts from '../../../hooks/usePosts'\nimport { routeMap } from '../../routes'\nimport unwrapAxiosError from '../../../utils/unwrap-axios-thunk-result'\nimport PostModel from '../../../store/models/PostModel'\nimport { createPostAsync } from '../../../store/states/posts-state/actions'\nimport useForm from '../../../hooks/useForm'\nimport { validator as createPostFormValidator } from '../../../features/PostForm'\n\nconst kFormId = 'create-post-form'\nconst kInitialValues: ICreatePostFormData = {\n    title: 'New Post'\n}\n\nconst CreatePostPageFormConnector: ICreatePostFormConnector = ({ handleSubmit, error }) => {\n    // eslint-disable-next-line\n    const [_, { createPost }] = usePosts()\n    const [formState, formActions] = useForm<PostModel,any>({\n        successSnackbarMessage: 'Your post was created successfully',\n        failureSnackbarMessage: 'Error creating post'\n    })\n\n    const submitForm = ({ tags, ...formValues }: ICreatePostFormData) => {\n        let stringTags: string[] | undefined\n        if (tags) {\n            stringTags = tags.map(tag => tag.value)\n        }\n\n        formActions.setFormSubmitting()\n        createPost({ ...formValues, tags: stringTags })\n            .then(unwrapAxiosError(createPostAsync))\n            // @ts-ignore\n            .then((createdPost: PostModel) => {\n                formActions.setFormSubmitSuccess(createdPost)\n            })\n            .catch((error: any) => {\n                formActions.setFormSubmitFail(error)\n            })\n    }\n\n    if (formState.status === 'submit-success') {\n        const createdPost = formState.meta\n        return <Redirect to={{\n            pathname: routeMap.home.path,\n            state: { highlightPost: createdPost && createdPost.id }\n        }} />\n    }\n\n    return (\n        <CreatePostPageView\n            formId={kFormId}\n            onFormSubmit={handleSubmit(submitForm)}\n            {...formState}\n        />\n    )\n}\n\nexport default reduxForm<ICreatePostFormData, ICreatePostFormConnectorOwnProps>({\n    form: kFormId,\n    initialValues: kInitialValues,\n    validate: createPostFormValidator\n})(CreatePostPageFormConnector)\n","import React from 'react'\nimport { Redirect, Link } from 'react-router-dom'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport Button from '@material-ui/core/Button'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { red } from '@material-ui/core/colors'\n\nimport TextFormField from '../../../components/form-fields/TextFormField'\nimport PasswordField from '../../../components/form-fields/PasswordField'\nimport { routeMap } from '../../'\nimport { IRegisterPageView } from './typings'\nimport FormSubmitButton from '../../../components/FormSubmitButton'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        //height: '100%',\n        padding: theme.spacing(8)\n    },\n    fullHeight: {\n        height: '100%'\n    },\n    error: {\n        fontSize: '0.8rem',\n        color: red[900],\n        marginBottom: theme.spacing(1)\n    }\n}))\n\nconst RegisterPageView: IRegisterPageView = ({\n    loggedIn,\n    formId,\n    onFormSubmit,\n    status,\n    error: registerError\n}) => {\n    const classes = useStyles()\n\n    if (status === 'submit-success' || loggedIn) {\n        return <Redirect to={routeMap.home.path} />\n    }\n\n    return (\n        <div className={classes.root}>\n            <Grid\n                container\n                direction='column'\n                alignItems='center'\n                justify='center'\n                spacing={6}\n                className={classes.fullHeight}\n            >\n                <Grid item>\n                    <Typography variant='h4'>\n                        Create Account\n                    </Typography>\n                </Grid>\n\n                <Grid item>\n                    {registerError &&\n                        <Typography className={classes.error}>\n                            *{registerError}\n                        </Typography>\n                    }\n                    <form id={formId} onSubmit={onFormSubmit}>\n                        <Grid\n                            item\n                            container\n                            justify='center'\n                            alignContent='space-around'\n                            direction='column'\n                            spacing={4}\n                            className={classes.fullHeight}\n                        >\n                            <Grid item>\n                                <TextFormField name='email' label='Email' type='email' autoFocus />\n                            </Grid>\n                            <Grid item>\n                                <TextFormField name='username' label='Username' />\n                            </Grid>\n                            <Grid item>\n                                <PasswordField name='password' label='Password' />\n                            </Grid>\n                        </Grid>\n                    </form>\n                </Grid>\n\n                <Grid item container justify='center'>\n                    <FormSubmitButton\n                        formState={status}\n                        formId={formId}\n                        variant='contained'\n                        color='primary'\n                    >\n                        Register\n                    </FormSubmitButton>\n                </Grid>\n\n                <Grid item>\n                    <Divider />\n                    <Button component={Link} to={routeMap.login.path}>\n                        Login instead\n                    </Button>\n                </Grid>\n            </Grid>\n        </div>\n    )\n}\n\nexport default RegisterPageView\n","import validator from \"validator\"\n\nconst validate = ({ username, email, password }: Partial<RegisterData>) => {\n    const errors: { [P in keyof Partial<RegisterData>]: string } = {}\n\n    const ensureNotEmpty = (name: keyof RegisterData, value?: string) => {\n        if (!value || validator.isEmpty(value)) {\n            errors[name] = `${name} cannot be empty`\n        }\n    }\n\n    ensureNotEmpty('username', username)\n    ensureNotEmpty('password', password)\n    ensureNotEmpty('email', email)\n\n    if (email && !errors.email && !validator.isEmail(email)) {\n        errors.email = 'must be a valid email'\n    }\n\n    return errors\n}\n\nexport default validate","import RegisterPage from './RegisterPage-Connector';\n\nexport default RegisterPage","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { AxiosResponse } from 'axios'\n\nimport useForm from '../../../hooks/useForm'\nimport RegisterPageView from './RegisterPage-View'\nimport useAccount from '../../../hooks/useAccount'\nimport { IRegisterPageConnector, IRegisterPageConnectorOwnProps } from './typings/RegisterPage-Connector'\nimport unwrapAxiosError from '../../../utils/unwrap-axios-thunk-result'\nimport { createAccountAsync } from '../../../store/states/account-state/actions'\nimport validate from './validator'\n\nconst kFormId = 'user-register-form'\n\nconst RegisterPageConnector: IRegisterPageConnector = ({ handleSubmit }) => {\n    const [formState, actions] = useForm<void, any>({\n        successSnackbarMessage: 'User registration completed',\n        failureSnackbarMessage: 'Error registering user. Try again'\n    })\n    const [{ loggedIn }, { createAccount }] = useAccount({ autoFetch: true })\n\n    const submitForm = (formData: RegisterData) => {\n        actions.setFormSubmitting()\n\n        createAccount(formData)\n            .then(unwrapAxiosError(createAccountAsync))\n            .then(actions.setFormSubmitSuccess)\n            .catch(({ status, data }: AxiosResponse) => {\n                const unknownError = 'An unknown error occurred while trying to create the account'\n                if (status === 401) {\n                    actions.setFormSubmitFail(data ? data.message : unknownError)\n                } else {\n                    actions.setFormSubmitFail(unknownError)\n                }\n            })\n    }\n\n    return (\n        <RegisterPageView\n            loggedIn={loggedIn}\n            formId={kFormId}\n            onFormSubmit={handleSubmit(submitForm)}\n            {...formState}\n        />\n    )\n}\n\nexport default reduxForm<RegisterData, IRegisterPageConnectorOwnProps>({\n    form: kFormId,\n    validate\n})(RegisterPageConnector)\n","import React from 'react'\nimport {\n    Dialog,\n    DialogProps,\n    DialogContent,\n    DialogContentText,\n    CircularProgress,\n    Grid\n} from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    dialogContent: {\n        height: '100%',\n        '& > *': {\n            margin: theme.spacing(2)\n        }\n    }\n}))\n\nconst LoadingDialog: React.FC<DialogProps & { loadingText?: string }> = ({\n    loadingText,\n    ...props\n}) => {\n    const classes = useStyles()\n    return (\n        <Dialog fullScreen disableEscapeKeyDown disableBackdropClick {...props}>\n            <DialogContent>\n                <Grid\n                    container\n                    direction='column'\n                    justify='center'\n                    alignItems='center'\n                    className={classes.dialogContent}\n                >\n                    <CircularProgress />\n                    <DialogContentText variant='h4'>{loadingText || 'Loading'}</DialogContentText>\n                </Grid>\n            </DialogContent>\n        </Dialog>\n    )\n}\n\nexport default LoadingDialog\n","import React from 'react'\n\nimport { Helmet } from 'react-helmet'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport Container from '@material-ui/core/Container'\n\nimport { ICreatePostView } from './typings/EditPostPage-View'\nimport PostFormView from '../../../features/PostForm'\nimport LoadingDialog from '../../../features/LoadingDialog'\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        margin: `${theme.spacing(8)}px auto`\n    }\n}))\n\nconst EditPostPageView: ICreatePostView = ({ postFetchStatus: { status }, ...props }) => {\n    const classes = useStyles()\n\n    const postNotReady = status === 'uninitiated' || status === 'loading'\n\n    if (status === 'fail') {\n        return <div>ERROR</div>\n    }\n\n    return (\n        <>\n            <Container maxWidth='sm' className={classes.root}>\n                <Helmet>\n                    <title>Edit Post</title>\n                </Helmet>\n                <PostFormView {...props} formActionText='Confirm Edit' header='Edit Post' />\n            </Container>\n            <LoadingDialog open={postNotReady} loadingText='Loading Post' />\n        </>\n    )\n}\n\nexport default EditPostPageView","import React from 'react'\nimport { reduxForm } from 'redux-form'\nimport { Redirect } from 'react-router-dom'\n\nimport { IPostFormConnector, IPostFormConnectorOwnProps } from './typings'\nimport EditPostPageView from './EditPostPage-View'\n\nimport usePosts from '../../../hooks/usePosts'\nimport { routeMap } from '../../routes'\nimport unwrapAxiosError from '../../../utils/unwrap-axios-thunk-result'\nimport PostModel from '../../../store/models/PostModel'\nimport { editPostAsync } from '../../../store/states/posts-state/actions'\nimport useForm from '../../../hooks/useForm'\nimport { validator as editPostFormValidator, IPostFormData } from '../../../features/PostForm'\n\nconst kFormId = 'edit-post-form'\n\nconst EditPostPageFormConnector: IPostFormConnector = ({\n    handleSubmit,\n    postId,\n    postFetchStatus\n}) => {\n    // eslint-disable-next-line\n    const [_, { editPost }] = usePosts()\n    const [formState, formActions] = useForm<PostModel, any>({\n        successSnackbarMessage: 'Post edit successful',\n        failureSnackbarMessage: 'Error editing post'\n    })\n\n    const submitForm = ({ tags, ...formValues }: IPostFormData) => {\n        let stringTags: string[] | undefined\n        if (tags) {\n            stringTags = tags.map(tag => tag.value)\n        }\n\n        formActions.setFormSubmitting()\n        editPost({ ...formValues, id: postId, tags: stringTags })\n            .then(unwrapAxiosError(editPostAsync))\n            // @ts-ignore\n            .then((editedPost: PostModel) => {\n                console.log({ editedPost })\n                formActions.setFormSubmitSuccess(editedPost)\n            })\n            .catch((error: any) => {\n                formActions.setFormSubmitFail(error)\n            })\n    }\n\n    if (formState.status === 'submit-success') {\n        const editedPost = formState.meta\n        return <Redirect to={{\n            pathname: routeMap.home.path,\n            state: { highlightPost: editedPost && editedPost.id }\n        }} />\n    }\n\n    return (\n        <EditPostPageView\n            formId={kFormId}\n            onFormSubmit={handleSubmit(submitForm)}\n            postFetchStatus={postFetchStatus}\n            {...formState}\n        />\n    )\n}\n\nexport default reduxForm<IPostFormData, IPostFormConnectorOwnProps>({\n    form: kFormId,\n    validate: editPostFormValidator\n})(EditPostPageFormConnector)\n","import { useState } from \"react\"\n\nexport interface IAsyncState<Meta, Error> {\n    status: GenericAsyncState\n    meta?: Meta\n    error?: Error\n}\n\nexport interface IAsyncStateActions<Meta, Error> {\n    setLoading: VoidCallback\n    setSuccess: ValueCallback<Meta>\n    setFailure: ValueCallback<Error>\n}\n\ntype IUseAsyncStateHook<M, E> = Hook<IAsyncState<M, E>, IAsyncStateActions<M, E>>\n\nconst useAsyncState = <M = void, E = any>(): IUseAsyncStateHook<M, E> => {\n    const [state, setState] = useState<IAsyncState<M, E>>({ status: 'uninitiated' })\n\n    return [\n        state, {\n            setLoading: () => setState({ status: 'loading', error: undefined, meta: undefined }),\n            setSuccess: (meta) => setState({ status: 'success', meta, error: undefined }),\n            setFailure: (error) => setState({ status: 'fail', error, meta: undefined })\n        }\n    ]\n}\n\nexport default useAsyncState","import HomePage from \"./pages/HomePage\"\nimport LoginPage from \"./pages/LoginPage\"\nimport CreatePostPageForm from \"./pages/CreatePostPage\"\nimport RegisterPage from \"./pages/RegisterPage\"\nimport EditPostPage from './pages/EditPostPage'\n\ninterface IRouteMap {\n    home: IRoute\n    login: IRoute\n    register: IRoute\n    createPost: IRoute\n    editPost: IRoute\n}\n\ninterface IRoute {\n    path: string\n    component: React.ComponentType\n    exact: boolean\n}\n\nexport const routeMap: IRouteMap = {\n    home: {\n        path: '/',\n        component: HomePage,\n        exact: true\n    },\n    login: {\n        path: '/login',\n        component: LoginPage,\n        exact: true\n    },\n    register: {\n        path: '/register',\n        component: RegisterPage,\n        exact: true\n    },\n    createPost: {\n        path: '/posts/new',\n        component: CreatePostPageForm,\n        exact: true\n    },\n    editPost: {\n        path: '/posts/:postId/edit',\n        component: EditPostPage,\n        exact: true\n    }\n}\n\nexport default Object.values<IRoute>(routeMap as any)","import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nimport EditPostPageFormConnector from './EditPostPage-FormConnector'\nimport { getPostById } from '../../../api/posts'\nimport useAsyncState from '../../../hooks/useAsyncState'\nimport PostModel from '../../../store/models/PostModel'\n\ninterface IEditPostPageParams {\n    postId: string\n}\n\nconst EditPostPageStoreConnector = () => {\n    const [fetchState, { setSuccess, setFailure, setLoading }] = useAsyncState<PostModel | undefined>()\n    const { postId } = useParams<IEditPostPageParams>()\n\n    React.useEffect(() => {\n        async function fetchPost() {\n            setLoading()\n            await getPostById(postId)\n                .then((post) => setSuccess(post ? post : undefined))\n                .catch(setFailure)\n        }\n\n        if (fetchState.status === 'uninitiated') {\n            fetchPost()\n        }\n\n    }, [postId, fetchState, setLoading, setFailure, setSuccess])\n\n\n    const getInitialValues = () => {\n        const post = fetchState.meta\n        if (post) {\n            return {\n                ...post,\n                tags: post.tags.map(value => ({\n                    label: `Create Tag: \"${value}\"`,\n                    value\n                }))\n            }\n        }\n    }\n\n    return (\n        <EditPostPageFormConnector\n            postId={postId}\n            initialValues={getInitialValues()}\n            postFetchStatus={fetchState}\n        />\n    )\n}\n\nexport default EditPostPageStoreConnector\n","import routes, { routeMap } from './routes'\n\nexport { routeMap }\nexport default routes","import React from 'react';\n\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport useAccount from '../../../../hooks/useAccount';\n\ninterface IAccountMenuProps {\n    anchorElement: null | HTMLElement\n    onCloseMenu: React.MouseEventHandler\n}\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    loggedInAs: {\n        marginRight: theme.spacing(1)\n    },\n    username: {\n        fontWeight: theme.typography.fontWeightBold\n    }\n}))\n\nconst AccountMenu: React.FC<IAccountMenuProps> = ({ anchorElement, onCloseMenu }) => {\n    const classes = useStyles()\n    const [{ user, loggedIn }, { logout }] = useAccount()\n\n    if (!loggedIn) {\n        return null\n    }\n\n    const username = user && user.username\n\n    return (\n        <Menu\n            keepMounted\n            id=\"account-menu\"\n            anchorEl={anchorElement}\n            getContentAnchorEl={null}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'center' }}\n            open={Boolean(anchorElement)}\n            onClose={onCloseMenu}\n        >\n            <MenuItem>\n                <Typography className={classes.loggedInAs}>Logged in as:</Typography>\n                <Typography className={classes.username} noWrap>\n                    {username ? username : '-'}\n                </Typography>\n            </MenuItem>\n            <Divider />\n            <MenuItem onClick={logout as any}>Logout</MenuItem>\n        </Menu>\n    );\n}\n\n\nexport default AccountMenu\n","import React from 'react'\nimport AccountIcon from '@material-ui/icons/AccountCircle';\nimport IconButton from '@material-ui/core/IconButton';\n\nimport useAccount from '../../../../hooks/useAccount'\nimport AccountMenu from './AccountMenu';\n\nconst AccountAvatar = () => {\n    // eslint-disable-next-line\n    const [account, _, { loading: isAccountLoading }] = useAccount()\n    const [menuAnchorElement, setMenuAnchorElement] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\n        console.log('click')\n        setMenuAnchorElement(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        console.log('close')\n        setMenuAnchorElement(null);\n    };\n\n    if (isAccountLoading || !account.loggedIn) {\n        return null\n    }\n\n    return (\n        <>\n            <IconButton onClick={handleClick}>\n                <AccountIcon fontSize='large' />\n            </IconButton>\n            <AccountMenu\n                anchorElement={menuAnchorElement}\n                onCloseMenu={handleClose}\n            />\n        </>\n    )\n}\n\nexport default AccountAvatar\n","import React from 'react'\nimport { NavLink, NavLinkProps } from 'react-router-dom'\nimport Button, { ButtonProps } from '@material-ui/core/Button'\n\nimport { routeMap } from '../../../routes'\nimport useAccount from '../../../hooks/useAccount'\n\nconst LinkButton: React.FC<ButtonProps & NavLinkProps> = (props) => {\n    return <Button component={NavLink} {...props} />\n}\n\nconst LoginButton = () => {\n    // eslint-disable-next-line\n    const [account, _, { loading: isAccountLoading }] = useAccount()\n\n    if (account.loggedIn || isAccountLoading) {\n        return null\n    }\n\n    return (\n        <>\n            <LinkButton to={routeMap.login.path} variant='text'>\n                Login\n            </LinkButton>\n            <LinkButton to={routeMap.register.path} variant='outlined'>\n                Register\n            </LinkButton>\n        </>\n    )\n}\n\nexport default LoginButton\n","import React from 'react'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport Tooltip from '@material-ui/core/Tooltip'\nimport LightThemeIcon from '@material-ui/icons/WbSunny'\nimport DarkThemeIcon from '@material-ui/icons/NightsStay'\n\nimport useAppTheme from '../../../hooks/useAppTheme'\n\nconst ThemeSwitcher = () => {\n    const [activeTheme, { setActiveTheme }] = useAppTheme()\n    const isDarkTheme = activeTheme === 'dark'\n\n    const renderIcon = () => {\n        if (isDarkTheme) {\n            return DarkThemeIcon\n        }\n\n        return LightThemeIcon\n    }\n\n    const handleClick = () => {\n        if (isDarkTheme) {\n            return setActiveTheme('light')\n        }\n\n        setActiveTheme('dark')\n    }\n\n    const Icon = renderIcon()\n    return (\n        <Tooltip title='Toggle light/dark theme'>\n            <IconButton onClick={handleClick}>\n                <Icon fontSize='large' />\n            </IconButton>\n        </Tooltip>\n    )\n}\n\nexport default ThemeSwitcher\n","import React from 'react'\nimport { NavLink } from 'react-router-dom';\n\nimport MaterialAppBar from '@material-ui/core/AppBar'\nimport { Toolbar, Typography } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { grey } from '@material-ui/core/colors';\n\nimport { routeMap } from '../../routes';\nimport { AccountAvatar, AccountActions, ThemeSwitcher } from './components'\n\nconst kStyleRemoveLink = {\n    color: 'inherit',\n    textDecoration: 'none',\n    \"&:hover\": {\n        color: 'inherit',\n        textDecoration: 'none'\n    },\n    outline: 0\n}\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        flexGrow: 1,\n        '& .MuiSvgIcon-root': {\n            fill: theme.palette.primary.contrastText\n        }\n    },\n    title: {\n        flexGrow: 1,\n        ...kStyleRemoveLink,\n        '&:hover': {\n            ...kStyleRemoveLink[\"&:hover\"],\n            color: grey[400]\n        },\n        transition: 'color 0.5s ease-in'\n    },\n    noLink: kStyleRemoveLink\n}))\n\nconst AppBar = () => {\n    const classes = useStyles()\n\n    return (\n        <MaterialAppBar className={classes.root}>\n            <Toolbar>\n                <Typography\n                    variant='h6'\n                    className={classes.title}\n                    component={NavLink}\n                    to={routeMap.home.path}\n                >\n                    Personal Archive\n                </Typography>\n                <ThemeSwitcher />\n                <AccountActions />\n                <AccountAvatar />\n            </Toolbar>\n        </MaterialAppBar>\n    )\n}\n\nexport default AppBar\n","import React from 'react'\n\nimport AppBar from '../AppBar/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\n\nconst AppScaffold: React.FC = ({ children }) => {\n    return (\n        <>\n            <AppBar />\n            <Toolbar />\n            {children}\n        </>\n    )\n}\n\nexport default AppScaffold\n","import React from 'react'\nimport { Typography, Grid } from '@material-ui/core'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\nimport { routeMap } from '../routes'\nimport LinkTypography from '../../components/LinkTypography'\n\n\nconst useStyles = makeStyles((theme) => createStyles({\n    root: {\n        height: '100%',\n        padding: theme.spacing(8)\n    },\n}))\n\nconst PageNotFound = () => {\n    const classes = useStyles()\n    return (\n        <Grid\n            container\n            direction='column'\n            justify='center'\n            className={classes.root}\n        >\n            <Typography variant='h1'>Error</Typography>\n            <Typography paragraph>We could not find the page you were looking for</Typography>\n            <LinkTypography to={routeMap.home.path}>Go back home</LinkTypography>\n        </Grid>\n    )\n}\n\nexport default PageNotFound\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport useAccount from '../hooks/useAccount'\nimport SplashScreen from '../features/SplashScreen/SplashScreen'\nimport routes from '../routes'\nimport AppScaffold from '../features/AppScaffold/AppScaffold'\nimport PageNotFound from '../routes/pages/PageNotFound'\n\nconst AppContent = () => {\n    const { loading } = useAccount({ autoFetch: true })[2]\n\n    if (loading) {\n        return <SplashScreen />\n    }\n\n    return (\n        <BrowserRouter>\n            <AppScaffold>\n                <Switch>\n                    {routes.map(route => <Route {...route} key={route.path} />)}\n                    <Route path='*' component={PageNotFound} />\n                </Switch>\n            </AppScaffold>\n        </BrowserRouter>\n    )\n}\n\nconst App = () => {\n    return (\n        <>\n            <Helmet\n                titleTemplate='%s | Personal Archive'\n                defaultTitle='Personal Archive'\n            />\n            <AppContent />\n        </>\n    )\n}\n\nexport default App","import App from \"./App\";\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport './index.css'\n\nimport { Provider as StoreProvider } from 'react-redux'\nimport store from './store'\n\nimport AppThemeProvider from './theme/AppThemeProvider'\n\nimport { SnackbarProvider } from 'notistack'\n\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport App from './app'\n\nReactDOM.render(\n    <StoreProvider store={store}>\n        <AppThemeProvider>\n            <SnackbarProvider>\n                <CssBaseline />\n                <App />\n            </SnackbarProvider>\n        </AppThemeProvider>\n    </StoreProvider>,\n    document.getElementById('root')\n)","import React from 'react'\nimport TextField, { TextFieldProps } from '@material-ui/core/TextField'\nimport Typography from '@material-ui/core/Typography'\nimport { Field, WrappedFieldProps } from 'redux-form'\n\nexport type ITextFormFieldProps = TextFieldProps & {\n    name: string\n    label: string\n}\n\nconst renderField: React.FC<WrappedFieldProps & ITextFormFieldProps> = ({\n    input,\n    meta: { touched, error },\n    label,\n    ...textFieldProps\n}) => {\n    const hasError = touched && error\n\n    return (\n        <>\n            <TextField\n                fullWidth\n                label={label}\n                error={hasError}\n                {...textFieldProps}\n                {...input}\n            />\n            {hasError && <Typography color='error'>{error}</Typography>}\n        </>\n    )\n}\n\nconst TextFormField: React.FC<ITextFormFieldProps> = ({\n    name,\n    label,\n    children,\n    ...textFieldProps\n}) => {\n    return <Field\n        component={renderField}\n        name={name}\n        label={label}\n        {...textFieldProps as any}\n    />\n}\n\nexport default TextFormField\n\n","export * from './posts-get'\nexport * from './posts-create'\nexport * from './posts-delete'\nexport * from './posts-edit'\nexport * from './shared'","import PostFormView from './PostForm-View'\nimport validator from './validator'\n\nexport * from './typings'\nexport { validator }\nexport default PostFormView","// Add createdAt in server\ninterface PostModel {\n    id: string\n    title: string\n    userId: string\n    link?: string\n    comment?: string\n    tags: string[]\n    createdAt: Date\n    updatedAt: Date\n}\n\nexport const postFromJson = (json: any): PostModel => {\n    return {\n        id: json['_id'],\n        title: json['title'],\n        userId: json['userId'],\n        link: json['link'],\n        comment: json['comment'],\n        tags: json['tags'],\n        createdAt: new Date(json['createdAt']),\n        updatedAt: new Date(json['updatedAt'])\n    }\n}\n\nexport default PostModel","import React from 'react'\nimport Button, { ButtonProps } from '@material-ui/core/Button'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport { makeStyles, createStyles } from '@material-ui/core/styles'\n\n\nexport interface ILoadingButtonProps extends ButtonProps {\n    loading?: boolean\n}\n\nconst useStyles = makeStyles((theme) => createStyles({\n    stateIcon: {\n        marginRight: theme.spacing(1.5),\n        verticalAlign: 'middle'\n    }\n}))\n\nconst LoadingButton: React.FC<ILoadingButtonProps> = ({\n    loading = false,\n    children,\n    ...buttonProps\n}) => {\n    const classes = useStyles()\n\n    return (\n        <Button {...buttonProps} disabled={loading}>\n            {loading && <CircularProgress thickness={8} size={14} className={classes.stateIcon} />}\n            {children}\n        </Button>\n    )\n}\n\nexport default LoadingButton\n"],"sourceRoot":""}